#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import claimresponse

class ClaimResponseTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("ClaimResponse", js["resourceType"])
        return claimresponse.ClaimResponse(js)

    def testClaimResponse1(self):
        inst = self.instantiate_from('claimresponse-example-vision-3tier.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ClaimResponse instance')
        self.implClaimResponse1(inst)

        js = inst.as_json()
        self.assertEqual("ClaimResponse", js["resourceType"])
        inst2 = claimresponse.ClaimResponse(js)
        self.implClaimResponse1(inst2)

    def implClaimResponse1(self, inst):
        self.assertEqual(inst.created.value, FHIRDateTime("2014-08-16").value)
        self.assertEqual(inst.created.as_json(), "2014-08-16")
        self.assertEqual(inst.disposition.value, FHIRString("Claim settled as per contract.").value)
        self.assertEqual(inst.disposition.as_json(), "Claim settled as per contract.")
        self.assertEqual(inst.id.value, FHIRString("R3502").value)
        self.assertEqual(inst.id.as_json(), "R3502")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://thebenefitcompany.com/claimresponse").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://thebenefitcompany.com/claimresponse")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("CR6532875367").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "CR6532875367")
        self.assertEqual(inst.item[0].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].adjudication[0].amount.value, 235.4)
        self.assertEqual(inst.item[0].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[0].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[0].adjudication[1].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].adjudication[1].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].adjudication[1].amount.value, 20.0)
        self.assertEqual(inst.item[0].adjudication[1].category.coding[0].code.value, FHIRCode("copay").value)
        self.assertEqual(inst.item[0].adjudication[1].category.coding[0].code.as_json(), "copay")
        self.assertEqual(inst.item[0].adjudication[2].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.item[0].adjudication[2].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.item[0].adjudication[2].value, 80.0)
        self.assertEqual(inst.item[0].adjudication[3].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].adjudication[3].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].adjudication[3].amount.value, 172.32)
        self.assertEqual(inst.item[0].adjudication[3].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[0].adjudication[3].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[0].detail[0].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].detail[0].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].detail[0].adjudication[0].amount.value, 100.0)
        self.assertEqual(inst.item[0].detail[0].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[0].detail[0].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[0].detail[0].adjudication[1].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].detail[0].adjudication[1].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].detail[0].adjudication[1].amount.value, 20.0)
        self.assertEqual(inst.item[0].detail[0].adjudication[1].category.coding[0].code.value, FHIRCode("copay").value)
        self.assertEqual(inst.item[0].detail[0].adjudication[1].category.coding[0].code.as_json(), "copay")
        self.assertEqual(inst.item[0].detail[0].adjudication[2].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.item[0].detail[0].adjudication[2].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.item[0].detail[0].adjudication[2].value, 80.0)
        self.assertEqual(inst.item[0].detail[0].adjudication[3].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].detail[0].adjudication[3].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].detail[0].adjudication[3].amount.value, 80.0)
        self.assertEqual(inst.item[0].detail[0].adjudication[3].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[0].detail[0].adjudication[3].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[0].detail[0].detailSequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[0].detailSequence.as_json(), 1)
        self.assertEqual(inst.item[0].detail[0].noteNumber[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[0].noteNumber[0].as_json(), 1)
        self.assertEqual(inst.item[0].detail[1].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].detail[1].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].detail[1].adjudication[0].amount.value, 110.0)
        self.assertEqual(inst.item[0].detail[1].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[0].detail[1].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[0].detail[1].adjudication[1].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.item[0].detail[1].adjudication[1].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.item[0].detail[1].adjudication[1].value, 80.0)
        self.assertEqual(inst.item[0].detail[1].adjudication[2].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].detail[1].adjudication[2].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].detail[1].adjudication[2].amount.value, 88.0)
        self.assertEqual(inst.item[0].detail[1].adjudication[2].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[0].detail[1].adjudication[2].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[0].detail[1].detailSequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[0].detail[1].detailSequence.as_json(), 2)
        self.assertEqual(inst.item[0].detail[1].noteNumber[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[1].noteNumber[0].as_json(), 1)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[0].amount.value, 60.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[1].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[1].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[1].value, 80.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[2].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[2].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[2].amount.value, 48.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[2].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[2].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[0].detail[1].subDetail[0].noteNumber[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].noteNumber[0].as_json(), 1)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].subDetailSequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].subDetailSequence.as_json(), 1)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[0].amount.value, 30.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[1].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[1].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[1].value, 80.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[2].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[2].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[2].amount.value, 24.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[2].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[2].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[0].detail[1].subDetail[1].subDetailSequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].subDetailSequence.as_json(), 2)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[0].amount.value, 10.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[1].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[1].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[1].value, 80.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[2].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[2].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[2].amount.value, 8.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[2].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[2].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[0].detail[1].subDetail[2].noteNumber[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].noteNumber[0].as_json(), 1)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].subDetailSequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].subDetailSequence.as_json(), 3)
        self.assertEqual(inst.item[0].detail[2].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].detail[2].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].detail[2].adjudication[0].amount.value, 200.0)
        self.assertEqual(inst.item[0].detail[2].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[0].detail[2].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[0].detail[2].adjudication[1].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.item[0].detail[2].adjudication[1].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.item[0].detail[2].adjudication[1].value, 80.0)
        self.assertEqual(inst.item[0].detail[2].adjudication[2].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].detail[2].adjudication[2].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].detail[2].adjudication[2].amount.value, 14.0)
        self.assertEqual(inst.item[0].detail[2].adjudication[2].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[0].detail[2].adjudication[2].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[0].detail[2].detailSequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[0].detail[2].detailSequence.as_json(), 3)
        self.assertEqual(inst.item[0].detail[2].noteNumber[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[2].noteNumber[0].as_json(), 1)
        self.assertEqual(inst.item[0].itemSequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].itemSequence.as_json(), 1)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.outcome.value, FHIRCode("complete").value)
        self.assertEqual(inst.outcome.as_json(), "complete")
        self.assertEqual(inst.payeeType.coding[0].code.value, FHIRCode("provider").value)
        self.assertEqual(inst.payeeType.coding[0].code.as_json(), "provider")
        self.assertEqual(inst.payeeType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/payeetype").value)
        self.assertEqual(inst.payeeType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/payeetype")
        self.assertEqual(inst.payment.adjustment.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.payment.adjustment.currency.as_json(), "USD")
        self.assertEqual(inst.payment.adjustment.value, 75.0)
        self.assertEqual(inst.payment.adjustmentReason.coding[0].code.value, FHIRCode("a002").value)
        self.assertEqual(inst.payment.adjustmentReason.coding[0].code.as_json(), "a002")
        self.assertEqual(inst.payment.adjustmentReason.coding[0].display.value, FHIRString("Prior Overpayment").value)
        self.assertEqual(inst.payment.adjustmentReason.coding[0].display.as_json(), "Prior Overpayment")
        self.assertEqual(inst.payment.adjustmentReason.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/payment-adjustment-reason").value)
        self.assertEqual(inst.payment.adjustmentReason.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/payment-adjustment-reason")
        self.assertEqual(inst.payment.amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.payment.amount.currency.as_json(), "USD")
        self.assertEqual(inst.payment.amount.value, 107.0)
        self.assertEqual(inst.payment.date.value, FHIRDate("2014-08-16").value)
        self.assertEqual(inst.payment.date.as_json(), "2014-08-16")
        self.assertEqual(inst.payment.date.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.payment.identifier.system.value, FHIRUri("http://thebenefitcompany.com/paymentidentifier").value)
        self.assertEqual(inst.payment.identifier.system.as_json(), "http://thebenefitcompany.com/paymentidentifier")
        self.assertEqual(inst.payment.identifier.value.value, FHIRString("201416-123456").value)
        self.assertEqual(inst.payment.identifier.value.as_json(), "201416-123456")
        self.assertEqual(inst.payment.type.coding[0].code.value, FHIRCode("complete").value)
        self.assertEqual(inst.payment.type.coding[0].code.as_json(), "complete")
        self.assertEqual(inst.payment.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-paymenttype").value)
        self.assertEqual(inst.payment.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-paymenttype")
        self.assertEqual(inst.processNote[0].language.coding[0].code.value, FHIRCode("en-CA").value)
        self.assertEqual(inst.processNote[0].language.coding[0].code.as_json(), "en-CA")
        self.assertEqual(inst.processNote[0].language.coding[0].system.value, FHIRUri("urn:ietf:bcp:47").value)
        self.assertEqual(inst.processNote[0].language.coding[0].system.as_json(), "urn:ietf:bcp:47")
        self.assertEqual(inst.processNote[0].number.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.processNote[0].number.as_json(), 1)
        self.assertEqual(inst.processNote[0].text.value, FHIRString("After hours surcharge declined").value)
        self.assertEqual(inst.processNote[0].text.as_json(), "After hours surcharge declined")
        self.assertEqual(inst.processNote[0].type.value, FHIRCode("display").value)
        self.assertEqual(inst.processNote[0].type.as_json(), "display")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the ClaimResponse</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the ClaimResponse</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.total[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.total[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.total[0].amount.value, 235.4)
        self.assertEqual(inst.total[0].category.coding[0].code.value, FHIRCode("submitted").value)
        self.assertEqual(inst.total[0].category.coding[0].code.as_json(), "submitted")
        self.assertEqual(inst.total[1].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.total[1].amount.currency.as_json(), "USD")
        self.assertEqual(inst.total[1].amount.value, 182.0)
        self.assertEqual(inst.total[1].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.total[1].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("vision").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "vision")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/claim-type").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/claim-type")
        self.assertEqual(inst.use.value, FHIRCode("claim").value)
        self.assertEqual(inst.use.as_json(), "claim")

    def testClaimResponse2(self):
        inst = self.instantiate_from('claimresponse-example-additem.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ClaimResponse instance')
        self.implClaimResponse2(inst)

        js = inst.as_json()
        self.assertEqual("ClaimResponse", js["resourceType"])
        inst2 = claimresponse.ClaimResponse(js)
        self.implClaimResponse2(inst2)

    def implClaimResponse2(self, inst):
        self.assertEqual(inst.addItem[0].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[0].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[0].adjudication[0].amount.value, 100.0)
        self.assertEqual(inst.addItem[0].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.addItem[0].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.addItem[0].adjudication[1].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[0].adjudication[1].amount.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[0].adjudication[1].amount.value, 10.0)
        self.assertEqual(inst.addItem[0].adjudication[1].category.coding[0].code.value, FHIRCode("copay").value)
        self.assertEqual(inst.addItem[0].adjudication[1].category.coding[0].code.as_json(), "copay")
        self.assertEqual(inst.addItem[0].adjudication[2].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.addItem[0].adjudication[2].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.addItem[0].adjudication[2].value, 80.0)
        self.assertEqual(inst.addItem[0].adjudication[3].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[0].adjudication[3].amount.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[0].adjudication[3].amount.value, 72.0)
        self.assertEqual(inst.addItem[0].adjudication[3].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.addItem[0].adjudication[3].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.addItem[0].adjudication[3].reason.coding[0].code.value, FHIRCode("ar002").value)
        self.assertEqual(inst.addItem[0].adjudication[3].reason.coding[0].code.as_json(), "ar002")
        self.assertEqual(inst.addItem[0].adjudication[3].reason.coding[0].display.value, FHIRString("Plan Limit Reached").value)
        self.assertEqual(inst.addItem[0].adjudication[3].reason.coding[0].display.as_json(), "Plan Limit Reached")
        self.assertEqual(inst.addItem[0].adjudication[3].reason.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/adjudication-reason").value)
        self.assertEqual(inst.addItem[0].adjudication[3].reason.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/adjudication-reason")
        self.assertEqual(inst.addItem[0].itemSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.addItem[0].itemSequence[0].as_json(), 1)
        self.assertEqual(inst.addItem[0].modifier[0].coding[0].code.value, FHIRCode("x").value)
        self.assertEqual(inst.addItem[0].modifier[0].coding[0].code.as_json(), "x")
        self.assertEqual(inst.addItem[0].modifier[0].coding[0].display.value, FHIRString("None").value)
        self.assertEqual(inst.addItem[0].modifier[0].coding[0].display.as_json(), "None")
        self.assertEqual(inst.addItem[0].modifier[0].coding[0].system.value, FHIRUri("http://example.org/fhir/modifiers").value)
        self.assertEqual(inst.addItem[0].modifier[0].coding[0].system.as_json(), "http://example.org/fhir/modifiers")
        self.assertEqual(inst.addItem[0].net.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[0].net.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[0].net.value, 135.57)
        self.assertEqual(inst.addItem[0].noteNumber[0].value, FHIRPositiveInt('101').value)
        self.assertEqual(inst.addItem[0].noteNumber[0].as_json(), 101)
        self.assertEqual(inst.addItem[0].productOrService.coding[0].code.value, FHIRCode("1101").value)
        self.assertEqual(inst.addItem[0].productOrService.coding[0].code.as_json(), "1101")
        self.assertEqual(inst.addItem[0].productOrService.coding[0].system.value, FHIRUri("http://example.org/fhir/oralservicecodes").value)
        self.assertEqual(inst.addItem[0].productOrService.coding[0].system.as_json(), "http://example.org/fhir/oralservicecodes")
        self.assertEqual(inst.addItem[1].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[1].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[1].adjudication[0].amount.value, 35.57)
        self.assertEqual(inst.addItem[1].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.addItem[1].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.addItem[1].adjudication[1].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.addItem[1].adjudication[1].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.addItem[1].adjudication[1].value, 80.0)
        self.assertEqual(inst.addItem[1].adjudication[2].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[1].adjudication[2].amount.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[1].adjudication[2].amount.value, 28.47)
        self.assertEqual(inst.addItem[1].adjudication[2].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.addItem[1].adjudication[2].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.addItem[1].itemSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.addItem[1].itemSequence[0].as_json(), 1)
        self.assertEqual(inst.addItem[1].net.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[1].net.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[1].net.value, 35.57)
        self.assertEqual(inst.addItem[1].productOrService.coding[0].code.value, FHIRCode("2141").value)
        self.assertEqual(inst.addItem[1].productOrService.coding[0].code.as_json(), "2141")
        self.assertEqual(inst.addItem[1].productOrService.coding[0].display.value, FHIRString("Radiograph, bytewing").value)
        self.assertEqual(inst.addItem[1].productOrService.coding[0].display.as_json(), "Radiograph, bytewing")
        self.assertEqual(inst.addItem[1].productOrService.coding[0].system.value, FHIRUri("http://example.org/fhir/oralservicecodes").value)
        self.assertEqual(inst.addItem[1].productOrService.coding[0].system.as_json(), "http://example.org/fhir/oralservicecodes")
        self.assertEqual(inst.addItem[2].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[2].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[2].adjudication[0].amount.value, 350.0)
        self.assertEqual(inst.addItem[2].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.addItem[2].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.addItem[2].adjudication[1].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.addItem[2].adjudication[1].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.addItem[2].adjudication[1].value, 80.0)
        self.assertEqual(inst.addItem[2].adjudication[2].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[2].adjudication[2].amount.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[2].adjudication[2].amount.value, 270.0)
        self.assertEqual(inst.addItem[2].adjudication[2].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.addItem[2].adjudication[2].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.addItem[2].detailSequence[0].value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.addItem[2].detailSequence[0].as_json(), 2)
        self.assertEqual(inst.addItem[2].itemSequence[0].value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.addItem[2].itemSequence[0].as_json(), 3)
        self.assertEqual(inst.addItem[2].modifier[0].coding[0].code.value, FHIRCode("x").value)
        self.assertEqual(inst.addItem[2].modifier[0].coding[0].code.as_json(), "x")
        self.assertEqual(inst.addItem[2].modifier[0].coding[0].display.value, FHIRString("None").value)
        self.assertEqual(inst.addItem[2].modifier[0].coding[0].display.as_json(), "None")
        self.assertEqual(inst.addItem[2].modifier[0].coding[0].system.value, FHIRUri("http://example.org/fhir/modifiers").value)
        self.assertEqual(inst.addItem[2].modifier[0].coding[0].system.as_json(), "http://example.org/fhir/modifiers")
        self.assertEqual(inst.addItem[2].net.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[2].net.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[2].net.value, 350.0)
        self.assertEqual(inst.addItem[2].noteNumber[0].value, FHIRPositiveInt('101').value)
        self.assertEqual(inst.addItem[2].noteNumber[0].as_json(), 101)
        self.assertEqual(inst.addItem[2].productOrService.coding[0].code.value, FHIRCode("expense").value)
        self.assertEqual(inst.addItem[2].productOrService.coding[0].code.as_json(), "expense")
        self.assertEqual(inst.addItem[2].productOrService.coding[0].system.value, FHIRUri("http://example.org/fhir/oralservicecodes").value)
        self.assertEqual(inst.addItem[2].productOrService.coding[0].system.as_json(), "http://example.org/fhir/oralservicecodes")
        self.assertEqual(inst.created.value, FHIRDateTime("2014-08-16").value)
        self.assertEqual(inst.created.as_json(), "2014-08-16")
        self.assertEqual(inst.disposition.value, FHIRString("Claim settled as per contract.").value)
        self.assertEqual(inst.disposition.as_json(), "Claim settled as per contract.")
        self.assertEqual(inst.id.value, FHIRString("R3503").value)
        self.assertEqual(inst.id.as_json(), "R3503")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.BenefitsInc.com/fhir/remittance").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.BenefitsInc.com/fhir/remittance")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("R3503").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "R3503")
        self.assertEqual(inst.item[0].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].adjudication[0].amount.value, 0.0)
        self.assertEqual(inst.item[0].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[0].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[0].adjudication[1].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].adjudication[1].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].adjudication[1].amount.value, 0.0)
        self.assertEqual(inst.item[0].adjudication[1].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[0].adjudication[1].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[0].itemSequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].itemSequence.as_json(), 1)
        self.assertEqual(inst.item[1].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[1].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[1].adjudication[0].amount.value, 105.0)
        self.assertEqual(inst.item[1].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[1].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[1].adjudication[1].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.item[1].adjudication[1].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.item[1].adjudication[1].value, 80.0)
        self.assertEqual(inst.item[1].adjudication[2].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[1].adjudication[2].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[1].adjudication[2].amount.value, 84.0)
        self.assertEqual(inst.item[1].adjudication[2].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[1].adjudication[2].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[1].itemSequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[1].itemSequence.as_json(), 2)
        self.assertEqual(inst.item[2].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[2].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[2].adjudication[0].amount.value, 750.0)
        self.assertEqual(inst.item[2].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[2].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[2].adjudication[1].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.item[2].adjudication[1].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.item[2].adjudication[1].value, 80.0)
        self.assertEqual(inst.item[2].adjudication[2].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[2].adjudication[2].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[2].adjudication[2].amount.value, 600.0)
        self.assertEqual(inst.item[2].adjudication[2].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[2].adjudication[2].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[2].detail[0].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[2].detail[0].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[2].detail[0].adjudication[0].amount.value, 750.0)
        self.assertEqual(inst.item[2].detail[0].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[2].detail[0].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[2].detail[0].adjudication[1].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.item[2].detail[0].adjudication[1].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.item[2].detail[0].adjudication[1].value, 80.0)
        self.assertEqual(inst.item[2].detail[0].adjudication[2].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[2].detail[0].adjudication[2].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[2].detail[0].adjudication[2].amount.value, 600.0)
        self.assertEqual(inst.item[2].detail[0].adjudication[2].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[2].detail[0].adjudication[2].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[2].detail[0].detailSequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[2].detail[0].detailSequence.as_json(), 1)
        self.assertEqual(inst.item[2].detail[1].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[2].detail[1].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[2].detail[1].adjudication[0].amount.value, 0.0)
        self.assertEqual(inst.item[2].detail[1].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[2].detail[1].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[2].detail[1].adjudication[1].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[2].detail[1].adjudication[1].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[2].detail[1].adjudication[1].amount.value, 0.0)
        self.assertEqual(inst.item[2].detail[1].adjudication[1].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[2].detail[1].adjudication[1].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[2].detail[1].detailSequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[2].detail[1].detailSequence.as_json(), 2)
        self.assertEqual(inst.item[2].itemSequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[2].itemSequence.as_json(), 3)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.outcome.value, FHIRCode("complete").value)
        self.assertEqual(inst.outcome.as_json(), "complete")
        self.assertEqual(inst.payeeType.coding[0].code.value, FHIRCode("provider").value)
        self.assertEqual(inst.payeeType.coding[0].code.as_json(), "provider")
        self.assertEqual(inst.payeeType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/payeetype").value)
        self.assertEqual(inst.payeeType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/payeetype")
        self.assertEqual(inst.payment.amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.payment.amount.currency.as_json(), "USD")
        self.assertEqual(inst.payment.amount.value, 100.47)
        self.assertEqual(inst.payment.date.value, FHIRDate("2014-08-31").value)
        self.assertEqual(inst.payment.date.as_json(), "2014-08-31")
        self.assertEqual(inst.payment.date.date, FHIRDate('2014-08-31').date)
        self.assertEqual(inst.payment.identifier.system.value, FHIRUri("http://www.BenefitsInc.com/fhir/paymentidentifier").value)
        self.assertEqual(inst.payment.identifier.system.as_json(), "http://www.BenefitsInc.com/fhir/paymentidentifier")
        self.assertEqual(inst.payment.identifier.value.value, FHIRString("201408-2-15507").value)
        self.assertEqual(inst.payment.identifier.value.as_json(), "201408-2-15507")
        self.assertEqual(inst.payment.type.coding[0].code.value, FHIRCode("complete").value)
        self.assertEqual(inst.payment.type.coding[0].code.as_json(), "complete")
        self.assertEqual(inst.payment.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-paymenttype").value)
        self.assertEqual(inst.payment.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-paymenttype")
        self.assertEqual(inst.processNote[0].language.coding[0].code.value, FHIRCode("en-CA").value)
        self.assertEqual(inst.processNote[0].language.coding[0].code.as_json(), "en-CA")
        self.assertEqual(inst.processNote[0].language.coding[0].system.value, FHIRUri("urn:ietf:bcp:47").value)
        self.assertEqual(inst.processNote[0].language.coding[0].system.as_json(), "urn:ietf:bcp:47")
        self.assertEqual(inst.processNote[0].number.value, FHIRPositiveInt('101').value)
        self.assertEqual(inst.processNote[0].number.as_json(), 101)
        self.assertEqual(inst.processNote[0].text.value, FHIRString("Package codes are not permitted. Codes replaced by Insurer.").value)
        self.assertEqual(inst.processNote[0].text.as_json(), "Package codes are not permitted. Codes replaced by Insurer.")
        self.assertEqual(inst.processNote[0].type.value, FHIRCode("print").value)
        self.assertEqual(inst.processNote[0].type.as_json(), "print")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the ClaimResponse to Claim Oral Average with additional items</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the ClaimResponse to Claim Oral Average with additional items</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.total[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.total[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.total[0].amount.value, 1340.57)
        self.assertEqual(inst.total[0].category.coding[0].code.value, FHIRCode("submitted").value)
        self.assertEqual(inst.total[0].category.coding[0].code.as_json(), "submitted")
        self.assertEqual(inst.total[1].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.total[1].amount.currency.as_json(), "USD")
        self.assertEqual(inst.total[1].amount.value, 1054.47)
        self.assertEqual(inst.total[1].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.total[1].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("oral").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "oral")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/claim-type").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/claim-type")
        self.assertEqual(inst.use.value, FHIRCode("claim").value)
        self.assertEqual(inst.use.as_json(), "claim")

    def testClaimResponse3(self):
        inst = self.instantiate_from('claimresponse-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ClaimResponse instance')
        self.implClaimResponse3(inst)

        js = inst.as_json()
        self.assertEqual("ClaimResponse", js["resourceType"])
        inst2 = claimresponse.ClaimResponse(js)
        self.implClaimResponse3(inst2)

    def implClaimResponse3(self, inst):
        self.assertEqual(inst.created.value, FHIRDateTime("2014-08-16").value)
        self.assertEqual(inst.created.as_json(), "2014-08-16")
        self.assertEqual(inst.disposition.value, FHIRString("Claim settled as per contract.").value)
        self.assertEqual(inst.disposition.as_json(), "Claim settled as per contract.")
        self.assertEqual(inst.id.value, FHIRString("R3500").value)
        self.assertEqual(inst.id.as_json(), "R3500")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.BenefitsInc.com/fhir/remittance").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.BenefitsInc.com/fhir/remittance")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("R3500").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "R3500")
        self.assertEqual(inst.item[0].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].adjudication[0].amount.value, 135.57)
        self.assertEqual(inst.item[0].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[0].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[0].adjudication[1].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].adjudication[1].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].adjudication[1].amount.value, 10.0)
        self.assertEqual(inst.item[0].adjudication[1].category.coding[0].code.value, FHIRCode("copay").value)
        self.assertEqual(inst.item[0].adjudication[1].category.coding[0].code.as_json(), "copay")
        self.assertEqual(inst.item[0].adjudication[2].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.item[0].adjudication[2].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.item[0].adjudication[2].value, 80.0)
        self.assertEqual(inst.item[0].adjudication[3].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].adjudication[3].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].adjudication[3].amount.value, 90.47)
        self.assertEqual(inst.item[0].adjudication[3].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[0].adjudication[3].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[0].adjudication[3].reason.coding[0].code.value, FHIRCode("ar002").value)
        self.assertEqual(inst.item[0].adjudication[3].reason.coding[0].code.as_json(), "ar002")
        self.assertEqual(inst.item[0].adjudication[3].reason.coding[0].display.value, FHIRString("Plan Limit Reached").value)
        self.assertEqual(inst.item[0].adjudication[3].reason.coding[0].display.as_json(), "Plan Limit Reached")
        self.assertEqual(inst.item[0].adjudication[3].reason.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/adjudication-reason").value)
        self.assertEqual(inst.item[0].adjudication[3].reason.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/adjudication-reason")
        self.assertEqual(inst.item[0].itemSequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].itemSequence.as_json(), 1)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.outcome.value, FHIRCode("complete").value)
        self.assertEqual(inst.outcome.as_json(), "complete")
        self.assertEqual(inst.payeeType.coding[0].code.value, FHIRCode("provider").value)
        self.assertEqual(inst.payeeType.coding[0].code.as_json(), "provider")
        self.assertEqual(inst.payeeType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/payeetype").value)
        self.assertEqual(inst.payeeType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/payeetype")
        self.assertEqual(inst.payment.amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.payment.amount.currency.as_json(), "USD")
        self.assertEqual(inst.payment.amount.value, 100.47)
        self.assertEqual(inst.payment.date.value, FHIRDate("2014-08-31").value)
        self.assertEqual(inst.payment.date.as_json(), "2014-08-31")
        self.assertEqual(inst.payment.date.date, FHIRDate('2014-08-31').date)
        self.assertEqual(inst.payment.identifier.system.value, FHIRUri("http://www.BenefitsInc.com/fhir/paymentidentifier").value)
        self.assertEqual(inst.payment.identifier.system.as_json(), "http://www.BenefitsInc.com/fhir/paymentidentifier")
        self.assertEqual(inst.payment.identifier.value.value, FHIRString("201408-2-1569478").value)
        self.assertEqual(inst.payment.identifier.value.as_json(), "201408-2-1569478")
        self.assertEqual(inst.payment.type.coding[0].code.value, FHIRCode("complete").value)
        self.assertEqual(inst.payment.type.coding[0].code.as_json(), "complete")
        self.assertEqual(inst.payment.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-paymenttype").value)
        self.assertEqual(inst.payment.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-paymenttype")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.subType.coding[0].code.value, FHIRCode("emergency").value)
        self.assertEqual(inst.subType.coding[0].code.as_json(), "emergency")
        self.assertEqual(inst.subType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-claimsubtype").value)
        self.assertEqual(inst.subType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-claimsubtype")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the ClaimResponse</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the ClaimResponse</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.total[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.total[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.total[0].amount.value, 135.57)
        self.assertEqual(inst.total[0].category.coding[0].code.value, FHIRCode("submitted").value)
        self.assertEqual(inst.total[0].category.coding[0].code.as_json(), "submitted")
        self.assertEqual(inst.total[1].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.total[1].amount.currency.as_json(), "USD")
        self.assertEqual(inst.total[1].amount.value, 90.47)
        self.assertEqual(inst.total[1].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.total[1].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("oral").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "oral")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/claim-type").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/claim-type")
        self.assertEqual(inst.use.value, FHIRCode("claim").value)
        self.assertEqual(inst.use.as_json(), "claim")

    def testClaimResponse4(self):
        inst = self.instantiate_from('claimresponse-example-unsolicited-preauth.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ClaimResponse instance')
        self.implClaimResponse4(inst)

        js = inst.as_json()
        self.assertEqual("ClaimResponse", js["resourceType"])
        inst2 = claimresponse.ClaimResponse(js)
        self.implClaimResponse4(inst2)

    def implClaimResponse4(self, inst):
        self.assertEqual(inst.addItem[0].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[0].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[0].adjudication[0].amount.value, 250.0)
        self.assertEqual(inst.addItem[0].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.addItem[0].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.addItem[0].adjudication[1].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[0].adjudication[1].amount.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[0].adjudication[1].amount.value, 10.0)
        self.assertEqual(inst.addItem[0].adjudication[1].category.coding[0].code.value, FHIRCode("copay").value)
        self.assertEqual(inst.addItem[0].adjudication[1].category.coding[0].code.as_json(), "copay")
        self.assertEqual(inst.addItem[0].adjudication[2].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.addItem[0].adjudication[2].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.addItem[0].adjudication[2].value, 100.0)
        self.assertEqual(inst.addItem[0].adjudication[3].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[0].adjudication[3].amount.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[0].adjudication[3].amount.value, 240.0)
        self.assertEqual(inst.addItem[0].adjudication[3].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.addItem[0].adjudication[3].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.addItem[0].itemSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.addItem[0].itemSequence[0].as_json(), 1)
        self.assertEqual(inst.addItem[0].modifier[0].coding[0].code.value, FHIRCode("x").value)
        self.assertEqual(inst.addItem[0].modifier[0].coding[0].code.as_json(), "x")
        self.assertEqual(inst.addItem[0].modifier[0].coding[0].display.value, FHIRString("None").value)
        self.assertEqual(inst.addItem[0].modifier[0].coding[0].display.as_json(), "None")
        self.assertEqual(inst.addItem[0].modifier[0].coding[0].system.value, FHIRUri("http://example.org/fhir/modifiers").value)
        self.assertEqual(inst.addItem[0].modifier[0].coding[0].system.as_json(), "http://example.org/fhir/modifiers")
        self.assertEqual(inst.addItem[0].net.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[0].net.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[0].net.value, 250.0)
        self.assertEqual(inst.addItem[0].noteNumber[0].value, FHIRPositiveInt('101').value)
        self.assertEqual(inst.addItem[0].noteNumber[0].as_json(), 101)
        self.assertEqual(inst.addItem[0].productOrService.coding[0].code.value, FHIRCode("1101").value)
        self.assertEqual(inst.addItem[0].productOrService.coding[0].code.as_json(), "1101")
        self.assertEqual(inst.addItem[0].productOrService.coding[0].system.value, FHIRUri("http://example.org/fhir/oralservicecodes").value)
        self.assertEqual(inst.addItem[0].productOrService.coding[0].system.as_json(), "http://example.org/fhir/oralservicecodes")
        self.assertEqual(inst.addItem[1].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[1].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[1].adjudication[0].amount.value, 800.0)
        self.assertEqual(inst.addItem[1].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.addItem[1].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.addItem[1].adjudication[1].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.addItem[1].adjudication[1].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.addItem[1].adjudication[1].value, 100.0)
        self.assertEqual(inst.addItem[1].adjudication[2].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[1].adjudication[2].amount.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[1].adjudication[2].amount.value, 800.0)
        self.assertEqual(inst.addItem[1].adjudication[2].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.addItem[1].adjudication[2].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.addItem[1].itemSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.addItem[1].itemSequence[0].as_json(), 1)
        self.assertEqual(inst.addItem[1].net.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.addItem[1].net.currency.as_json(), "USD")
        self.assertEqual(inst.addItem[1].net.value, 800.0)
        self.assertEqual(inst.addItem[1].productOrService.coding[0].code.value, FHIRCode("2101").value)
        self.assertEqual(inst.addItem[1].productOrService.coding[0].code.as_json(), "2101")
        self.assertEqual(inst.addItem[1].productOrService.coding[0].display.value, FHIRString("Radiograph, series (12)").value)
        self.assertEqual(inst.addItem[1].productOrService.coding[0].display.as_json(), "Radiograph, series (12)")
        self.assertEqual(inst.addItem[1].productOrService.coding[0].system.value, FHIRUri("http://example.org/fhir/oralservicecodes").value)
        self.assertEqual(inst.addItem[1].productOrService.coding[0].system.as_json(), "http://example.org/fhir/oralservicecodes")
        self.assertEqual(inst.created.value, FHIRDateTime("2014-08-16").value)
        self.assertEqual(inst.created.as_json(), "2014-08-16")
        self.assertEqual(inst.disposition.value, FHIRString("The enclosed services are authorized for your provision within 30 days of this notice.").value)
        self.assertEqual(inst.disposition.as_json(), "The enclosed services are authorized for your provision within 30 days of this notice.")
        self.assertEqual(inst.id.value, FHIRString("UR3503").value)
        self.assertEqual(inst.id.as_json(), "UR3503")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.SocialBenefitsInc.com/fhir/ClaimResponse").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.SocialBenefitsInc.com/fhir/ClaimResponse")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("UR3503").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "UR3503")
        self.assertTrue(inst.insurance[0].focal)
        self.assertEqual(inst.insurance[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.insurance[0].sequence.as_json(), 1)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.outcome.value, FHIRCode("complete").value)
        self.assertEqual(inst.outcome.as_json(), "complete")
        self.assertEqual(inst.payeeType.coding[0].code.value, FHIRCode("provider").value)
        self.assertEqual(inst.payeeType.coding[0].code.as_json(), "provider")
        self.assertEqual(inst.payeeType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/payeetype").value)
        self.assertEqual(inst.payeeType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/payeetype")
        self.assertEqual(inst.preAuthRef.value, FHIRString("18SS12345").value)
        self.assertEqual(inst.preAuthRef.as_json(), "18SS12345")
        self.assertEqual(inst.processNote[0].language.coding[0].code.value, FHIRCode("en-CA").value)
        self.assertEqual(inst.processNote[0].language.coding[0].code.as_json(), "en-CA")
        self.assertEqual(inst.processNote[0].language.coding[0].system.value, FHIRUri("urn:ietf:bcp:47").value)
        self.assertEqual(inst.processNote[0].language.coding[0].system.as_json(), "urn:ietf:bcp:47")
        self.assertEqual(inst.processNote[0].number.value, FHIRPositiveInt('101').value)
        self.assertEqual(inst.processNote[0].number.as_json(), 101)
        self.assertEqual(inst.processNote[0].text.value, FHIRString("Please submit a Pre-Authorization request if a more extensive examination or urgent services are required.").value)
        self.assertEqual(inst.processNote[0].text.as_json(), "Please submit a Pre-Authorization request if a more extensive examination or urgent services are required.")
        self.assertEqual(inst.processNote[0].type.value, FHIRCode("print").value)
        self.assertEqual(inst.processNote[0].type.as_json(), "print")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">A sample unsolicited pre-authorization response which authorizes basic dental services to be performed for a patient.</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">A sample unsolicited pre-authorization response which authorizes basic dental services to be performed for a patient.</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.total[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.total[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.total[0].amount.value, 1050.0)
        self.assertEqual(inst.total[0].category.coding[0].code.value, FHIRCode("submitted").value)
        self.assertEqual(inst.total[0].category.coding[0].code.as_json(), "submitted")
        self.assertEqual(inst.total[1].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.total[1].amount.currency.as_json(), "USD")
        self.assertEqual(inst.total[1].amount.value, 1040.0)
        self.assertEqual(inst.total[1].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.total[1].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("oral").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "oral")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/claim-type").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/claim-type")
        self.assertEqual(inst.use.value, FHIRCode("preauthorization").value)
        self.assertEqual(inst.use.as_json(), "preauthorization")

    def testClaimResponse5(self):
        inst = self.instantiate_from('claimresponse-example-2.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ClaimResponse instance')
        self.implClaimResponse5(inst)

        js = inst.as_json()
        self.assertEqual("ClaimResponse", js["resourceType"])
        inst2 = claimresponse.ClaimResponse(js)
        self.implClaimResponse5(inst2)

    def implClaimResponse5(self, inst):
        self.assertEqual(inst.created.value, FHIRDateTime("2014-08-16").value)
        self.assertEqual(inst.created.as_json(), "2014-08-16")
        self.assertEqual(inst.disposition.value, FHIRString("Claim could not be processed").value)
        self.assertEqual(inst.disposition.as_json(), "Claim could not be processed")
        self.assertEqual(inst.error[0].code.coding[0].code.value, FHIRCode("a002").value)
        self.assertEqual(inst.error[0].code.coding[0].code.as_json(), "a002")
        self.assertEqual(inst.error[0].code.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/adjudication-error").value)
        self.assertEqual(inst.error[0].code.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/adjudication-error")
        self.assertEqual(inst.error[0].detailSequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.error[0].detailSequence.as_json(), 2)
        self.assertEqual(inst.error[0].itemSequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.error[0].itemSequence.as_json(), 3)
        self.assertEqual(inst.formCode.coding[0].code.value, FHIRCode("2").value)
        self.assertEqual(inst.formCode.coding[0].code.as_json(), "2")
        self.assertEqual(inst.formCode.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/forms-codes").value)
        self.assertEqual(inst.formCode.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/forms-codes")
        self.assertEqual(inst.id.value, FHIRString("R3501").value)
        self.assertEqual(inst.id.as_json(), "R3501")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.BenefitsInc.com/fhir/remittance").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.BenefitsInc.com/fhir/remittance")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("R3501").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "R3501")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.outcome.value, FHIRCode("error").value)
        self.assertEqual(inst.outcome.as_json(), "error")
        self.assertEqual(inst.processNote[0].language.coding[0].code.value, FHIRCode("en-CA").value)
        self.assertEqual(inst.processNote[0].language.coding[0].code.as_json(), "en-CA")
        self.assertEqual(inst.processNote[0].language.coding[0].system.value, FHIRUri("urn:ietf:bcp:47").value)
        self.assertEqual(inst.processNote[0].language.coding[0].system.as_json(), "urn:ietf:bcp:47")
        self.assertEqual(inst.processNote[0].number.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.processNote[0].number.as_json(), 1)
        self.assertEqual(inst.processNote[0].text.value, FHIRString("Invalid claim").value)
        self.assertEqual(inst.processNote[0].text.as_json(), "Invalid claim")
        self.assertEqual(inst.processNote[0].type.value, FHIRCode("display").value)
        self.assertEqual(inst.processNote[0].type.as_json(), "display")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the ClaimResponse that demonstrates returning errors</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the ClaimResponse that demonstrates returning errors</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("oral").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "oral")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/claim-type").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/claim-type")
        self.assertEqual(inst.use.value, FHIRCode("claim").value)
        self.assertEqual(inst.use.as_json(), "claim")


from fhirclient.models.fhirdatatypes import FHIRDateTime, FHIRString, FHIRUri, FHIRCode, FHIRPositiveInt, FHIRDate