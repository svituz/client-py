#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import location

class LocationTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Location", js["resourceType"])
        return location.Location(js)

    def testLocation1(self):
        inst = self.instantiate_from('location-example-ambulance.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Location instance')
        self.implLocation1(inst)

        js = inst.as_json()
        self.assertEqual("Location", js["resourceType"])
        inst2 = location.Location(js)
        self.implLocation1(inst2)

    def implLocation1(self, inst):
        self.assertEqual(inst.description.value, FHIRString("Ambulance provided by Burgers University Medical Center").value)
        self.assertEqual(inst.description.as_json(), "Ambulance provided by Burgers University Medical Center")
        self.assertEqual(inst.id.value, FHIRString("amb").value)
        self.assertEqual(inst.id.as_json(), "amb")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.mode.value, FHIRCode("kind").value)
        self.assertEqual(inst.mode.as_json(), "kind")
        self.assertEqual(inst.name.value, FHIRString("BUMC Ambulance").value)
        self.assertEqual(inst.name.as_json(), "BUMC Ambulance")
        self.assertEqual(inst.physicalType.coding[0].code.value, FHIRCode("ve").value)
        self.assertEqual(inst.physicalType.coding[0].code.as_json(), "ve")
        self.assertEqual(inst.physicalType.coding[0].display.value, FHIRString("Vehicle").value)
        self.assertEqual(inst.physicalType.coding[0].display.as_json(), "Vehicle")
        self.assertEqual(inst.physicalType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/location-physical-type").value)
        self.assertEqual(inst.physicalType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/location-physical-type")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("mobile").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "mobile")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("2329").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "2329")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Mobile Clinic</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Mobile Clinic</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode("AMB").value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), "AMB")
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString("Ambulance").value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), "Ambulance")
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-RoleCode").value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-RoleCode")

    def testLocation2(self):
        inst = self.instantiate_from('location-example-room.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Location instance')
        self.implLocation2(inst)

        js = inst.as_json()
        self.assertEqual("Location", js["resourceType"])
        inst2 = location.Location(js)
        self.implLocation2(inst2)

    def implLocation2(self, inst):
        self.assertEqual(inst.alias[0].value, FHIRString("South Wing OR 5").value)
        self.assertEqual(inst.alias[0].as_json(), "South Wing OR 5")
        self.assertEqual(inst.alias[1].value, FHIRString("Main Wing OR 2").value)
        self.assertEqual(inst.alias[1].as_json(), "Main Wing OR 2")
        self.assertEqual(inst.description.value, FHIRString("Old South Wing, Neuro Radiology Operation Room 1 on second floor").value)
        self.assertEqual(inst.description.as_json(), "Old South Wing, Neuro Radiology Operation Room 1 on second floor")
        self.assertEqual(inst.id.value, FHIRString("2").value)
        self.assertEqual(inst.id.as_json(), "2")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("B1-S.F2.1.00").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "B1-S.F2.1.00")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.mode.value, FHIRCode("instance").value)
        self.assertEqual(inst.mode.as_json(), "instance")
        self.assertEqual(inst.name.value, FHIRString("South Wing Neuro OR 1").value)
        self.assertEqual(inst.name.as_json(), "South Wing Neuro OR 1")
        self.assertEqual(inst.operationalStatus.code.value, FHIRCode("H").value)
        self.assertEqual(inst.operationalStatus.code.as_json(), "H")
        self.assertEqual(inst.operationalStatus.display.value, FHIRString("Housekeeping").value)
        self.assertEqual(inst.operationalStatus.display.as_json(), "Housekeeping")
        self.assertEqual(inst.operationalStatus.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0116").value)
        self.assertEqual(inst.operationalStatus.system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0116")
        self.assertEqual(inst.physicalType.coding[0].code.value, FHIRCode("ro").value)
        self.assertEqual(inst.physicalType.coding[0].code.as_json(), "ro")
        self.assertEqual(inst.physicalType.coding[0].display.value, FHIRString("Room").value)
        self.assertEqual(inst.physicalType.coding[0].display.as_json(), "Room")
        self.assertEqual(inst.physicalType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/location-physical-type").value)
        self.assertEqual(inst.physicalType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/location-physical-type")
        self.assertEqual(inst.status.value, FHIRCode("suspended").value)
        self.assertEqual(inst.status.as_json(), "suspended")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("2329").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "2329")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Burgers UMC, South Wing, second floor, Neuro Radiology Operation Room 1</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Burgers UMC, South Wing, second floor, Neuro Radiology Operation Room 1</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode("RNEU").value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), "RNEU")
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString("Neuroradiology unit").value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), "Neuroradiology unit")
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-RoleCode").value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-RoleCode")

    def testLocation3(self):
        inst = self.instantiate_from('location-example-ukpharmacy.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Location instance')
        self.implLocation3(inst)

        js = inst.as_json()
        self.assertEqual("Location", js["resourceType"])
        inst2 = location.Location(js)
        self.implLocation3(inst2)

    def implLocation3(self, inst):
        self.assertEqual(inst.description.value, FHIRString("All Pharmacies in the United Kingdom covered by the National Pharmacy Association").value)
        self.assertEqual(inst.description.as_json(), "All Pharmacies in the United Kingdom covered by the National Pharmacy Association")
        self.assertEqual(inst.id.value, FHIRString("ukp").value)
        self.assertEqual(inst.id.as_json(), "ukp")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.mode.value, FHIRCode("kind").value)
        self.assertEqual(inst.mode.as_json(), "kind")
        self.assertEqual(inst.name.value, FHIRString("UK Pharmacies").value)
        self.assertEqual(inst.name.as_json(), "UK Pharmacies")
        self.assertEqual(inst.physicalType.coding[0].code.value, FHIRCode("jdn").value)
        self.assertEqual(inst.physicalType.coding[0].code.as_json(), "jdn")
        self.assertEqual(inst.physicalType.coding[0].display.value, FHIRString("Jurisdiction").value)
        self.assertEqual(inst.physicalType.coding[0].display.as_json(), "Jurisdiction")
        self.assertEqual(inst.physicalType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/location-physical-type").value)
        self.assertEqual(inst.physicalType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/location-physical-type")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">UK Pharmacies</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">UK Pharmacies</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode("PHARM").value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), "PHARM")
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString("Pharmacy").value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), "Pharmacy")
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-RoleCode").value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-RoleCode")

    def testLocation4(self):
        inst = self.instantiate_from('location-example-patients-home.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Location instance')
        self.implLocation4(inst)

        js = inst.as_json()
        self.assertEqual("Location", js["resourceType"])
        inst2 = location.Location(js)
        self.implLocation4(inst2)

    def implLocation4(self, inst):
        self.assertEqual(inst.description.value, FHIRString("Patient's Home").value)
        self.assertEqual(inst.description.as_json(), "Patient's Home")
        self.assertEqual(inst.id.value, FHIRString("ph").value)
        self.assertEqual(inst.id.as_json(), "ph")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.mode.value, FHIRCode("kind").value)
        self.assertEqual(inst.mode.as_json(), "kind")
        self.assertEqual(inst.name.value, FHIRString("Patient's Home").value)
        self.assertEqual(inst.name.as_json(), "Patient's Home")
        self.assertEqual(inst.physicalType.coding[0].code.value, FHIRCode("ho").value)
        self.assertEqual(inst.physicalType.coding[0].code.as_json(), "ho")
        self.assertEqual(inst.physicalType.coding[0].display.value, FHIRString("House").value)
        self.assertEqual(inst.physicalType.coding[0].display.as_json(), "House")
        self.assertEqual(inst.physicalType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/location-physical-type").value)
        self.assertEqual(inst.physicalType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/location-physical-type")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Patient's Home</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Patient's Home</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode("PTRES").value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), "PTRES")
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString("Patient's Residence").value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), "Patient's Residence")
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-RoleCode").value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-RoleCode")

    def testLocation5(self):
        inst = self.instantiate_from('location-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Location instance')
        self.implLocation5(inst)

        js = inst.as_json()
        self.assertEqual("Location", js["resourceType"])
        inst2 = location.Location(js)
        self.implLocation5(inst2)

    def implLocation5(self, inst):
        self.assertEqual(inst.address.city.value, FHIRString("Den Burg").value)
        self.assertEqual(inst.address.city.as_json(), "Den Burg")
        self.assertEqual(inst.address.country.value, FHIRString("NLD").value)
        self.assertEqual(inst.address.country.as_json(), "NLD")
        self.assertEqual(inst.address.line[0].value, FHIRString("Galapagosweg 91, Building A").value)
        self.assertEqual(inst.address.line[0].as_json(), "Galapagosweg 91, Building A")
        self.assertEqual(inst.address.postalCode.value, FHIRString("9105 PZ").value)
        self.assertEqual(inst.address.postalCode.as_json(), "9105 PZ")
        self.assertEqual(inst.address.use.value, FHIRCode("work").value)
        self.assertEqual(inst.address.use.as_json(), "work")
        self.assertEqual(inst.alias[0].value, FHIRString("BU MC, SW, F2").value)
        self.assertEqual(inst.alias[0].as_json(), "BU MC, SW, F2")
        self.assertEqual(inst.alias[1].value, FHIRString("Burgers University Medical Center, South Wing, second floor").value)
        self.assertEqual(inst.alias[1].as_json(), "Burgers University Medical Center, South Wing, second floor")
        self.assertEqual(inst.description.value, FHIRString("Second floor of the Old South Wing, formerly in use by Psychiatry").value)
        self.assertEqual(inst.description.as_json(), "Second floor of the Old South Wing, formerly in use by Psychiatry")
        self.assertEqual(inst.id.value, FHIRString("1").value)
        self.assertEqual(inst.id.as_json(), "1")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("B1-S.F2").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "B1-S.F2")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.mode.value, FHIRCode("instance").value)
        self.assertEqual(inst.mode.as_json(), "instance")
        self.assertEqual(inst.name.value, FHIRString("South Wing, second floor").value)
        self.assertEqual(inst.name.as_json(), "South Wing, second floor")
        self.assertEqual(inst.physicalType.coding[0].code.value, FHIRCode("wi").value)
        self.assertEqual(inst.physicalType.coding[0].code.as_json(), "wi")
        self.assertEqual(inst.physicalType.coding[0].display.value, FHIRString("Wing").value)
        self.assertEqual(inst.physicalType.coding[0].display.as_json(), "Wing")
        self.assertEqual(inst.physicalType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/location-physical-type").value)
        self.assertEqual(inst.physicalType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/location-physical-type")
        self.assertEqual(inst.position.altitude, 0)
        self.assertEqual(inst.position.latitude, 42.25475478)
        self.assertEqual(inst.position.longitude, -83.6945691)
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "work")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("2328").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "2328")
        self.assertEqual(inst.telecom[1].system.value, FHIRCode("fax").value)
        self.assertEqual(inst.telecom[1].system.as_json(), "fax")
        self.assertEqual(inst.telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[1].use.as_json(), "work")
        self.assertEqual(inst.telecom[1].value.value, FHIRString("2329").value)
        self.assertEqual(inst.telecom[1].value.as_json(), "2329")
        self.assertEqual(inst.telecom[2].system.value, FHIRCode("email").value)
        self.assertEqual(inst.telecom[2].system.as_json(), "email")
        self.assertEqual(inst.telecom[2].value.value, FHIRString("second wing admissions").value)
        self.assertEqual(inst.telecom[2].value.as_json(), "second wing admissions")
        self.assertEqual(inst.telecom[3].system.value, FHIRCode("url").value)
        self.assertEqual(inst.telecom[3].system.as_json(), "url")
        self.assertEqual(inst.telecom[3].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[3].use.as_json(), "work")
        self.assertEqual(inst.telecom[3].value.value, FHIRString("http://sampleorg.com/southwing").value)
        self.assertEqual(inst.telecom[3].value.as_json(), "http://sampleorg.com/southwing")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Burgers UMC, South Wing, second floor</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Burgers UMC, South Wing, second floor</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testLocation6(self):
        inst = self.instantiate_from('location-example-hl7hq.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Location instance')
        self.implLocation6(inst)

        js = inst.as_json()
        self.assertEqual("Location", js["resourceType"])
        inst2 = location.Location(js)
        self.implLocation6(inst2)

    def implLocation6(self, inst):
        self.assertEqual(inst.address.city.value, FHIRString("Ann Arbor").value)
        self.assertEqual(inst.address.city.as_json(), "Ann Arbor")
        self.assertEqual(inst.address.country.value, FHIRString("USA").value)
        self.assertEqual(inst.address.country.as_json(), "USA")
        self.assertEqual(inst.address.line[0].value, FHIRString("3300 Washtenaw Avenue, Suite 227").value)
        self.assertEqual(inst.address.line[0].as_json(), "3300 Washtenaw Avenue, Suite 227")
        self.assertEqual(inst.address.postalCode.value, FHIRString("48104").value)
        self.assertEqual(inst.address.postalCode.as_json(), "48104")
        self.assertEqual(inst.address.state.value, FHIRString("MI").value)
        self.assertEqual(inst.address.state.as_json(), "MI")
        self.assertEqual(inst.description.value, FHIRString("HL7 Headquarters").value)
        self.assertEqual(inst.description.as_json(), "HL7 Headquarters")
        self.assertEqual(inst.id.value, FHIRString("hl7").value)
        self.assertEqual(inst.id.as_json(), "hl7")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.mode.value, FHIRCode("instance").value)
        self.assertEqual(inst.mode.as_json(), "instance")
        self.assertEqual(inst.name.value, FHIRString("Health Level Seven International").value)
        self.assertEqual(inst.name.as_json(), "Health Level Seven International")
        self.assertEqual(inst.physicalType.coding[0].code.value, FHIRCode("bu").value)
        self.assertEqual(inst.physicalType.coding[0].code.as_json(), "bu")
        self.assertEqual(inst.physicalType.coding[0].display.value, FHIRString("Building").value)
        self.assertEqual(inst.physicalType.coding[0].display.as_json(), "Building")
        self.assertEqual(inst.physicalType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/location-physical-type").value)
        self.assertEqual(inst.physicalType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/location-physical-type")
        self.assertEqual(inst.position.latitude, -83.69471)
        self.assertEqual(inst.position.longitude, 42.2565)
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("(+1) 734-677-7777").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "(+1) 734-677-7777")
        self.assertEqual(inst.telecom[1].system.value, FHIRCode("fax").value)
        self.assertEqual(inst.telecom[1].system.as_json(), "fax")
        self.assertEqual(inst.telecom[1].value.value, FHIRString("(+1) 734-677-6622").value)
        self.assertEqual(inst.telecom[1].value.as_json(), "(+1) 734-677-6622")
        self.assertEqual(inst.telecom[2].system.value, FHIRCode("email").value)
        self.assertEqual(inst.telecom[2].system.as_json(), "email")
        self.assertEqual(inst.telecom[2].value.value, FHIRString("hq@HL7.org").value)
        self.assertEqual(inst.telecom[2].value.as_json(), "hq@HL7.org")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode("SLEEP").value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), "SLEEP")
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString("Sleep disorders unit").value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), "Sleep disorders unit")
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-RoleCode").value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-RoleCode")


from fhirclient.models.fhirdatatypes import FHIRString, FHIRCode, FHIRUri