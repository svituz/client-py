#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-25.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import claim

class ClaimTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Claim", js["resourceType"])
        return claim.Claim(js)

    def testClaim1(self):
        inst = self.instantiate_from('claim-example-oral-contained-identifier.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Claim instance')
        self.implClaim1(inst)

        js = inst.as_json()
        self.assertEqual("Claim", js["resourceType"])
        inst2 = claim.Claim(js)
        self.implClaim1(inst2)

    def implClaim1(self, inst):
        self.assertEqual(inst.careTeam[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.careTeam[0].sequence.as_json(), 1)
        self.assertEqual(inst.created.value, FHIRDateTime('2014-08-16').value)
        self.assertEqual(inst.created.as_json(), '2014-08-16')
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.value, FHIRCode('123456').value)
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.as_json(), '123456')
        self.assertEqual(inst.diagnosis[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.diagnosis[0].sequence.as_json(), 1)
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://happyvalley.com/claim').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://happyvalley.com/claim')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('12347').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '12347')
        self.assertTrue(inst.insurance[0].focal)
        self.assertEqual(inst.insurance[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.insurance[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].net.value, 135.57)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.value, FHIRCode('1200').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.as_json(), '1200')
        self.assertEqual(inst.item[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[0].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[0].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.item[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].unitPrice.value, 135.57)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.payee.type.coding[0].code.value, FHIRCode('provider').value)
        self.assertEqual(inst.payee.type.coding[0].code.as_json(), 'provider')
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode('normal').value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), 'normal')
        self.assertEqual(inst.status.value, FHIRCode('active').value)
        self.assertEqual(inst.status.as_json(), 'active')
        self.assertEqual(inst.text.div.value, FHIRString('<div xmlns="http://www.w3.org/1999/xhtml">This example assumes a national health care scheme where patients, providers and organizations have known business identifiers.</div>').value)
        self.assertEqual(inst.text.div.as_json(), '<div xmlns="http://www.w3.org/1999/xhtml">This example assumes a national health care scheme where patients, providers and organizations have known business identifiers.</div>')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode('oral').value)
        self.assertEqual(inst.type.coding[0].code.as_json(), 'oral')
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/claim-type').value)
        self.assertEqual(inst.type.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/claim-type')
        self.assertEqual(inst.use.value, FHIRCode('claim').value)
        self.assertEqual(inst.use.as_json(), 'claim')

    def testClaim2(self):
        inst = self.instantiate_from('claim-example-oral-contained.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Claim instance')
        self.implClaim2(inst)

        js = inst.as_json()
        self.assertEqual("Claim", js["resourceType"])
        inst2 = claim.Claim(js)
        self.implClaim2(inst2)

    def implClaim2(self, inst):
        self.assertEqual(inst.careTeam[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.careTeam[0].sequence.as_json(), 1)
        self.assertEqual(inst.created.value, FHIRDateTime('2014-08-16').value)
        self.assertEqual(inst.created.as_json(), '2014-08-16')
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.value, FHIRCode('123456').value)
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.as_json(), '123456')
        self.assertEqual(inst.diagnosis[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.diagnosis[0].sequence.as_json(), 1)
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://happyvalley.com/claim').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://happyvalley.com/claim')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('12347').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '12347')
        self.assertTrue(inst.insurance[0].focal)
        self.assertEqual(inst.insurance[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.insurance[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].net.value, 135.57)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.value, FHIRCode('1200').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.as_json(), '1200')
        self.assertEqual(inst.item[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[0].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[0].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.item[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].unitPrice.value, 135.57)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.payee.type.coding[0].code.value, FHIRCode('provider').value)
        self.assertEqual(inst.payee.type.coding[0].code.as_json(), 'provider')
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode('normal').value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), 'normal')
        self.assertEqual(inst.status.value, FHIRCode('active').value)
        self.assertEqual(inst.status.as_json(), 'active')
        self.assertEqual(inst.text.div.value, FHIRString('<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Oral Health Claim</div>').value)
        self.assertEqual(inst.text.div.as_json(), '<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Oral Health Claim</div>')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode('oral').value)
        self.assertEqual(inst.type.coding[0].code.as_json(), 'oral')
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/claim-type').value)
        self.assertEqual(inst.type.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/claim-type')
        self.assertEqual(inst.use.value, FHIRCode('claim').value)
        self.assertEqual(inst.use.as_json(), 'claim')

    def testClaim3(self):
        inst = self.instantiate_from('claim-example-vision-glasses-3tier.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Claim instance')
        self.implClaim3(inst)

        js = inst.as_json()
        self.assertEqual("Claim", js["resourceType"])
        inst2 = claim.Claim(js)
        self.implClaim3(inst2)

    def implClaim3(self, inst):
        self.assertEqual(inst.careTeam[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.careTeam[0].sequence.as_json(), 1)
        self.assertEqual(inst.created.value, FHIRDateTime('2014-08-16').value)
        self.assertEqual(inst.created.as_json(), '2014-08-16')
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.value, FHIRCode('654321').value)
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.as_json(), '654321')
        self.assertEqual(inst.diagnosis[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.diagnosis[0].sequence.as_json(), 1)
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://happysight.com/claim').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://happysight.com/claim')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('6612347').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '6612347')
        self.assertFalse(inst.insurance[0].focal)
        self.assertEqual(inst.insurance[0].preAuthRef[0].value, FHIRString('PR7652387237').value)
        self.assertEqual(inst.insurance[0].preAuthRef[0].as_json(), 'PR7652387237')
        self.assertEqual(inst.insurance[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.insurance[0].sequence.as_json(), 1)
        self.assertTrue(inst.insurance[1].focal)
        self.assertEqual(inst.insurance[1].preAuthRef[0].value, FHIRString('AB543GTD7567').value)
        self.assertEqual(inst.insurance[1].preAuthRef[0].as_json(), 'AB543GTD7567')
        self.assertEqual(inst.insurance[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.insurance[1].sequence.as_json(), 2)
        self.assertEqual(inst.item[0].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].category.coding[0].code.value, FHIRCode('F6').value)
        self.assertEqual(inst.item[0].category.coding[0].code.as_json(), 'F6')
        self.assertEqual(inst.item[0].category.coding[0].display.value, FHIRString('Vision Coverage').value)
        self.assertEqual(inst.item[0].category.coding[0].display.as_json(), 'Vision Coverage')
        self.assertEqual(inst.item[0].category.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/benefit-subcategory').value)
        self.assertEqual(inst.item[0].category.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/benefit-subcategory')
        self.assertEqual(inst.item[0].detail[0].category.coding[0].code.value, FHIRCode('F6').value)
        self.assertEqual(inst.item[0].detail[0].category.coding[0].code.as_json(), 'F6')
        self.assertEqual(inst.item[0].detail[0].category.coding[0].display.value, FHIRString('Vision Coverage').value)
        self.assertEqual(inst.item[0].detail[0].category.coding[0].display.as_json(), 'Vision Coverage')
        self.assertEqual(inst.item[0].detail[0].category.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/benefit-subcategory').value)
        self.assertEqual(inst.item[0].detail[0].category.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/benefit-subcategory')
        self.assertEqual(inst.item[0].detail[0].factor, 1.1)
        self.assertEqual(inst.item[0].detail[0].modifier[0].coding[0].code.value, FHIRCode('rooh').value)
        self.assertEqual(inst.item[0].detail[0].modifier[0].coding[0].code.as_json(), 'rooh')
        self.assertEqual(inst.item[0].detail[0].modifier[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/modifiers').value)
        self.assertEqual(inst.item[0].detail[0].modifier[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/modifiers')
        self.assertEqual(inst.item[0].detail[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[0].net.value, 110.0)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].code.value, FHIRCode('frame').value)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].code.as_json(), 'frame')
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/ex-visionservice').value)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/ex-visionservice')
        self.assertEqual(inst.item[0].detail[0].revenue.coding[0].code.value, FHIRCode('0010').value)
        self.assertEqual(inst.item[0].detail[0].revenue.coding[0].code.as_json(), '0010')
        self.assertEqual(inst.item[0].detail[0].revenue.coding[0].display.value, FHIRString('Vision Clinic').value)
        self.assertEqual(inst.item[0].detail[0].revenue.coding[0].display.as_json(), 'Vision Clinic')
        self.assertEqual(inst.item[0].detail[0].revenue.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-revenue-center').value)
        self.assertEqual(inst.item[0].detail[0].revenue.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-revenue-center')
        self.assertEqual(inst.item[0].detail[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].detail[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[0].unitPrice.value, 100.0)
        self.assertEqual(inst.item[0].detail[1].category.coding[0].code.value, FHIRCode('F6').value)
        self.assertEqual(inst.item[0].detail[1].category.coding[0].code.as_json(), 'F6')
        self.assertEqual(inst.item[0].detail[1].category.coding[0].display.value, FHIRString('Vision Coverage').value)
        self.assertEqual(inst.item[0].detail[1].category.coding[0].display.as_json(), 'Vision Coverage')
        self.assertEqual(inst.item[0].detail[1].category.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/benefit-subcategory').value)
        self.assertEqual(inst.item[0].detail[1].category.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/benefit-subcategory')
        self.assertEqual(inst.item[0].detail[1].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].net.value, 110.0)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].code.value, FHIRCode('lens').value)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].code.as_json(), 'lens')
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/ex-visionservice').value)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/ex-visionservice')
        self.assertEqual(inst.item[0].detail[1].programCode[0].coding[0].code.value, FHIRCode('none').value)
        self.assertEqual(inst.item[0].detail[1].programCode[0].coding[0].code.as_json(), 'none')
        self.assertEqual(inst.item[0].detail[1].programCode[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-programcode').value)
        self.assertEqual(inst.item[0].detail[1].programCode[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-programcode')
        self.assertEqual(inst.item[0].detail[1].quantity.value, 2)
        self.assertEqual(inst.item[0].detail[1].revenue.coding[0].code.value, FHIRCode('0010').value)
        self.assertEqual(inst.item[0].detail[1].revenue.coding[0].code.as_json(), '0010')
        self.assertEqual(inst.item[0].detail[1].revenue.coding[0].display.value, FHIRString('Vision Clinic').value)
        self.assertEqual(inst.item[0].detail[1].revenue.coding[0].display.as_json(), 'Vision Clinic')
        self.assertEqual(inst.item[0].detail[1].revenue.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-revenue-center').value)
        self.assertEqual(inst.item[0].detail[1].revenue.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-revenue-center')
        self.assertEqual(inst.item[0].detail[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[0].detail[1].sequence.as_json(), 2)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].category.coding[0].code.value, FHIRCode('F6').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].category.coding[0].code.as_json(), 'F6')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].category.coding[0].display.value, FHIRString('Vision Coverage').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].category.coding[0].display.as_json(), 'Vision Coverage')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].category.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/benefit-subcategory').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].category.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/benefit-subcategory')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].factor, 1.1)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].modifier[0].coding[0].code.value, FHIRCode('rooh').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].modifier[0].coding[0].code.as_json(), 'rooh')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].modifier[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/modifiers').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].modifier[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/modifiers')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].net.value, 66.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].productOrService.coding[0].code.value, FHIRCode('lens').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].productOrService.coding[0].code.as_json(), 'lens')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/ex-visionservice').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/ex-visionservice')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].programCode[0].coding[0].code.value, FHIRCode('none').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].programCode[0].coding[0].code.as_json(), 'none')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].programCode[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-programcode').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].programCode[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-programcode')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].quantity.value, 2)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].revenue.coding[0].code.value, FHIRCode('0010').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].revenue.coding[0].code.as_json(), '0010')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].revenue.coding[0].display.value, FHIRString('Vision Clinic').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].revenue.coding[0].display.as_json(), 'Vision Clinic')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].revenue.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-revenue-center').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].revenue.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-revenue-center')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].unitPrice.value, 30.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].category.coding[0].code.value, FHIRCode('F6').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].category.coding[0].code.as_json(), 'F6')
        self.assertEqual(inst.item[0].detail[1].subDetail[1].category.coding[0].display.value, FHIRString('Vision Coverage').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].category.coding[0].display.as_json(), 'Vision Coverage')
        self.assertEqual(inst.item[0].detail[1].subDetail[1].category.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/benefit-subcategory').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].category.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/benefit-subcategory')
        self.assertEqual(inst.item[0].detail[1].subDetail[1].factor, 1.1)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].modifier[0].coding[0].code.value, FHIRCode('rooh').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].modifier[0].coding[0].code.as_json(), 'rooh')
        self.assertEqual(inst.item[0].detail[1].subDetail[1].modifier[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/modifiers').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].modifier[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/modifiers')
        self.assertEqual(inst.item[0].detail[1].subDetail[1].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].subDetail[1].net.value, 33.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].productOrService.coding[0].code.value, FHIRCode('hardening').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].productOrService.coding[0].code.as_json(), 'hardening')
        self.assertEqual(inst.item[0].detail[1].subDetail[1].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/ex-visionservice').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/ex-visionservice')
        self.assertEqual(inst.item[0].detail[1].subDetail[1].quantity.value, 2)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].revenue.coding[0].code.value, FHIRCode('0010').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].revenue.coding[0].code.as_json(), '0010')
        self.assertEqual(inst.item[0].detail[1].subDetail[1].revenue.coding[0].display.value, FHIRString('Vision Clinic').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].revenue.coding[0].display.as_json(), 'Vision Clinic')
        self.assertEqual(inst.item[0].detail[1].subDetail[1].revenue.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-revenue-center').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].revenue.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-revenue-center')
        self.assertEqual(inst.item[0].detail[1].subDetail[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].sequence.as_json(), 2)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[1].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].subDetail[1].unitPrice.value, 15.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].category.coding[0].code.value, FHIRCode('F6').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].category.coding[0].code.as_json(), 'F6')
        self.assertEqual(inst.item[0].detail[1].subDetail[2].category.coding[0].display.value, FHIRString('Vision Coverage').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].category.coding[0].display.as_json(), 'Vision Coverage')
        self.assertEqual(inst.item[0].detail[1].subDetail[2].category.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/benefit-subcategory').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].category.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/benefit-subcategory')
        self.assertEqual(inst.item[0].detail[1].subDetail[2].factor, 1.1)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].modifier[0].coding[0].code.value, FHIRCode('rooh').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].modifier[0].coding[0].code.as_json(), 'rooh')
        self.assertEqual(inst.item[0].detail[1].subDetail[2].modifier[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/modifiers').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].modifier[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/modifiers')
        self.assertEqual(inst.item[0].detail[1].subDetail[2].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].subDetail[2].net.value, 11.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].productOrService.coding[0].code.value, FHIRCode('UV coating').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].productOrService.coding[0].code.as_json(), 'UV coating')
        self.assertEqual(inst.item[0].detail[1].subDetail[2].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/ex-visionservice').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/ex-visionservice')
        self.assertEqual(inst.item[0].detail[1].subDetail[2].quantity.value, 2)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].revenue.coding[0].code.value, FHIRCode('0010').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].revenue.coding[0].code.as_json(), '0010')
        self.assertEqual(inst.item[0].detail[1].subDetail[2].revenue.coding[0].display.value, FHIRString('Vision Clinic').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].revenue.coding[0].display.as_json(), 'Vision Clinic')
        self.assertEqual(inst.item[0].detail[1].subDetail[2].revenue.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-revenue-center').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].revenue.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-revenue-center')
        self.assertEqual(inst.item[0].detail[1].subDetail[2].sequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].sequence.as_json(), 3)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[2].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].subDetail[2].unitPrice.value, 5.0)
        self.assertEqual(inst.item[0].detail[1].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].unitPrice.value, 55.0)
        self.assertEqual(inst.item[0].detail[2].category.coding[0].code.value, FHIRCode('F6').value)
        self.assertEqual(inst.item[0].detail[2].category.coding[0].code.as_json(), 'F6')
        self.assertEqual(inst.item[0].detail[2].category.coding[0].display.value, FHIRString('Vision Coverage').value)
        self.assertEqual(inst.item[0].detail[2].category.coding[0].display.as_json(), 'Vision Coverage')
        self.assertEqual(inst.item[0].detail[2].category.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/benefit-subcategory').value)
        self.assertEqual(inst.item[0].detail[2].category.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/benefit-subcategory')
        self.assertEqual(inst.item[0].detail[2].factor, 0.07)
        self.assertEqual(inst.item[0].detail[2].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[2].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[2].net.value, 15.4)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].code.value, FHIRCode('fst').value)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].code.as_json(), 'fst')
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/ex-visionservice').value)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/ex-visionservice')
        self.assertEqual(inst.item[0].detail[2].revenue.coding[0].code.value, FHIRCode('0010').value)
        self.assertEqual(inst.item[0].detail[2].revenue.coding[0].code.as_json(), '0010')
        self.assertEqual(inst.item[0].detail[2].revenue.coding[0].display.value, FHIRString('Vision Clinic').value)
        self.assertEqual(inst.item[0].detail[2].revenue.coding[0].display.as_json(), 'Vision Clinic')
        self.assertEqual(inst.item[0].detail[2].revenue.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-revenue-center').value)
        self.assertEqual(inst.item[0].detail[2].revenue.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-revenue-center')
        self.assertEqual(inst.item[0].detail[2].sequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[0].detail[2].sequence.as_json(), 3)
        self.assertEqual(inst.item[0].detail[2].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[2].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[2].unitPrice.value, 220.0)
        self.assertEqual(inst.item[0].modifier[0].coding[0].code.value, FHIRCode('rooh').value)
        self.assertEqual(inst.item[0].modifier[0].coding[0].code.as_json(), 'rooh')
        self.assertEqual(inst.item[0].modifier[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/modifiers').value)
        self.assertEqual(inst.item[0].modifier[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/modifiers')
        self.assertEqual(inst.item[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].net.value, 235.4)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.value, FHIRCode('glasses').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.as_json(), 'glasses')
        self.assertEqual(inst.item[0].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/ex-visionservice').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/ex-visionservice')
        self.assertEqual(inst.item[0].programCode[0].coding[0].code.value, FHIRCode('none').value)
        self.assertEqual(inst.item[0].programCode[0].coding[0].code.as_json(), 'none')
        self.assertEqual(inst.item[0].programCode[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-programcode').value)
        self.assertEqual(inst.item[0].programCode[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-programcode')
        self.assertEqual(inst.item[0].revenue.coding[0].code.value, FHIRCode('0010').value)
        self.assertEqual(inst.item[0].revenue.coding[0].code.as_json(), '0010')
        self.assertEqual(inst.item[0].revenue.coding[0].display.value, FHIRString('Vision Clinic').value)
        self.assertEqual(inst.item[0].revenue.coding[0].display.as_json(), 'Vision Clinic')
        self.assertEqual(inst.item[0].revenue.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-revenue-center').value)
        self.assertEqual(inst.item[0].revenue.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-revenue-center')
        self.assertEqual(inst.item[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[0].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[0].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.item[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].unitPrice.value, 235.4)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.payee.type.coding[0].code.value, FHIRCode('provider').value)
        self.assertEqual(inst.payee.type.coding[0].code.as_json(), 'provider')
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode('normal').value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), 'normal')
        self.assertEqual(inst.status.value, FHIRCode('active').value)
        self.assertEqual(inst.status.as_json(), 'active')
        self.assertEqual(inst.text.div.value, FHIRString('<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Vision Claim for Glasses</div>').value)
        self.assertEqual(inst.text.div.as_json(), '<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Vision Claim for Glasses</div>')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode('vision').value)
        self.assertEqual(inst.type.coding[0].code.as_json(), 'vision')
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/claim-type').value)
        self.assertEqual(inst.type.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/claim-type')
        self.assertEqual(inst.use.value, FHIRCode('claim').value)
        self.assertEqual(inst.use.as_json(), 'claim')

    def testClaim4(self):
        inst = self.instantiate_from('claim-example-pharmacy-medication.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Claim instance')
        self.implClaim4(inst)

        js = inst.as_json()
        self.assertEqual("Claim", js["resourceType"])
        inst2 = claim.Claim(js)
        self.implClaim4(inst2)

    def implClaim4(self, inst):
        self.assertEqual(inst.careTeam[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.careTeam[0].sequence.as_json(), 1)
        self.assertEqual(inst.created.value, FHIRDateTime('2014-08-16').value)
        self.assertEqual(inst.created.as_json(), '2014-08-16')
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.value, FHIRCode('654456').value)
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.as_json(), '654456')
        self.assertEqual(inst.diagnosis[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.diagnosis[0].sequence.as_json(), 1)
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://happypharma.com/claim').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://happypharma.com/claim')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('7612345').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '7612345')
        self.assertTrue(inst.insurance[0].focal)
        self.assertEqual(inst.insurance[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.insurance[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].detail[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[0].net.value, 45.0)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].code.value, FHIRCode('drugcost').value)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].code.as_json(), 'drugcost')
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].system.value, FHIRUri('http://hl7.org/fhir/ex-pharmaservice').value)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].system.as_json(), 'http://hl7.org/fhir/ex-pharmaservice')
        self.assertEqual(inst.item[0].detail[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].detail[1].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].net.value, 9.0)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].code.value, FHIRCode('markup').value)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].code.as_json(), 'markup')
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].system.value, FHIRUri('http://hl7.org/fhir/ex-pharmaservice').value)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].system.as_json(), 'http://hl7.org/fhir/ex-pharmaservice')
        self.assertEqual(inst.item[0].detail[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[0].detail[1].sequence.as_json(), 2)
        self.assertEqual(inst.item[0].detail[2].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[2].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[2].net.value, 36.0)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].code.value, FHIRCode('dispensefee').value)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].code.as_json(), 'dispensefee')
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].system.value, FHIRUri('http://hl7.org/fhir/ex-pharmaservice').value)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].system.as_json(), 'http://hl7.org/fhir/ex-pharmaservice')
        self.assertEqual(inst.item[0].detail[2].sequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[0].detail[2].sequence.as_json(), 3)
        self.assertEqual(inst.item[0].informationSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].informationSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].informationSequence[1].value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[0].informationSequence[1].as_json(), 2)
        self.assertEqual(inst.item[0].informationSequence[2].value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[0].informationSequence[2].as_json(), 3)
        self.assertEqual(inst.item[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].net.value, 90.0)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.value, FHIRCode('562721').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.as_json(), '562721')
        self.assertEqual(inst.item[0].productOrService.coding[0].display.value, FHIRString('Alprazolam 0.25mg (Xanax)').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].display.as_json(), 'Alprazolam 0.25mg (Xanax)')
        self.assertEqual(inst.item[0].productOrService.coding[0].system.value, FHIRUri('http://www.nlm.nih.gov/research/umls/rxnorm').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].system.as_json(), 'http://www.nlm.nih.gov/research/umls/rxnorm')
        self.assertEqual(inst.item[0].quantity.code.value, FHIRCode('TAB').value)
        self.assertEqual(inst.item[0].quantity.code.as_json(), 'TAB')
        self.assertEqual(inst.item[0].quantity.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.item[0].quantity.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.item[0].quantity.unit.value, FHIRString('TAB').value)
        self.assertEqual(inst.item[0].quantity.unit.as_json(), 'TAB')
        self.assertEqual(inst.item[0].quantity.value, 90)
        self.assertEqual(inst.item[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[0].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[0].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.payee.type.coding[0].code.value, FHIRCode('provider').value)
        self.assertEqual(inst.payee.type.coding[0].code.as_json(), 'provider')
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode('stat').value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), 'stat')
        self.assertEqual(inst.status.value, FHIRCode('active').value)
        self.assertEqual(inst.status.as_json(), 'active')
        self.assertEqual(inst.supportingInfo[0].category.coding[0].code.value, FHIRCode('pharmacyrefill').value)
        self.assertEqual(inst.supportingInfo[0].category.coding[0].code.as_json(), 'pharmacyrefill')
        self.assertEqual(inst.supportingInfo[0].code.coding[0].code.value, FHIRCode('new').value)
        self.assertEqual(inst.supportingInfo[0].code.coding[0].code.as_json(), 'new')
        self.assertEqual(inst.supportingInfo[0].code.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/pharmacy-refill').value)
        self.assertEqual(inst.supportingInfo[0].code.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/pharmacy-refill')
        self.assertEqual(inst.supportingInfo[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.supportingInfo[0].sequence.as_json(), 1)
        self.assertEqual(inst.supportingInfo[1].category.coding[0].code.value, FHIRCode('pharmacyinformation').value)
        self.assertEqual(inst.supportingInfo[1].category.coding[0].code.as_json(), 'pharmacyinformation')
        self.assertEqual(inst.supportingInfo[1].code.coding[0].code.value, FHIRCode('refillsremaining').value)
        self.assertEqual(inst.supportingInfo[1].code.coding[0].code.as_json(), 'refillsremaining')
        self.assertEqual(inst.supportingInfo[1].code.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/pharmacy-information').value)
        self.assertEqual(inst.supportingInfo[1].code.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/pharmacy-information')
        self.assertEqual(inst.supportingInfo[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.supportingInfo[1].sequence.as_json(), 2)
        self.assertEqual(inst.supportingInfo[1].valueQuantity.value, 2)
        self.assertEqual(inst.supportingInfo[2].category.coding[0].code.value, FHIRCode('pharmacyinformation').value)
        self.assertEqual(inst.supportingInfo[2].category.coding[0].code.as_json(), 'pharmacyinformation')
        self.assertEqual(inst.supportingInfo[2].code.coding[0].code.value, FHIRCode('dayssupply').value)
        self.assertEqual(inst.supportingInfo[2].code.coding[0].code.as_json(), 'dayssupply')
        self.assertEqual(inst.supportingInfo[2].code.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/pharmacy-information').value)
        self.assertEqual(inst.supportingInfo[2].code.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/pharmacy-information')
        self.assertEqual(inst.supportingInfo[2].sequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.supportingInfo[2].sequence.as_json(), 3)
        self.assertEqual(inst.supportingInfo[2].valueQuantity.value, 90)
        self.assertEqual(inst.text.div.value, FHIRString('<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Pharmacy Claim</div>').value)
        self.assertEqual(inst.text.div.as_json(), '<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Pharmacy Claim</div>')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.total.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.total.currency.as_json(), 'USD')
        self.assertEqual(inst.total.value, 90.0)
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode('pharmacy').value)
        self.assertEqual(inst.type.coding[0].code.as_json(), 'pharmacy')
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/claim-type').value)
        self.assertEqual(inst.type.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/claim-type')
        self.assertEqual(inst.use.value, FHIRCode('claim').value)
        self.assertEqual(inst.use.as_json(), 'claim')

    def testClaim5(self):
        inst = self.instantiate_from('claim-example-professional.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Claim instance')
        self.implClaim5(inst)

        js = inst.as_json()
        self.assertEqual("Claim", js["resourceType"])
        inst2 = claim.Claim(js)
        self.implClaim5(inst2)

    def implClaim5(self, inst):
        self.assertEqual(inst.careTeam[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.careTeam[0].sequence.as_json(), 1)
        self.assertEqual(inst.created.value, FHIRDateTime('2014-08-16').value)
        self.assertEqual(inst.created.as_json(), '2014-08-16')
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.value, FHIRCode('654456').value)
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.as_json(), '654456')
        self.assertEqual(inst.diagnosis[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.diagnosis[0].sequence.as_json(), 1)
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://happypdocs.com/claim').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://happypdocs.com/claim')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('8612345').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '8612345')
        self.assertTrue(inst.insurance[0].focal)
        self.assertEqual(inst.insurance[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.insurance[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].net.value, 75.0)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.value, FHIRCode('exam').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.as_json(), 'exam')
        self.assertEqual(inst.item[0].productOrService.coding[0].system.value, FHIRUri('http://hl7.org/fhir/ex-serviceproduct').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].system.as_json(), 'http://hl7.org/fhir/ex-serviceproduct')
        self.assertEqual(inst.item[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[0].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[0].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.item[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].unitPrice.value, 75.0)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.payee.type.coding[0].code.value, FHIRCode('provider').value)
        self.assertEqual(inst.payee.type.coding[0].code.as_json(), 'provider')
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode('normal').value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), 'normal')
        self.assertEqual(inst.status.value, FHIRCode('active').value)
        self.assertEqual(inst.status.as_json(), 'active')
        self.assertEqual(inst.text.div.value, FHIRString('<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Claim</div>').value)
        self.assertEqual(inst.text.div.as_json(), '<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Claim</div>')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode('professional').value)
        self.assertEqual(inst.type.coding[0].code.as_json(), 'professional')
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/claim-type').value)
        self.assertEqual(inst.type.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/claim-type')
        self.assertEqual(inst.use.value, FHIRCode('claim').value)
        self.assertEqual(inst.use.as_json(), 'claim')

    def testClaim6(self):
        inst = self.instantiate_from('claim-example-oral-bridge.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Claim instance')
        self.implClaim6(inst)

        js = inst.as_json()
        self.assertEqual("Claim", js["resourceType"])
        inst2 = claim.Claim(js)
        self.implClaim6(inst2)

    def implClaim6(self, inst):
        self.assertEqual(inst.careTeam[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.careTeam[0].sequence.as_json(), 1)
        self.assertEqual(inst.created.value, FHIRDateTime('2014-08-16').value)
        self.assertEqual(inst.created.as_json(), '2014-08-16')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://happyvalley.com/claim').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://happyvalley.com/claim')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('123466').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '123466')
        self.assertTrue(inst.insurance[0].focal)
        self.assertEqual(inst.insurance[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.insurance[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].bodySite.coding[0].code.value, FHIRCode('01').value)
        self.assertEqual(inst.item[0].bodySite.coding[0].code.as_json(), '01')
        self.assertEqual(inst.item[0].bodySite.coding[0].system.value, FHIRUri('http://fdi.org/fhir/oraltoothcodes').value)
        self.assertEqual(inst.item[0].bodySite.coding[0].system.as_json(), 'http://fdi.org/fhir/oraltoothcodes')
        self.assertEqual(inst.item[0].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].factor, 0.75)
        self.assertEqual(inst.item[0].informationSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].informationSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].locationCodeableConcept.coding[0].code.value, FHIRCode('11').value)
        self.assertEqual(inst.item[0].locationCodeableConcept.coding[0].code.as_json(), '11')
        self.assertEqual(inst.item[0].locationCodeableConcept.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-serviceplace').value)
        self.assertEqual(inst.item[0].locationCodeableConcept.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-serviceplace')
        self.assertEqual(inst.item[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].net.value, 1050.0)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.value, FHIRCode('67221').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.as_json(), '67221')
        self.assertEqual(inst.item[0].productOrService.coding[0].display.value, FHIRString('Maryland Bridge').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].display.as_json(), 'Maryland Bridge')
        self.assertEqual(inst.item[0].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[0].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[0].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.item[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].unitPrice.value, 1400.0)
        self.assertEqual(inst.item[1].bodySite.coding[0].code.value, FHIRCode('21').value)
        self.assertEqual(inst.item[1].bodySite.coding[0].code.as_json(), '21')
        self.assertEqual(inst.item[1].bodySite.coding[0].system.value, FHIRUri('http://fdi.org/fhir/oraltoothcodes').value)
        self.assertEqual(inst.item[1].bodySite.coding[0].system.as_json(), 'http://fdi.org/fhir/oraltoothcodes')
        self.assertEqual(inst.item[1].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[1].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[1].locationCodeableConcept.coding[0].code.value, FHIRCode('11').value)
        self.assertEqual(inst.item[1].locationCodeableConcept.coding[0].code.as_json(), '11')
        self.assertEqual(inst.item[1].locationCodeableConcept.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-serviceplace').value)
        self.assertEqual(inst.item[1].locationCodeableConcept.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-serviceplace')
        self.assertEqual(inst.item[1].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[1].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[1].net.value, 105.0)
        self.assertEqual(inst.item[1].productOrService.coding[0].code.value, FHIRCode('21211').value)
        self.assertEqual(inst.item[1].productOrService.coding[0].code.as_json(), '21211')
        self.assertEqual(inst.item[1].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[1].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[1].sequence.as_json(), 2)
        self.assertEqual(inst.item[1].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[1].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[1].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.item[1].subSite[0].coding[0].code.value, FHIRCode('L').value)
        self.assertEqual(inst.item[1].subSite[0].coding[0].code.as_json(), 'L')
        self.assertEqual(inst.item[1].subSite[0].coding[0].system.value, FHIRUri('http://fdi.org/fhir/oralsurfacecodes').value)
        self.assertEqual(inst.item[1].subSite[0].coding[0].system.as_json(), 'http://fdi.org/fhir/oralsurfacecodes')
        self.assertEqual(inst.item[1].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[1].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[1].unitPrice.value, 105.0)
        self.assertEqual(inst.item[2].bodySite.coding[0].code.value, FHIRCode('24').value)
        self.assertEqual(inst.item[2].bodySite.coding[0].code.as_json(), '24')
        self.assertEqual(inst.item[2].bodySite.coding[0].system.value, FHIRUri('http://fdi.org/fhir/oraltoothcodes').value)
        self.assertEqual(inst.item[2].bodySite.coding[0].system.as_json(), 'http://fdi.org/fhir/oraltoothcodes')
        self.assertEqual(inst.item[2].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[2].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[2].detail[0].factor, 0.75)
        self.assertEqual(inst.item[2].detail[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].detail[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].detail[0].net.value, 750.0)
        self.assertEqual(inst.item[2].detail[0].productOrService.coding[0].code.value, FHIRCode('27211').value)
        self.assertEqual(inst.item[2].detail[0].productOrService.coding[0].code.as_json(), '27211')
        self.assertEqual(inst.item[2].detail[0].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[2].detail[0].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[2].detail[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[2].detail[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[2].detail[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].detail[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].detail[0].unitPrice.value, 1000.0)
        self.assertEqual(inst.item[2].detail[1].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].detail[1].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].detail[1].net.value, 350.0)
        self.assertEqual(inst.item[2].detail[1].productOrService.coding[0].code.value, FHIRCode('lab').value)
        self.assertEqual(inst.item[2].detail[1].productOrService.coding[0].code.as_json(), 'lab')
        self.assertEqual(inst.item[2].detail[1].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[2].detail[1].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[2].detail[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[2].detail[1].sequence.as_json(), 2)
        self.assertEqual(inst.item[2].detail[1].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].detail[1].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].detail[1].unitPrice.value, 350.0)
        self.assertEqual(inst.item[2].locationCodeableConcept.coding[0].code.value, FHIRCode('11').value)
        self.assertEqual(inst.item[2].locationCodeableConcept.coding[0].code.as_json(), '11')
        self.assertEqual(inst.item[2].locationCodeableConcept.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-serviceplace').value)
        self.assertEqual(inst.item[2].locationCodeableConcept.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-serviceplace')
        self.assertEqual(inst.item[2].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].net.value, 1100.0)
        self.assertEqual(inst.item[2].procedureSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[2].procedureSequence[0].as_json(), 1)
        self.assertEqual(inst.item[2].productOrService.coding[0].code.value, FHIRCode('27211').value)
        self.assertEqual(inst.item[2].productOrService.coding[0].code.as_json(), '27211')
        self.assertEqual(inst.item[2].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[2].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[2].sequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[2].sequence.as_json(), 3)
        self.assertEqual(inst.item[2].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[2].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[2].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.item[2].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].unitPrice.value, 1100.0)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.payee.type.coding[0].code.value, FHIRCode('other').value)
        self.assertEqual(inst.payee.type.coding[0].code.as_json(), 'other')
        self.assertEqual(inst.payee.type.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/payeetype').value)
        self.assertEqual(inst.payee.type.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/payeetype')
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode('normal').value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), 'normal')
        self.assertEqual(inst.procedure[0].date.value, FHIRDateTime('2014-07-04').value)
        self.assertEqual(inst.procedure[0].date.as_json(), '2014-07-04')
        self.assertEqual(inst.procedure[0].procedureCodeableConcept.text.value, FHIRString('Resection of gum to increase exposed tooth.').value)
        self.assertEqual(inst.procedure[0].procedureCodeableConcept.text.as_json(), 'Resection of gum to increase exposed tooth.')
        self.assertEqual(inst.procedure[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.procedure[0].sequence.as_json(), 1)
        self.assertEqual(inst.related[0].reference.value.value, FHIRString('CASE156746B').value)
        self.assertEqual(inst.related[0].reference.value.as_json(), 'CASE156746B')
        self.assertEqual(inst.related[0].relationship.coding[0].code.value, FHIRCode('associated').value)
        self.assertEqual(inst.related[0].relationship.coding[0].code.as_json(), 'associated')
        self.assertEqual(inst.related[0].relationship.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-relatedclaimrelationship').value)
        self.assertEqual(inst.related[0].relationship.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-relatedclaimrelationship')
        self.assertEqual(inst.status.value, FHIRCode('active').value)
        self.assertEqual(inst.status.as_json(), 'active')
        self.assertEqual(inst.supportingInfo[0].category.coding[0].code.value, FHIRCode('prosthesis').value)
        self.assertEqual(inst.supportingInfo[0].category.coding[0].code.as_json(), 'prosthesis')
        self.assertEqual(inst.supportingInfo[0].category.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/claiminformationcategory').value)
        self.assertEqual(inst.supportingInfo[0].category.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/claiminformationcategory')
        self.assertEqual(inst.supportingInfo[0].code.coding[0].code.value, FHIRCode('2').value)
        self.assertEqual(inst.supportingInfo[0].code.coding[0].code.as_json(), '2')
        self.assertEqual(inst.supportingInfo[0].code.coding[0].display.value, FHIRString('Maryland Bridge').value)
        self.assertEqual(inst.supportingInfo[0].code.coding[0].display.as_json(), 'Maryland Bridge')
        self.assertEqual(inst.supportingInfo[0].code.coding[0].system.value, FHIRUri('http://hl7.org/fhir/ex-oralprostho').value)
        self.assertEqual(inst.supportingInfo[0].code.coding[0].system.as_json(), 'http://hl7.org/fhir/ex-oralprostho')
        self.assertEqual(inst.supportingInfo[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.supportingInfo[0].sequence.as_json(), 1)
        self.assertEqual(inst.supportingInfo[0].timingDate.value, FHIRDate('2001-04-07').value)
        self.assertEqual(inst.supportingInfo[0].timingDate.as_json(), '2001-04-07')
        self.assertEqual(inst.supportingInfo[0].timingDate.date, FHIRDate('2001-04-07').date)
        self.assertEqual(inst.text.div.value, FHIRString('<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Oral Health Claim</div>').value)
        self.assertEqual(inst.text.div.as_json(), '<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Oral Health Claim</div>')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.total.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.total.currency.as_json(), 'USD')
        self.assertEqual(inst.total.value, 2255.0)
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode('oral').value)
        self.assertEqual(inst.type.coding[0].code.as_json(), 'oral')
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/claim-type').value)
        self.assertEqual(inst.type.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/claim-type')
        self.assertEqual(inst.use.value, FHIRCode('claim').value)
        self.assertEqual(inst.use.as_json(), 'claim')

    def testClaim7(self):
        inst = self.instantiate_from('claim-example-oral-orthoplan.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Claim instance')
        self.implClaim7(inst)

        js = inst.as_json()
        self.assertEqual("Claim", js["resourceType"])
        inst2 = claim.Claim(js)
        self.implClaim7(inst2)

    def implClaim7(self, inst):
        self.assertEqual(inst.careTeam[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.careTeam[0].sequence.as_json(), 1)
        self.assertEqual(inst.created.value, FHIRDateTime('2015-03-16').value)
        self.assertEqual(inst.created.as_json(), '2015-03-16')
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.value, FHIRCode('123457').value)
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.as_json(), '123457')
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].system.value, FHIRUri('http://hl7.org/fhir/sid/icd-10').value)
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].system.as_json(), 'http://hl7.org/fhir/sid/icd-10')
        self.assertEqual(inst.diagnosis[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.diagnosis[0].sequence.as_json(), 1)
        self.assertEqual(inst.fundsReserve.coding[0].code.value, FHIRCode('provider').value)
        self.assertEqual(inst.fundsReserve.coding[0].code.as_json(), 'provider')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://happyvalley.com/claim').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://happyvalley.com/claim')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('12355').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '12355')
        self.assertTrue(inst.insurance[0].focal)
        self.assertEqual(inst.insurance[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.insurance[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].detail[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[0].net.value, 1000.0)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].code.value, FHIRCode('ORTHOEXAM').value)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].code.as_json(), 'ORTHOEXAM')
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[0].detail[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].detail[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[0].unitPrice.value, 1000.0)
        self.assertEqual(inst.item[0].detail[1].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].net.value, 1500.0)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].code.value, FHIRCode('ORTHODIAG').value)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].code.as_json(), 'ORTHODIAG')
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[0].detail[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[0].detail[1].sequence.as_json(), 2)
        self.assertEqual(inst.item[0].detail[1].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].unitPrice.value, 1500.0)
        self.assertEqual(inst.item[0].detail[2].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[2].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[2].net.value, 500.0)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].code.value, FHIRCode('ORTHOINITIAL').value)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].code.as_json(), 'ORTHOINITIAL')
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[0].detail[2].sequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[0].detail[2].sequence.as_json(), 3)
        self.assertEqual(inst.item[0].detail[2].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[2].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[2].unitPrice.value, 500.0)
        self.assertEqual(inst.item[0].detail[3].productOrService.coding[0].code.value, FHIRCode('ORTHOMONTHS').value)
        self.assertEqual(inst.item[0].detail[3].productOrService.coding[0].code.as_json(), 'ORTHOMONTHS')
        self.assertEqual(inst.item[0].detail[3].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[0].detail[3].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[0].detail[3].quantity.value, 24)
        self.assertEqual(inst.item[0].detail[3].sequence.value, FHIRPositiveInt('4').value)
        self.assertEqual(inst.item[0].detail[3].sequence.as_json(), 4)
        self.assertEqual(inst.item[0].detail[4].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[4].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[4].net.value, 250.0)
        self.assertEqual(inst.item[0].detail[4].productOrService.coding[0].code.value, FHIRCode('ORTHOPERIODIC').value)
        self.assertEqual(inst.item[0].detail[4].productOrService.coding[0].code.as_json(), 'ORTHOPERIODIC')
        self.assertEqual(inst.item[0].detail[4].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[0].detail[4].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[0].detail[4].quantity.value, 24)
        self.assertEqual(inst.item[0].detail[4].sequence.value, FHIRPositiveInt('5').value)
        self.assertEqual(inst.item[0].detail[4].sequence.as_json(), 5)
        self.assertEqual(inst.item[0].detail[4].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[4].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[4].unitPrice.value, 250.0)
        self.assertEqual(inst.item[0].diagnosisSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].diagnosisSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].net.value, 9000.0)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.value, FHIRCode('ORTHPLAN').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.as_json(), 'ORTHPLAN')
        self.assertEqual(inst.item[0].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].servicedDate.value, FHIRDate('2015-05-16').value)
        self.assertEqual(inst.item[0].servicedDate.as_json(), '2015-05-16')
        self.assertEqual(inst.item[0].servicedDate.date, FHIRDate('2015-05-16').date)
        self.assertEqual(inst.item[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].unitPrice.value, 9000.0)
        self.assertEqual(inst.item[1].bodySite.coding[0].code.value, FHIRCode('21').value)
        self.assertEqual(inst.item[1].bodySite.coding[0].code.as_json(), '21')
        self.assertEqual(inst.item[1].bodySite.coding[0].system.value, FHIRUri('http://fdi.org/fhir/oraltoothcodes').value)
        self.assertEqual(inst.item[1].bodySite.coding[0].system.as_json(), 'http://fdi.org/fhir/oraltoothcodes')
        self.assertEqual(inst.item[1].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[1].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[1].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[1].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[1].net.value, 105.0)
        self.assertEqual(inst.item[1].productOrService.coding[0].code.value, FHIRCode('21211').value)
        self.assertEqual(inst.item[1].productOrService.coding[0].code.as_json(), '21211')
        self.assertEqual(inst.item[1].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[1].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[1].sequence.as_json(), 2)
        self.assertEqual(inst.item[1].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[1].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[1].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.item[1].subSite[0].coding[0].code.value, FHIRCode('L').value)
        self.assertEqual(inst.item[1].subSite[0].coding[0].code.as_json(), 'L')
        self.assertEqual(inst.item[1].subSite[0].coding[0].system.value, FHIRUri('http://fdi.org/fhir/oralsurfacecodes').value)
        self.assertEqual(inst.item[1].subSite[0].coding[0].system.as_json(), 'http://fdi.org/fhir/oralsurfacecodes')
        self.assertEqual(inst.item[1].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[1].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[1].unitPrice.value, 105.0)
        self.assertEqual(inst.item[2].bodySite.coding[0].code.value, FHIRCode('36').value)
        self.assertEqual(inst.item[2].bodySite.coding[0].code.as_json(), '36')
        self.assertEqual(inst.item[2].bodySite.coding[0].system.value, FHIRUri('http://fdi.org/fhir/oraltoothcodes').value)
        self.assertEqual(inst.item[2].bodySite.coding[0].system.as_json(), 'http://fdi.org/fhir/oraltoothcodes')
        self.assertEqual(inst.item[2].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[2].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[2].detail[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].detail[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].detail[0].net.value, 750.0)
        self.assertEqual(inst.item[2].detail[0].productOrService.coding[0].code.value, FHIRCode('27211').value)
        self.assertEqual(inst.item[2].detail[0].productOrService.coding[0].code.as_json(), '27211')
        self.assertEqual(inst.item[2].detail[0].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[2].detail[0].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[2].detail[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[2].detail[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[2].detail[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].detail[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].detail[0].unitPrice.value, 750.0)
        self.assertEqual(inst.item[2].detail[1].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].detail[1].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].detail[1].net.value, 350.0)
        self.assertEqual(inst.item[2].detail[1].productOrService.coding[0].code.value, FHIRCode('lab').value)
        self.assertEqual(inst.item[2].detail[1].productOrService.coding[0].code.as_json(), 'lab')
        self.assertEqual(inst.item[2].detail[1].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[2].detail[1].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[2].detail[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[2].detail[1].sequence.as_json(), 2)
        self.assertEqual(inst.item[2].detail[1].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].detail[1].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].detail[1].unitPrice.value, 350.0)
        self.assertEqual(inst.item[2].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].net.value, 1100.0)
        self.assertEqual(inst.item[2].productOrService.coding[0].code.value, FHIRCode('27211').value)
        self.assertEqual(inst.item[2].productOrService.coding[0].code.as_json(), '27211')
        self.assertEqual(inst.item[2].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[2].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[2].sequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[2].sequence.as_json(), 3)
        self.assertEqual(inst.item[2].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[2].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[2].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.item[2].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].unitPrice.value, 1100.0)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.payee.type.coding[0].code.value, FHIRCode('provider').value)
        self.assertEqual(inst.payee.type.coding[0].code.as_json(), 'provider')
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode('normal').value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), 'normal')
        self.assertEqual(inst.status.value, FHIRCode('active').value)
        self.assertEqual(inst.status.as_json(), 'active')
        self.assertEqual(inst.text.div.value, FHIRString('<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Oral Health Claim</div>').value)
        self.assertEqual(inst.text.div.as_json(), '<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Oral Health Claim</div>')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode('oral').value)
        self.assertEqual(inst.type.coding[0].code.as_json(), 'oral')
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/claim-type').value)
        self.assertEqual(inst.type.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/claim-type')
        self.assertEqual(inst.use.value, FHIRCode('preauthorization').value)
        self.assertEqual(inst.use.as_json(), 'preauthorization')

    def testClaim8(self):
        inst = self.instantiate_from('claim-example-pharmacy-compound.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Claim instance')
        self.implClaim8(inst)

        js = inst.as_json()
        self.assertEqual("Claim", js["resourceType"])
        inst2 = claim.Claim(js)
        self.implClaim8(inst2)

    def implClaim8(self, inst):
        self.assertEqual(inst.careTeam[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.careTeam[0].sequence.as_json(), 1)
        self.assertEqual(inst.created.value, FHIRDateTime('2014-08-16').value)
        self.assertEqual(inst.created.as_json(), '2014-08-16')
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.value, FHIRCode('654456').value)
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.as_json(), '654456')
        self.assertEqual(inst.diagnosis[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.diagnosis[0].sequence.as_json(), 1)
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://happypharma.com/claim').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://happypharma.com/claim')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('7612345').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '7612345')
        self.assertTrue(inst.insurance[0].focal)
        self.assertEqual(inst.insurance[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.insurance[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].detail[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[0].net.value, 20.0)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].code.value, FHIRCode('44001').value)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].code.as_json(), '44001')
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].display.value, FHIRString('Acetaminophen 250mg').value)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].display.as_json(), 'Acetaminophen 250mg')
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].system.value, FHIRUri('http://localdruglist.org').value)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].system.as_json(), 'http://localdruglist.org')
        self.assertEqual(inst.item[0].detail[0].quantity.unit.value, FHIRString('mg').value)
        self.assertEqual(inst.item[0].detail[0].quantity.unit.as_json(), 'mg')
        self.assertEqual(inst.item[0].detail[0].quantity.value, 250)
        self.assertEqual(inst.item[0].detail[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].detail[0].subDetail[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[0].subDetail[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[0].subDetail[0].net.value, 20.0)
        self.assertEqual(inst.item[0].detail[0].subDetail[0].productOrService.coding[0].code.value, FHIRCode('drugcost').value)
        self.assertEqual(inst.item[0].detail[0].subDetail[0].productOrService.coding[0].code.as_json(), 'drugcost')
        self.assertEqual(inst.item[0].detail[0].subDetail[0].productOrService.coding[0].system.value, FHIRUri('http://hl7.org/fhir/ex-pharmaservice').value)
        self.assertEqual(inst.item[0].detail[0].subDetail[0].productOrService.coding[0].system.as_json(), 'http://hl7.org/fhir/ex-pharmaservice')
        self.assertEqual(inst.item[0].detail[0].subDetail[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[0].subDetail[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].detail[1].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].net.value, 25.0)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].code.value, FHIRCode('44035').value)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].code.as_json(), '44035')
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].display.value, FHIRString('Phenacetin 50mg').value)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].display.as_json(), 'Phenacetin 50mg')
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].system.value, FHIRUri('http://localdruglist.org').value)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].system.as_json(), 'http://localdruglist.org')
        self.assertEqual(inst.item[0].detail[1].quantity.unit.value, FHIRString('mg').value)
        self.assertEqual(inst.item[0].detail[1].quantity.unit.as_json(), 'mg')
        self.assertEqual(inst.item[0].detail[1].quantity.value, 50)
        self.assertEqual(inst.item[0].detail[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[0].detail[1].sequence.as_json(), 2)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].net.value, 25.0)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].productOrService.coding[0].code.value, FHIRCode('drugcost').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].productOrService.coding[0].code.as_json(), 'drugcost')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].productOrService.coding[0].system.value, FHIRUri('http://hl7.org/fhir/ex-pharmaservice').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].productOrService.coding[0].system.as_json(), 'http://hl7.org/fhir/ex-pharmaservice')
        self.assertEqual(inst.item[0].detail[1].subDetail[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[1].subDetail[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].detail[2].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[2].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[2].net.value, 28.0)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].code.value, FHIRCode('44057').value)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].code.as_json(), '44057')
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].display.value, FHIRString('Codeine 25mg').value)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].display.as_json(), 'Codeine 25mg')
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].system.value, FHIRUri('http://localdruglist.org').value)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].system.as_json(), 'http://localdruglist.org')
        self.assertEqual(inst.item[0].detail[2].quantity.unit.value, FHIRString('mg').value)
        self.assertEqual(inst.item[0].detail[2].quantity.unit.as_json(), 'mg')
        self.assertEqual(inst.item[0].detail[2].quantity.value, 25)
        self.assertEqual(inst.item[0].detail[2].sequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[0].detail[2].sequence.as_json(), 3)
        self.assertEqual(inst.item[0].detail[2].subDetail[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[2].subDetail[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[2].subDetail[0].net.value, 28.0)
        self.assertEqual(inst.item[0].detail[2].subDetail[0].productOrService.coding[0].code.value, FHIRCode('drugcost').value)
        self.assertEqual(inst.item[0].detail[2].subDetail[0].productOrService.coding[0].code.as_json(), 'drugcost')
        self.assertEqual(inst.item[0].detail[2].subDetail[0].productOrService.coding[0].system.value, FHIRUri('http://hl7.org/fhir/ex-pharmaservice').value)
        self.assertEqual(inst.item[0].detail[2].subDetail[0].productOrService.coding[0].system.as_json(), 'http://hl7.org/fhir/ex-pharmaservice')
        self.assertEqual(inst.item[0].detail[2].subDetail[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[2].subDetail[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].detail[3].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[3].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[3].net.value, 22.0)
        self.assertEqual(inst.item[0].detail[3].productOrService.coding[0].code.value, FHIRCode('markup').value)
        self.assertEqual(inst.item[0].detail[3].productOrService.coding[0].code.as_json(), 'markup')
        self.assertEqual(inst.item[0].detail[3].productOrService.coding[0].system.value, FHIRUri('http://hl7.org/fhir/ex-pharmaservice').value)
        self.assertEqual(inst.item[0].detail[3].productOrService.coding[0].system.as_json(), 'http://hl7.org/fhir/ex-pharmaservice')
        self.assertEqual(inst.item[0].detail[3].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[0].detail[3].sequence.as_json(), 2)
        self.assertEqual(inst.item[0].detail[4].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[4].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[4].net.value, 60.0)
        self.assertEqual(inst.item[0].detail[4].productOrService.coding[0].code.value, FHIRCode('compoundfee').value)
        self.assertEqual(inst.item[0].detail[4].productOrService.coding[0].code.as_json(), 'compoundfee')
        self.assertEqual(inst.item[0].detail[4].productOrService.coding[0].system.value, FHIRUri('http://hl7.org/fhir/ex-pharmaservice').value)
        self.assertEqual(inst.item[0].detail[4].productOrService.coding[0].system.as_json(), 'http://hl7.org/fhir/ex-pharmaservice')
        self.assertEqual(inst.item[0].detail[4].sequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[0].detail[4].sequence.as_json(), 3)
        self.assertEqual(inst.item[0].informationSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].informationSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].informationSequence[1].value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[0].informationSequence[1].as_json(), 2)
        self.assertEqual(inst.item[0].informationSequence[2].value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[0].informationSequence[2].as_json(), 3)
        self.assertEqual(inst.item[0].informationSequence[3].value, FHIRPositiveInt('4').value)
        self.assertEqual(inst.item[0].informationSequence[3].as_json(), 4)
        self.assertEqual(inst.item[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].net.value, 155.0)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.value, FHIRCode('compound').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.as_json(), 'compound')
        self.assertEqual(inst.item[0].productOrService.coding[0].display.value, FHIRString('Custom compound').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].display.as_json(), 'Custom compound')
        self.assertEqual(inst.item[0].productOrService.coding[0].system.value, FHIRUri('http://localdruglist.org').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].system.as_json(), 'http://localdruglist.org')
        self.assertEqual(inst.item[0].quantity.code.value, FHIRCode('TAB').value)
        self.assertEqual(inst.item[0].quantity.code.as_json(), 'TAB')
        self.assertEqual(inst.item[0].quantity.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.item[0].quantity.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.item[0].quantity.unit.value, FHIRString('TAB').value)
        self.assertEqual(inst.item[0].quantity.unit.as_json(), 'TAB')
        self.assertEqual(inst.item[0].quantity.value, 30)
        self.assertEqual(inst.item[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[0].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[0].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.payee.type.coding[0].code.value, FHIRCode('provider').value)
        self.assertEqual(inst.payee.type.coding[0].code.as_json(), 'provider')
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode('stat').value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), 'stat')
        self.assertEqual(inst.status.value, FHIRCode('active').value)
        self.assertEqual(inst.status.as_json(), 'active')
        self.assertEqual(inst.supportingInfo[0].category.coding[0].code.value, FHIRCode('pharmacyrefill').value)
        self.assertEqual(inst.supportingInfo[0].category.coding[0].code.as_json(), 'pharmacyrefill')
        self.assertEqual(inst.supportingInfo[0].code.coding[0].code.value, FHIRCode('new').value)
        self.assertEqual(inst.supportingInfo[0].code.coding[0].code.as_json(), 'new')
        self.assertEqual(inst.supportingInfo[0].code.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/pharmacy-refill').value)
        self.assertEqual(inst.supportingInfo[0].code.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/pharmacy-refill')
        self.assertEqual(inst.supportingInfo[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.supportingInfo[0].sequence.as_json(), 1)
        self.assertEqual(inst.supportingInfo[1].category.coding[0].code.value, FHIRCode('pharmacyinformation').value)
        self.assertEqual(inst.supportingInfo[1].category.coding[0].code.as_json(), 'pharmacyinformation')
        self.assertEqual(inst.supportingInfo[1].code.coding[0].code.value, FHIRCode('refillsremaining').value)
        self.assertEqual(inst.supportingInfo[1].code.coding[0].code.as_json(), 'refillsremaining')
        self.assertEqual(inst.supportingInfo[1].code.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/pharmacy-information').value)
        self.assertEqual(inst.supportingInfo[1].code.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/pharmacy-information')
        self.assertEqual(inst.supportingInfo[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.supportingInfo[1].sequence.as_json(), 2)
        self.assertEqual(inst.supportingInfo[1].valueQuantity.value, 0)
        self.assertEqual(inst.supportingInfo[2].category.coding[0].code.value, FHIRCode('pharmacyinformation').value)
        self.assertEqual(inst.supportingInfo[2].category.coding[0].code.as_json(), 'pharmacyinformation')
        self.assertEqual(inst.supportingInfo[2].code.coding[0].code.value, FHIRCode('dayssupply').value)
        self.assertEqual(inst.supportingInfo[2].code.coding[0].code.as_json(), 'dayssupply')
        self.assertEqual(inst.supportingInfo[2].code.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/pharmacy-information').value)
        self.assertEqual(inst.supportingInfo[2].code.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/pharmacy-information')
        self.assertEqual(inst.supportingInfo[2].sequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.supportingInfo[2].sequence.as_json(), 3)
        self.assertEqual(inst.supportingInfo[2].valueQuantity.value, 10)
        self.assertEqual(inst.supportingInfo[3].category.coding[0].code.value, FHIRCode('pharmacy').value)
        self.assertEqual(inst.supportingInfo[3].category.coding[0].code.as_json(), 'pharmacy')
        self.assertEqual(inst.supportingInfo[3].code.coding[0].code.value, FHIRCode('capsule').value)
        self.assertEqual(inst.supportingInfo[3].code.coding[0].code.as_json(), 'capsule')
        self.assertEqual(inst.supportingInfo[3].code.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/pharmacy-form').value)
        self.assertEqual(inst.supportingInfo[3].code.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/pharmacy-form')
        self.assertEqual(inst.supportingInfo[3].sequence.value, FHIRPositiveInt('4').value)
        self.assertEqual(inst.supportingInfo[3].sequence.as_json(), 4)
        self.assertEqual(inst.text.div.value, FHIRString('<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Pharmacy Claim</div>').value)
        self.assertEqual(inst.text.div.as_json(), '<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Pharmacy Claim</div>')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.total.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.total.currency.as_json(), 'USD')
        self.assertEqual(inst.total.value, 155.0)
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode('pharmacy').value)
        self.assertEqual(inst.type.coding[0].code.as_json(), 'pharmacy')
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/claim-type').value)
        self.assertEqual(inst.type.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/claim-type')
        self.assertEqual(inst.use.value, FHIRCode('claim').value)
        self.assertEqual(inst.use.as_json(), 'claim')

    def testClaim9(self):
        inst = self.instantiate_from('claim-example-oral-average.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Claim instance')
        self.implClaim9(inst)

        js = inst.as_json()
        self.assertEqual("Claim", js["resourceType"])
        inst2 = claim.Claim(js)
        self.implClaim9(inst2)

    def implClaim9(self, inst):
        self.assertEqual(inst.careTeam[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.careTeam[0].sequence.as_json(), 1)
        self.assertEqual(inst.created.value, FHIRDateTime('2014-08-16').value)
        self.assertEqual(inst.created.as_json(), '2014-08-16')
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.value, FHIRCode('123456').value)
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.as_json(), '123456')
        self.assertEqual(inst.diagnosis[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.diagnosis[0].sequence.as_json(), 1)
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://happyvalley.com/claim').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://happyvalley.com/claim')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('12346').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '12346')
        self.assertTrue(inst.insurance[0].focal)
        self.assertEqual(inst.insurance[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.insurance[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].net.value, 135.57)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.value, FHIRCode('1200').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.as_json(), '1200')
        self.assertEqual(inst.item[0].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[0].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[0].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.item[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].unitPrice.value, 135.57)
        self.assertEqual(inst.item[1].bodySite.coding[0].code.value, FHIRCode('21').value)
        self.assertEqual(inst.item[1].bodySite.coding[0].code.as_json(), '21')
        self.assertEqual(inst.item[1].bodySite.coding[0].system.value, FHIRUri('http://fdi.org/fhir/oraltoothcodes').value)
        self.assertEqual(inst.item[1].bodySite.coding[0].system.as_json(), 'http://fdi.org/fhir/oraltoothcodes')
        self.assertEqual(inst.item[1].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[1].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[1].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[1].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[1].net.value, 105.0)
        self.assertEqual(inst.item[1].productOrService.coding[0].code.value, FHIRCode('21211').value)
        self.assertEqual(inst.item[1].productOrService.coding[0].code.as_json(), '21211')
        self.assertEqual(inst.item[1].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[1].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[1].sequence.as_json(), 2)
        self.assertEqual(inst.item[1].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[1].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[1].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.item[1].subSite[0].coding[0].code.value, FHIRCode('L').value)
        self.assertEqual(inst.item[1].subSite[0].coding[0].code.as_json(), 'L')
        self.assertEqual(inst.item[1].subSite[0].coding[0].system.value, FHIRUri('http://fdi.org/fhir/oralsurfacecodes').value)
        self.assertEqual(inst.item[1].subSite[0].coding[0].system.as_json(), 'http://fdi.org/fhir/oralsurfacecodes')
        self.assertEqual(inst.item[1].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[1].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[1].unitPrice.value, 105.0)
        self.assertEqual(inst.item[2].bodySite.coding[0].code.value, FHIRCode('36').value)
        self.assertEqual(inst.item[2].bodySite.coding[0].code.as_json(), '36')
        self.assertEqual(inst.item[2].bodySite.coding[0].system.value, FHIRUri('http://fdi.org/fhir/oraltoothcodes').value)
        self.assertEqual(inst.item[2].bodySite.coding[0].system.as_json(), 'http://fdi.org/fhir/oraltoothcodes')
        self.assertEqual(inst.item[2].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[2].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[2].detail[0].factor, 0.75)
        self.assertEqual(inst.item[2].detail[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].detail[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].detail[0].net.value, 750.0)
        self.assertEqual(inst.item[2].detail[0].productOrService.coding[0].code.value, FHIRCode('27211').value)
        self.assertEqual(inst.item[2].detail[0].productOrService.coding[0].code.as_json(), '27211')
        self.assertEqual(inst.item[2].detail[0].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[2].detail[0].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[2].detail[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[2].detail[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[2].detail[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].detail[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].detail[0].unitPrice.value, 1000.0)
        self.assertEqual(inst.item[2].detail[1].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].detail[1].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].detail[1].net.value, 350.0)
        self.assertEqual(inst.item[2].detail[1].productOrService.coding[0].code.value, FHIRCode('lab').value)
        self.assertEqual(inst.item[2].detail[1].productOrService.coding[0].code.as_json(), 'lab')
        self.assertEqual(inst.item[2].detail[1].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[2].detail[1].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[2].detail[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[2].detail[1].sequence.as_json(), 2)
        self.assertEqual(inst.item[2].detail[1].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].detail[1].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].detail[1].unitPrice.value, 350.0)
        self.assertEqual(inst.item[2].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].net.value, 1100.0)
        self.assertEqual(inst.item[2].productOrService.coding[0].code.value, FHIRCode('27211').value)
        self.assertEqual(inst.item[2].productOrService.coding[0].code.as_json(), '27211')
        self.assertEqual(inst.item[2].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/oralservicecodes').value)
        self.assertEqual(inst.item[2].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/oralservicecodes')
        self.assertEqual(inst.item[2].sequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[2].sequence.as_json(), 3)
        self.assertEqual(inst.item[2].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[2].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[2].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.item[2].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[2].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[2].unitPrice.value, 1100.0)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.payee.type.coding[0].code.value, FHIRCode('provider').value)
        self.assertEqual(inst.payee.type.coding[0].code.as_json(), 'provider')
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode('normal').value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), 'normal')
        self.assertEqual(inst.status.value, FHIRCode('active').value)
        self.assertEqual(inst.status.as_json(), 'active')
        self.assertEqual(inst.supportingInfo[0].category.coding[0].code.value, FHIRCode('missingtooth').value)
        self.assertEqual(inst.supportingInfo[0].category.coding[0].code.as_json(), 'missingtooth')
        self.assertEqual(inst.supportingInfo[0].category.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/claiminformationcategory').value)
        self.assertEqual(inst.supportingInfo[0].category.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/claiminformationcategory')
        self.assertEqual(inst.supportingInfo[0].code.coding[0].code.value, FHIRCode('15').value)
        self.assertEqual(inst.supportingInfo[0].code.coding[0].code.as_json(), '15')
        self.assertEqual(inst.supportingInfo[0].code.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/ex-tooth').value)
        self.assertEqual(inst.supportingInfo[0].code.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/ex-tooth')
        self.assertEqual(inst.supportingInfo[0].reason.coding[0].code.value, FHIRCode('e').value)
        self.assertEqual(inst.supportingInfo[0].reason.coding[0].code.as_json(), 'e')
        self.assertEqual(inst.supportingInfo[0].reason.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/missingtoothreason').value)
        self.assertEqual(inst.supportingInfo[0].reason.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/missingtoothreason')
        self.assertEqual(inst.supportingInfo[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.supportingInfo[0].sequence.as_json(), 1)
        self.assertEqual(inst.supportingInfo[0].timingDate.value, FHIRDate('2012-04-07').value)
        self.assertEqual(inst.supportingInfo[0].timingDate.as_json(), '2012-04-07')
        self.assertEqual(inst.supportingInfo[0].timingDate.date, FHIRDate('2012-04-07').date)
        self.assertEqual(inst.supportingInfo[1].category.coding[0].code.value, FHIRCode('exception').value)
        self.assertEqual(inst.supportingInfo[1].category.coding[0].code.as_json(), 'exception')
        self.assertEqual(inst.supportingInfo[1].category.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/claiminformationcategory').value)
        self.assertEqual(inst.supportingInfo[1].category.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/claiminformationcategory')
        self.assertEqual(inst.supportingInfo[1].code.coding[0].code.value, FHIRCode('student').value)
        self.assertEqual(inst.supportingInfo[1].code.coding[0].code.as_json(), 'student')
        self.assertEqual(inst.supportingInfo[1].code.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/claim-exception').value)
        self.assertEqual(inst.supportingInfo[1].code.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/claim-exception')
        self.assertEqual(inst.supportingInfo[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.supportingInfo[1].sequence.as_json(), 2)
        self.assertEqual(inst.supportingInfo[1].valueString.value, FHIRString('Happy Valley Community College').value)
        self.assertEqual(inst.supportingInfo[1].valueString.as_json(), 'Happy Valley Community College')
        self.assertEqual(inst.text.div.value, FHIRString('<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Oral Health Claim</div>').value)
        self.assertEqual(inst.text.div.as_json(), '<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Oral Health Claim</div>')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode('oral').value)
        self.assertEqual(inst.type.coding[0].code.as_json(), 'oral')
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/claim-type').value)
        self.assertEqual(inst.type.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/claim-type')
        self.assertEqual(inst.use.value, FHIRCode('claim').value)
        self.assertEqual(inst.use.as_json(), 'claim')

    def testClaim10(self):
        inst = self.instantiate_from('claim-example-vision-glasses.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Claim instance')
        self.implClaim10(inst)

        js = inst.as_json()
        self.assertEqual("Claim", js["resourceType"])
        inst2 = claim.Claim(js)
        self.implClaim10(inst2)

    def implClaim10(self, inst):
        self.assertEqual(inst.careTeam[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.careTeam[0].sequence.as_json(), 1)
        self.assertEqual(inst.created.value, FHIRDateTime('2014-08-16').value)
        self.assertEqual(inst.created.as_json(), '2014-08-16')
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.value, FHIRCode('654321').value)
        self.assertEqual(inst.diagnosis[0].diagnosisCodeableConcept.coding[0].code.as_json(), '654321')
        self.assertEqual(inst.diagnosis[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.diagnosis[0].sequence.as_json(), 1)
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://happysight.com/claim').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://happysight.com/claim')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('6612346').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '6612346')
        self.assertTrue(inst.insurance[0].focal)
        self.assertEqual(inst.insurance[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.insurance[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].detail[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[0].net.value, 100.0)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].code.value, FHIRCode('frame').value)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].code.as_json(), 'frame')
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/ex-visionservice').value)
        self.assertEqual(inst.item[0].detail[0].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/ex-visionservice')
        self.assertEqual(inst.item[0].detail[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].detail[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].detail[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[0].unitPrice.value, 100.0)
        self.assertEqual(inst.item[0].detail[1].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].net.value, 100.0)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].code.value, FHIRCode('lens').value)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].code.as_json(), 'lens')
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/ex-visionservice').value)
        self.assertEqual(inst.item[0].detail[1].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/ex-visionservice')
        self.assertEqual(inst.item[0].detail[1].quantity.value, 2)
        self.assertEqual(inst.item[0].detail[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[0].detail[1].sequence.as_json(), 2)
        self.assertEqual(inst.item[0].detail[1].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[1].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[1].unitPrice.value, 50.0)
        self.assertEqual(inst.item[0].detail[2].factor, 0.07)
        self.assertEqual(inst.item[0].detail[2].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[2].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[2].net.value, 14.0)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].code.value, FHIRCode('fst').value)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].code.as_json(), 'fst')
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/ex-visionservice').value)
        self.assertEqual(inst.item[0].detail[2].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/ex-visionservice')
        self.assertEqual(inst.item[0].detail[2].sequence.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.item[0].detail[2].sequence.as_json(), 3)
        self.assertEqual(inst.item[0].detail[2].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].detail[2].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].detail[2].unitPrice.value, 200.0)
        self.assertEqual(inst.item[0].net.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].net.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].net.value, 214.0)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.value, FHIRCode('glasses').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.as_json(), 'glasses')
        self.assertEqual(inst.item[0].productOrService.coding[0].system.value, FHIRUri('http://example.org/fhir/CodeSystem/ex-visionservice').value)
        self.assertEqual(inst.item[0].productOrService.coding[0].system.as_json(), 'http://example.org/fhir/CodeSystem/ex-visionservice')
        self.assertEqual(inst.item[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].servicedDate.value, FHIRDate('2014-08-16').value)
        self.assertEqual(inst.item[0].servicedDate.as_json(), '2014-08-16')
        self.assertEqual(inst.item[0].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.item[0].unitPrice.currency.value, FHIRCode('USD').value)
        self.assertEqual(inst.item[0].unitPrice.currency.as_json(), 'USD')
        self.assertEqual(inst.item[0].unitPrice.value, 214.0)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.payee.type.coding[0].code.value, FHIRCode('provider').value)
        self.assertEqual(inst.payee.type.coding[0].code.as_json(), 'provider')
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode('normal').value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), 'normal')
        self.assertEqual(inst.status.value, FHIRCode('active').value)
        self.assertEqual(inst.status.as_json(), 'active')
        self.assertEqual(inst.text.div.value, FHIRString('<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Vision Claim for Glasses</div>').value)
        self.assertEqual(inst.text.div.as_json(), '<div xmlns="http://www.w3.org/1999/xhtml">A human-readable rendering of the Vision Claim for Glasses</div>')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode('vision').value)
        self.assertEqual(inst.type.coding[0].code.as_json(), 'vision')
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/claim-type').value)
        self.assertEqual(inst.type.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/claim-type')
        self.assertEqual(inst.use.value, FHIRCode('claim').value)
        self.assertEqual(inst.use.as_json(), 'claim')


from fhirclient.models.fhirdatatypes import FHIRPositiveInt, FHIRDateTime, FHIRCode, FHIRUri, FHIRString, FHIRDate