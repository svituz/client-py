#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import testreport

class TestReportTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("TestReport", js["resourceType"])
        return testreport.TestReport(js)

    def testTestReport1(self):
        inst = self.instantiate_from('testreport-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a TestReport instance')
        self.implTestReport1(inst)

        js = inst.as_json()
        self.assertEqual("TestReport", js["resourceType"])
        inst2 = testreport.TestReport(js)
        self.implTestReport1(inst2)

    def implTestReport1(self, inst):
        self.assertEqual(inst.id.value, FHIRString("testreport-example").value)
        self.assertEqual(inst.id.as_json(), "testreport-example")
        self.assertEqual(inst.identifier.system.value, FHIRUri("urn:ietf:rfc:3986").value)
        self.assertEqual(inst.identifier.system.as_json(), "urn:ietf:rfc:3986")
        self.assertEqual(inst.identifier.value.value, FHIRString("urn:oid:1.3.6.1.4.1.21367.2005.3.7.9878").value)
        self.assertEqual(inst.identifier.value.as_json(), "urn:oid:1.3.6.1.4.1.21367.2005.3.7.9878")
        self.assertEqual(inst.issued.value, FHIRDateTime("2016-10-07T08:25:34-05:00").value)
        self.assertEqual(inst.issued.as_json(), "2016-10-07T08:25:34-05:00")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name.value, FHIRString("TestReport Example for TestScript Example").value)
        self.assertEqual(inst.name.as_json(), "TestReport Example for TestScript Example")
        self.assertEqual(inst.participant[0].display.value, FHIRString("Crucible").value)
        self.assertEqual(inst.participant[0].display.as_json(), "Crucible")
        self.assertEqual(inst.participant[0].type.value, FHIRCode("test-engine").value)
        self.assertEqual(inst.participant[0].type.as_json(), "test-engine")
        self.assertEqual(inst.participant[0].uri.value, FHIRUri("http://projectcrucible.org").value)
        self.assertEqual(inst.participant[0].uri.as_json(), "http://projectcrucible.org")
        self.assertEqual(inst.participant[1].display.value, FHIRString("HealthIntersections STU3").value)
        self.assertEqual(inst.participant[1].display.as_json(), "HealthIntersections STU3")
        self.assertEqual(inst.participant[1].type.value, FHIRCode("server").value)
        self.assertEqual(inst.participant[1].type.as_json(), "server")
        self.assertEqual(inst.participant[1].uri.value, FHIRUri("http://fhir3.healthintersections.com.au/open").value)
        self.assertEqual(inst.participant[1].uri.as_json(), "http://fhir3.healthintersections.com.au/open")
        self.assertEqual(inst.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.result.as_json(), "pass")
        self.assertEqual(inst.score, 100.0)
        self.assertEqual(inst.setup.action[0].operation.detail.value, FHIRUri("http://projectcrucible.org/permalink/1").value)
        self.assertEqual(inst.setup.action[0].operation.detail.as_json(), "http://projectcrucible.org/permalink/1")
        self.assertEqual(inst.setup.action[0].operation.message.value, FHIRMarkdown("DELETE Patient").value)
        self.assertEqual(inst.setup.action[0].operation.message.as_json(), "DELETE Patient")
        self.assertEqual(inst.setup.action[0].operation.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.setup.action[0].operation.result.as_json(), "pass")
        self.assertEqual(inst.setup.action[1].assert_fhir.detail.value, FHIRString("http://projectcrucible.org/permalink/1").value)
        self.assertEqual(inst.setup.action[1].assert_fhir.detail.as_json(), "http://projectcrucible.org/permalink/1")
        self.assertEqual(inst.setup.action[1].assert_fhir.message.value, FHIRMarkdown("HTTP 204").value)
        self.assertEqual(inst.setup.action[1].assert_fhir.message.as_json(), "HTTP 204")
        self.assertEqual(inst.setup.action[1].assert_fhir.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.setup.action[1].assert_fhir.result.as_json(), "pass")
        self.assertEqual(inst.setup.action[2].operation.detail.value, FHIRUri("http://projectcrucible.org/permalink/1").value)
        self.assertEqual(inst.setup.action[2].operation.detail.as_json(), "http://projectcrucible.org/permalink/1")
        self.assertEqual(inst.setup.action[2].operation.message.value, FHIRMarkdown("POST Patient/fixture-patient-create").value)
        self.assertEqual(inst.setup.action[2].operation.message.as_json(), "POST Patient/fixture-patient-create")
        self.assertEqual(inst.setup.action[2].operation.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.setup.action[2].operation.result.as_json(), "pass")
        self.assertEqual(inst.setup.action[3].assert_fhir.detail.value, FHIRString("http://projectcrucible.org/permalink/1").value)
        self.assertEqual(inst.setup.action[3].assert_fhir.detail.as_json(), "http://projectcrucible.org/permalink/1")
        self.assertEqual(inst.setup.action[3].assert_fhir.message.value, FHIRMarkdown("HTTP 201").value)
        self.assertEqual(inst.setup.action[3].assert_fhir.message.as_json(), "HTTP 201")
        self.assertEqual(inst.setup.action[3].assert_fhir.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.setup.action[3].assert_fhir.result.as_json(), "pass")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.teardown.action[0].operation.detail.value, FHIRUri("http://projectcrucible.org/permalink/3").value)
        self.assertEqual(inst.teardown.action[0].operation.detail.as_json(), "http://projectcrucible.org/permalink/3")
        self.assertEqual(inst.teardown.action[0].operation.message.value, FHIRMarkdown("DELETE Patient/fixture-patient-create.").value)
        self.assertEqual(inst.teardown.action[0].operation.message.as_json(), "DELETE Patient/fixture-patient-create.")
        self.assertEqual(inst.teardown.action[0].operation.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.teardown.action[0].operation.result.as_json(), "pass")
        self.assertEqual(inst.test[0].action[0].operation.detail.value, FHIRUri("http://projectcrucible.org/permalink/2").value)
        self.assertEqual(inst.test[0].action[0].operation.detail.as_json(), "http://projectcrucible.org/permalink/2")
        self.assertEqual(inst.test[0].action[0].operation.message.value, FHIRMarkdown("GET Patient/fixture-patient-create").value)
        self.assertEqual(inst.test[0].action[0].operation.message.as_json(), "GET Patient/fixture-patient-create")
        self.assertEqual(inst.test[0].action[0].operation.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.test[0].action[0].operation.result.as_json(), "pass")
        self.assertEqual(inst.test[0].action[1].assert_fhir.detail.value, FHIRString("http://projectcrucible.org/permalink/2").value)
        self.assertEqual(inst.test[0].action[1].assert_fhir.detail.as_json(), "http://projectcrucible.org/permalink/2")
        self.assertEqual(inst.test[0].action[1].assert_fhir.message.value, FHIRMarkdown("HTTP 200").value)
        self.assertEqual(inst.test[0].action[1].assert_fhir.message.as_json(), "HTTP 200")
        self.assertEqual(inst.test[0].action[1].assert_fhir.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.test[0].action[1].assert_fhir.result.as_json(), "pass")
        self.assertEqual(inst.test[0].action[2].assert_fhir.detail.value, FHIRString("http://projectcrucible.org/permalink/2").value)
        self.assertEqual(inst.test[0].action[2].assert_fhir.detail.as_json(), "http://projectcrucible.org/permalink/2")
        self.assertEqual(inst.test[0].action[2].assert_fhir.message.value, FHIRMarkdown("Last-Modified Present").value)
        self.assertEqual(inst.test[0].action[2].assert_fhir.message.as_json(), "Last-Modified Present")
        self.assertEqual(inst.test[0].action[2].assert_fhir.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.test[0].action[2].assert_fhir.result.as_json(), "pass")
        self.assertEqual(inst.test[0].action[3].assert_fhir.detail.value, FHIRString("http://projectcrucible.org/permalink/2").value)
        self.assertEqual(inst.test[0].action[3].assert_fhir.detail.as_json(), "http://projectcrucible.org/permalink/2")
        self.assertEqual(inst.test[0].action[3].assert_fhir.message.value, FHIRMarkdown("Response is Patient").value)
        self.assertEqual(inst.test[0].action[3].assert_fhir.message.as_json(), "Response is Patient")
        self.assertEqual(inst.test[0].action[3].assert_fhir.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.test[0].action[3].assert_fhir.result.as_json(), "pass")
        self.assertEqual(inst.test[0].action[4].assert_fhir.detail.value, FHIRString("http://projectcrucible.org/permalink/2").value)
        self.assertEqual(inst.test[0].action[4].assert_fhir.detail.as_json(), "http://projectcrucible.org/permalink/2")
        self.assertEqual(inst.test[0].action[4].assert_fhir.message.value, FHIRMarkdown("Response validates").value)
        self.assertEqual(inst.test[0].action[4].assert_fhir.message.as_json(), "Response validates")
        self.assertEqual(inst.test[0].action[4].assert_fhir.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.test[0].action[4].assert_fhir.result.as_json(), "pass")
        self.assertEqual(inst.test[0].action[5].assert_fhir.detail.value, FHIRString("http://projectcrucible.org/permalink/2").value)
        self.assertEqual(inst.test[0].action[5].assert_fhir.detail.as_json(), "http://projectcrucible.org/permalink/2")
        self.assertEqual(inst.test[0].action[5].assert_fhir.message.value, FHIRMarkdown("Patient.name.family 'Chalmers'").value)
        self.assertEqual(inst.test[0].action[5].assert_fhir.message.as_json(), "Patient.name.family 'Chalmers'")
        self.assertEqual(inst.test[0].action[5].assert_fhir.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.test[0].action[5].assert_fhir.result.as_json(), "pass")
        self.assertEqual(inst.test[0].action[6].assert_fhir.detail.value, FHIRString("http://projectcrucible.org/permalink/2").value)
        self.assertEqual(inst.test[0].action[6].assert_fhir.detail.as_json(), "http://projectcrucible.org/permalink/2")
        self.assertEqual(inst.test[0].action[6].assert_fhir.message.value, FHIRMarkdown("Patient.name.given 'Peter'").value)
        self.assertEqual(inst.test[0].action[6].assert_fhir.message.as_json(), "Patient.name.given 'Peter'")
        self.assertEqual(inst.test[0].action[6].assert_fhir.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.test[0].action[6].assert_fhir.result.as_json(), "pass")
        self.assertEqual(inst.test[0].action[7].assert_fhir.detail.value, FHIRString("http://projectcrucible.org/permalink/2").value)
        self.assertEqual(inst.test[0].action[7].assert_fhir.detail.as_json(), "http://projectcrucible.org/permalink/2")
        self.assertEqual(inst.test[0].action[7].assert_fhir.message.value, FHIRMarkdown("Patient.name.family 'Chalmers'").value)
        self.assertEqual(inst.test[0].action[7].assert_fhir.message.as_json(), "Patient.name.family 'Chalmers'")
        self.assertEqual(inst.test[0].action[7].assert_fhir.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.test[0].action[7].assert_fhir.result.as_json(), "pass")
        self.assertEqual(inst.test[0].action[8].assert_fhir.detail.value, FHIRString("http://projectcrucible.org/permalink/2").value)
        self.assertEqual(inst.test[0].action[8].assert_fhir.detail.as_json(), "http://projectcrucible.org/permalink/2")
        self.assertEqual(inst.test[0].action[8].assert_fhir.message.value, FHIRMarkdown("Patient.name.family 'Chalmers'").value)
        self.assertEqual(inst.test[0].action[8].assert_fhir.message.as_json(), "Patient.name.family 'Chalmers'")
        self.assertEqual(inst.test[0].action[8].assert_fhir.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.test[0].action[8].assert_fhir.result.as_json(), "pass")
        self.assertEqual(inst.test[0].action[9].assert_fhir.detail.value, FHIRString("http://projectcrucible.org/permalink/2").value)
        self.assertEqual(inst.test[0].action[9].assert_fhir.detail.as_json(), "http://projectcrucible.org/permalink/2")
        self.assertEqual(inst.test[0].action[9].assert_fhir.message.value, FHIRMarkdown("Patient expected values.").value)
        self.assertEqual(inst.test[0].action[9].assert_fhir.message.as_json(), "Patient expected values.")
        self.assertEqual(inst.test[0].action[9].assert_fhir.result.value, FHIRCode("pass").value)
        self.assertEqual(inst.test[0].action[9].assert_fhir.result.as_json(), "pass")
        self.assertEqual(inst.test[0].description.value, FHIRString("Read a Patient and validate response.").value)
        self.assertEqual(inst.test[0].description.as_json(), "Read a Patient and validate response.")
        self.assertEqual(inst.test[0].id.value, FHIRString("01-ReadPatient").value)
        self.assertEqual(inst.test[0].id.as_json(), "01-ReadPatient")
        self.assertEqual(inst.test[0].name.value, FHIRString("Read Patient").value)
        self.assertEqual(inst.test[0].name.as_json(), "Read Patient")
        self.assertEqual(inst.tester.value, FHIRString("HL7 Execution Engine").value)
        self.assertEqual(inst.tester.as_json(), "HL7 Execution Engine")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")


from fhirclient.models.fhirdatatypes import FHIRString, FHIRUri, FHIRDateTime, FHIRCode, FHIRMarkdown