#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import healthcareservice

class HealthcareServiceTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("HealthcareService", js["resourceType"])
        return healthcareservice.HealthcareService(js)

    def testHealthcareService1(self):
        inst = self.instantiate_from('healthcareservice-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a HealthcareService instance')
        self.implHealthcareService1(inst)

        js = inst.as_json()
        self.assertEqual("HealthcareService", js["resourceType"])
        inst2 = healthcareservice.HealthcareService(js)
        self.implHealthcareService1(inst2)

    def implHealthcareService1(self, inst):
        self.assertTrue(inst.active)
        self.assertFalse(inst.appointmentRequired)
        self.assertEqual(inst.availabilityExceptions.value, FHIRString("Reduced capacity is available during the Christmas period").value)
        self.assertEqual(inst.availabilityExceptions.as_json(), "Reduced capacity is available during the Christmas period")
        self.assertTrue(inst.availableTime[0].allDay)
        self.assertEqual(inst.availableTime[0].daysOfWeek[0].value, FHIRCode("wed").value)
        self.assertEqual(inst.availableTime[0].daysOfWeek[0].as_json(), "wed")
        self.assertEqual(inst.availableTime[1].availableEndTime.value, FHIRTime("05:30:00").value)
        self.assertEqual(inst.availableTime[1].availableEndTime.as_json(), "05:30:00")
        self.assertEqual(inst.availableTime[1].availableEndTime.date, FHIRTime('05:30:00').date)
        self.assertEqual(inst.availableTime[1].availableStartTime.value, FHIRTime("08:30:00").value)
        self.assertEqual(inst.availableTime[1].availableStartTime.as_json(), "08:30:00")
        self.assertEqual(inst.availableTime[1].availableStartTime.date, FHIRTime('08:30:00').date)
        self.assertEqual(inst.availableTime[1].daysOfWeek[0].value, FHIRCode("mon").value)
        self.assertEqual(inst.availableTime[1].daysOfWeek[0].as_json(), "mon")
        self.assertEqual(inst.availableTime[1].daysOfWeek[1].value, FHIRCode("tue").value)
        self.assertEqual(inst.availableTime[1].daysOfWeek[1].as_json(), "tue")
        self.assertEqual(inst.availableTime[1].daysOfWeek[2].value, FHIRCode("thu").value)
        self.assertEqual(inst.availableTime[1].daysOfWeek[2].as_json(), "thu")
        self.assertEqual(inst.availableTime[1].daysOfWeek[3].value, FHIRCode("fri").value)
        self.assertEqual(inst.availableTime[1].daysOfWeek[3].as_json(), "fri")
        self.assertEqual(inst.availableTime[2].availableEndTime.value, FHIRTime("04:30:00").value)
        self.assertEqual(inst.availableTime[2].availableEndTime.as_json(), "04:30:00")
        self.assertEqual(inst.availableTime[2].availableEndTime.date, FHIRTime('04:30:00').date)
        self.assertEqual(inst.availableTime[2].availableStartTime.value, FHIRTime("09:30:00").value)
        self.assertEqual(inst.availableTime[2].availableStartTime.as_json(), "09:30:00")
        self.assertEqual(inst.availableTime[2].availableStartTime.date, FHIRTime('09:30:00').date)
        self.assertEqual(inst.availableTime[2].daysOfWeek[0].value, FHIRCode("sat").value)
        self.assertEqual(inst.availableTime[2].daysOfWeek[0].as_json(), "sat")
        self.assertEqual(inst.availableTime[2].daysOfWeek[1].value, FHIRCode("fri").value)
        self.assertEqual(inst.availableTime[2].daysOfWeek[1].as_json(), "fri")
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("8").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "8")
        self.assertEqual(inst.category[0].coding[0].display.value, FHIRString("Counselling").value)
        self.assertEqual(inst.category[0].coding[0].display.as_json(), "Counselling")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/service-category").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/service-category")
        self.assertEqual(inst.category[0].text.value, FHIRString("Counselling").value)
        self.assertEqual(inst.category[0].text.as_json(), "Counselling")
        self.assertEqual(inst.characteristic[0].coding[0].display.value, FHIRString("Wheelchair access").value)
        self.assertEqual(inst.characteristic[0].coding[0].display.as_json(), "Wheelchair access")
        self.assertEqual(inst.comment.value, FHIRString("Providing Specialist psychology services to the greater Den Burg area, many years of experience dealing with PTSD issues").value)
        self.assertEqual(inst.comment.as_json(), "Providing Specialist psychology services to the greater Den Burg area, many years of experience dealing with PTSD issues")
        self.assertEqual(inst.contained[0].id.value, FHIRString("DenBurg").value)
        self.assertEqual(inst.contained[0].id.as_json(), "DenBurg")
        self.assertEqual(inst.eligibility[0].code.coding[0].display.value, FHIRString("DVA Required").value)
        self.assertEqual(inst.eligibility[0].code.coding[0].display.as_json(), "DVA Required")
        self.assertEqual(inst.eligibility[0].comment.value, FHIRMarkdown("Evidence of application for DVA status may be sufficient for commencing assessment").value)
        self.assertEqual(inst.eligibility[0].comment.as_json(), "Evidence of application for DVA status may be sufficient for commencing assessment")
        self.assertEqual(inst.id.value, FHIRString("example").value)
        self.assertEqual(inst.id.as_json(), "example")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://example.org/shared-ids").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://example.org/shared-ids")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("HS-12").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "HS-12")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name.value, FHIRString("Consulting psychologists and/or psychology services").value)
        self.assertEqual(inst.name.as_json(), "Consulting psychologists and/or psychology services")
        self.assertEqual(inst.notAvailable[0].description.value, FHIRString("Christmas/Boxing Day").value)
        self.assertEqual(inst.notAvailable[0].description.as_json(), "Christmas/Boxing Day")
        self.assertEqual(inst.notAvailable[0].during.end.value, FHIRDateTime("2015-12-26").value)
        self.assertEqual(inst.notAvailable[0].during.end.as_json(), "2015-12-26")
        self.assertEqual(inst.notAvailable[0].during.start.value, FHIRDateTime("2015-12-25").value)
        self.assertEqual(inst.notAvailable[0].during.start.as_json(), "2015-12-25")
        self.assertEqual(inst.notAvailable[1].description.value, FHIRString("New Years Day").value)
        self.assertEqual(inst.notAvailable[1].description.as_json(), "New Years Day")
        self.assertEqual(inst.notAvailable[1].during.end.value, FHIRDateTime("2016-01-01").value)
        self.assertEqual(inst.notAvailable[1].during.end.as_json(), "2016-01-01")
        self.assertEqual(inst.notAvailable[1].during.start.value, FHIRDateTime("2016-01-01").value)
        self.assertEqual(inst.notAvailable[1].during.start.as_json(), "2016-01-01")
        self.assertEqual(inst.program[0].text.value, FHIRString("PTSD outreach").value)
        self.assertEqual(inst.program[0].text.as_json(), "PTSD outreach")
        self.assertEqual(inst.referralMethod[0].coding[0].code.value, FHIRCode("phone").value)
        self.assertEqual(inst.referralMethod[0].coding[0].code.as_json(), "phone")
        self.assertEqual(inst.referralMethod[0].coding[0].display.value, FHIRString("Phone").value)
        self.assertEqual(inst.referralMethod[0].coding[0].display.as_json(), "Phone")
        self.assertEqual(inst.referralMethod[1].coding[0].code.value, FHIRCode("fax").value)
        self.assertEqual(inst.referralMethod[1].coding[0].code.as_json(), "fax")
        self.assertEqual(inst.referralMethod[1].coding[0].display.value, FHIRString("Fax").value)
        self.assertEqual(inst.referralMethod[1].coding[0].display.as_json(), "Fax")
        self.assertEqual(inst.referralMethod[2].coding[0].code.value, FHIRCode("elec").value)
        self.assertEqual(inst.referralMethod[2].coding[0].code.as_json(), "elec")
        self.assertEqual(inst.referralMethod[2].coding[0].display.value, FHIRString("Secure Messaging").value)
        self.assertEqual(inst.referralMethod[2].coding[0].display.as_json(), "Secure Messaging")
        self.assertEqual(inst.referralMethod[3].coding[0].code.value, FHIRCode("semail").value)
        self.assertEqual(inst.referralMethod[3].coding[0].code.as_json(), "semail")
        self.assertEqual(inst.referralMethod[3].coding[0].display.value, FHIRString("Secure Email").value)
        self.assertEqual(inst.referralMethod[3].coding[0].display.as_json(), "Secure Email")
        self.assertEqual(inst.serviceProvisionCode[0].coding[0].code.value, FHIRCode("cost").value)
        self.assertEqual(inst.serviceProvisionCode[0].coding[0].code.as_json(), "cost")
        self.assertEqual(inst.serviceProvisionCode[0].coding[0].display.value, FHIRString("Fees apply").value)
        self.assertEqual(inst.serviceProvisionCode[0].coding[0].display.as_json(), "Fees apply")
        self.assertEqual(inst.serviceProvisionCode[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/service-provision-conditions").value)
        self.assertEqual(inst.serviceProvisionCode[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/service-provision-conditions")
        self.assertEqual(inst.specialty[0].coding[0].code.value, FHIRCode("47505003").value)
        self.assertEqual(inst.specialty[0].coding[0].code.as_json(), "47505003")
        self.assertEqual(inst.specialty[0].coding[0].display.value, FHIRString("Posttraumatic stress disorder").value)
        self.assertEqual(inst.specialty[0].coding[0].display.as_json(), "Posttraumatic stress disorder")
        self.assertEqual(inst.specialty[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.specialty[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "work")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("(555) silent").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "(555) silent")
        self.assertEqual(inst.telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.telecom[1].system.as_json(), "email")
        self.assertEqual(inst.telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[1].use.as_json(), "work")
        self.assertEqual(inst.telecom[1].value.value, FHIRString("directaddress@example.com").value)
        self.assertEqual(inst.telecom[1].value.as_json(), "directaddress@example.com")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode("394913002").value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), "394913002")
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString("Psychotherapy").value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), "Psychotherapy")
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.type[1].coding[0].code.value, FHIRCode("394587001").value)
        self.assertEqual(inst.type[1].coding[0].code.as_json(), "394587001")
        self.assertEqual(inst.type[1].coding[0].display.value, FHIRString("Psychiatry").value)
        self.assertEqual(inst.type[1].coding[0].display.as_json(), "Psychiatry")
        self.assertEqual(inst.type[1].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.type[1].coding[0].system.as_json(), "http://snomed.info/sct")


from fhirclient.models.fhirdatatypes import FHIRString, FHIRCode, FHIRTime, FHIRUri, FHIRMarkdown, FHIRDateTime