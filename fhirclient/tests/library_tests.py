#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import library

class LibraryTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Library", js["resourceType"])
        return library.Library(js)

    def testLibrary1(self):
        inst = self.instantiate_from('library-composition-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Library instance')
        self.implLibrary1(inst)

        js = inst.as_json()
        self.assertEqual("Library", js["resourceType"])
        inst2 = library.Library(js)
        self.implLibrary1(inst2)

    def implLibrary1(self, inst):
        self.assertEqual(inst.date.value, FHIRDateTime("2017-03-10").value)
        self.assertEqual(inst.date.as_json(), "2017-03-10")
        self.assertEqual(inst.description.value, FHIRMarkdown("Artifacts required for implementation of Zika Virus Management").value)
        self.assertEqual(inst.description.as_json(), "Artifacts required for implementation of Zika Virus Management")
        self.assertEqual(inst.id.value, FHIRString("composition-example").value)
        self.assertEqual(inst.id.as_json(), "composition-example")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://example.org").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://example.org")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("Zika Artifacts").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "Zika Artifacts")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.relatedArtifact[0].resource.value, FHIRCanonical("ActivityDefinition/administer-zika-virus-exposure-assessment").value)
        self.assertEqual(inst.relatedArtifact[0].resource.as_json(), "ActivityDefinition/administer-zika-virus-exposure-assessment")
        self.assertEqual(inst.relatedArtifact[0].type.value, FHIRCode("composed-of").value)
        self.assertEqual(inst.relatedArtifact[0].type.as_json(), "composed-of")
        self.assertEqual(inst.relatedArtifact[1].resource.value, FHIRCanonical("ActivityDefinition/order-serum-zika-dengue-virus-igm").value)
        self.assertEqual(inst.relatedArtifact[1].resource.as_json(), "ActivityDefinition/order-serum-zika-dengue-virus-igm")
        self.assertEqual(inst.relatedArtifact[1].type.value, FHIRCode("composed-of").value)
        self.assertEqual(inst.relatedArtifact[1].type.as_json(), "composed-of")
        self.assertEqual(inst.relatedArtifact[2].resource.value, FHIRCanonical("ActivityDefinition/provide-mosquito-prevention-advice").value)
        self.assertEqual(inst.relatedArtifact[2].resource.as_json(), "ActivityDefinition/provide-mosquito-prevention-advice")
        self.assertEqual(inst.relatedArtifact[2].type.value, FHIRCode("composed-of").value)
        self.assertEqual(inst.relatedArtifact[2].type.as_json(), "composed-of")
        self.assertEqual(inst.relatedArtifact[3].resource.value, FHIRCanonical("Library/zika-virus-intervention-logic").value)
        self.assertEqual(inst.relatedArtifact[3].resource.as_json(), "Library/zika-virus-intervention-logic")
        self.assertEqual(inst.relatedArtifact[3].type.value, FHIRCode("composed-of").value)
        self.assertEqual(inst.relatedArtifact[3].type.as_json(), "composed-of")
        self.assertEqual(inst.relatedArtifact[4].resource.value, FHIRCanonical("PlanDefinition/zika-virus-intervention").value)
        self.assertEqual(inst.relatedArtifact[4].resource.as_json(), "PlanDefinition/zika-virus-intervention")
        self.assertEqual(inst.relatedArtifact[4].type.value, FHIRCode("composed-of").value)
        self.assertEqual(inst.relatedArtifact[4].type.as_json(), "composed-of")
        self.assertEqual(inst.relatedArtifact[5].resource.value, FHIRCanonical("Questionnaire/zika-virus-exposure-assessment").value)
        self.assertEqual(inst.relatedArtifact[5].resource.as_json(), "Questionnaire/zika-virus-exposure-assessment")
        self.assertEqual(inst.relatedArtifact[5].type.value, FHIRCode("composed-of").value)
        self.assertEqual(inst.relatedArtifact[5].type.as_json(), "composed-of")
        self.assertEqual(inst.relatedArtifact[6].type.value, FHIRCode("derived-from").value)
        self.assertEqual(inst.relatedArtifact[6].type.as_json(), "derived-from")
        self.assertEqual(inst.relatedArtifact[6].url.value, FHIRUrl("https://www.cdc.gov/mmwr/volumes/65/wr/mm6539e1.htm?s_cid=mm6539e1_w").value)
        self.assertEqual(inst.relatedArtifact[6].url.as_json(), "https://www.cdc.gov/mmwr/volumes/65/wr/mm6539e1.htm?s_cid=mm6539e1_w")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Zika Artifacts").value)
        self.assertEqual(inst.title.as_json(), "Zika Artifacts")
        self.assertEqual(inst.topic[0].text.value, FHIRString("Zika Virus Management").value)
        self.assertEqual(inst.topic[0].text.as_json(), "Zika Virus Management")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("asset-collection").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "asset-collection")
        self.assertEqual(inst.version.value, FHIRString("1.0.0").value)
        self.assertEqual(inst.version.as_json(), "1.0.0")

    def testLibrary2(self):
        inst = self.instantiate_from('library-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Library instance')
        self.implLibrary2(inst)

        js = inst.as_json()
        self.assertEqual("Library", js["resourceType"])
        inst2 = library.Library(js)
        self.implLibrary2(inst2)

    def implLibrary2(self, inst):
        self.assertEqual(inst.content[0].contentType.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.content[0].contentType.as_json(), "text/cql")
        self.assertEqual(inst.content[0].url.value, FHIRUrl("library-example-content.cql").value)
        self.assertEqual(inst.content[0].url.as_json(), "library-example-content.cql")
        self.assertEqual(inst.dataRequirement[0].codeFilter[0].path.value, FHIRString("code").value)
        self.assertEqual(inst.dataRequirement[0].codeFilter[0].path.as_json(), "code")
        self.assertEqual(inst.dataRequirement[0].codeFilter[0].valueSet.value, FHIRCanonical("urn:oid:2.16.840.1.113883.3.464.1003.111.12.1006").value)
        self.assertEqual(inst.dataRequirement[0].codeFilter[0].valueSet.as_json(), "urn:oid:2.16.840.1.113883.3.464.1003.111.12.1006")
        self.assertEqual(inst.dataRequirement[0].type.value, FHIRCode("Condition").value)
        self.assertEqual(inst.dataRequirement[0].type.as_json(), "Condition")
        self.assertEqual(inst.date.value, FHIRDateTime("2015-07-22").value)
        self.assertEqual(inst.date.as_json(), "2015-07-22")
        self.assertEqual(inst.description.value, FHIRMarkdown("Common Logic for adherence to Chlamydia Screening guidelines").value)
        self.assertEqual(inst.description.as_json(), "Common Logic for adherence to Chlamydia Screening guidelines")
        self.assertEqual(inst.id.value, FHIRString("example").value)
        self.assertEqual(inst.id.as_json(), "example")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("ChalmydiaScreening_Common").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "ChalmydiaScreening_Common")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.relatedArtifact[0].resource.value, FHIRCanonical("Library/library-quick-model-definition").value)
        self.assertEqual(inst.relatedArtifact[0].resource.as_json(), "Library/library-quick-model-definition")
        self.assertEqual(inst.relatedArtifact[0].type.value, FHIRCode("depends-on").value)
        self.assertEqual(inst.relatedArtifact[0].type.as_json(), "depends-on")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Chlamydia Screening Common Library").value)
        self.assertEqual(inst.title.as_json(), "Chlamydia Screening Common Library")
        self.assertEqual(inst.topic[0].text.value, FHIRString("Chlamydia Screening").value)
        self.assertEqual(inst.topic[0].text.as_json(), "Chlamydia Screening")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("logic-library").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "logic-library")
        self.assertEqual(inst.version.value, FHIRString("2.0.0").value)
        self.assertEqual(inst.version.as_json(), "2.0.0")

    def testLibrary3(self):
        inst = self.instantiate_from('library-predecessor-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Library instance')
        self.implLibrary3(inst)

        js = inst.as_json()
        self.assertEqual("Library", js["resourceType"])
        inst2 = library.Library(js)
        self.implLibrary3(inst2)

    def implLibrary3(self, inst):
        self.assertEqual(inst.content[0].contentType.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.content[0].contentType.as_json(), "text/cql")
        self.assertEqual(inst.content[0].title.value, FHIRString("FHIR Helpers").value)
        self.assertEqual(inst.content[0].title.as_json(), "FHIR Helpers")
        self.assertEqual(inst.content[0].url.value, FHIRUrl("library-fhir-helpers-content.cql").value)
        self.assertEqual(inst.content[0].url.as_json(), "library-fhir-helpers-content.cql")
        self.assertEqual(inst.date.value, FHIRDateTime("2016-11-14").value)
        self.assertEqual(inst.date.as_json(), "2016-11-14")
        self.assertEqual(inst.description.value, FHIRMarkdown("FHIR Helpers").value)
        self.assertEqual(inst.description.as_json(), "FHIR Helpers")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.id.value, FHIRString("library-fhir-helpers-predecessor").value)
        self.assertEqual(inst.id.as_json(), "library-fhir-helpers-predecessor")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("FHIRHelpers").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "FHIRHelpers")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.relatedArtifact[0].resource.value, FHIRCanonical("Library/fhir-model-definition").value)
        self.assertEqual(inst.relatedArtifact[0].resource.as_json(), "Library/fhir-model-definition")
        self.assertEqual(inst.relatedArtifact[0].type.value, FHIRCode("depends-on").value)
        self.assertEqual(inst.relatedArtifact[0].type.as_json(), "depends-on")
        self.assertEqual(inst.relatedArtifact[1].resource.value, FHIRCanonical("Library/library-fhir-helpers").value)
        self.assertEqual(inst.relatedArtifact[1].resource.as_json(), "Library/library-fhir-helpers")
        self.assertEqual(inst.relatedArtifact[1].type.value, FHIRCode("successor").value)
        self.assertEqual(inst.relatedArtifact[1].type.as_json(), "successor")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("FHIR Helpers").value)
        self.assertEqual(inst.title.as_json(), "FHIR Helpers")
        self.assertEqual(inst.topic[0].text.value, FHIRString("FHIR Helpers").value)
        self.assertEqual(inst.topic[0].text.as_json(), "FHIR Helpers")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("logic-library").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "logic-library")
        self.assertEqual(inst.version.value, FHIRString("1.6").value)
        self.assertEqual(inst.version.as_json(), "1.6")

    def testLibrary4(self):
        inst = self.instantiate_from('library-cms146-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Library instance')
        self.implLibrary4(inst)

        js = inst.as_json()
        self.assertEqual("Library", js["resourceType"])
        inst2 = library.Library(js)
        self.implLibrary4(inst2)

    def implLibrary4(self, inst):
        self.assertEqual(inst.content[0].contentType.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.content[0].contentType.as_json(), "text/cql")
        self.assertEqual(inst.content[0].url.value, FHIRUrl("library-cms146-example-content.cql").value)
        self.assertEqual(inst.content[0].url.as_json(), "library-cms146-example-content.cql")
        self.assertEqual(inst.dataRequirement[0].type.value, FHIRCode("Patient").value)
        self.assertEqual(inst.dataRequirement[0].type.as_json(), "Patient")
        self.assertEqual(inst.dataRequirement[1].codeFilter[0].code[0].code.value, FHIRCode("diagnosis").value)
        self.assertEqual(inst.dataRequirement[1].codeFilter[0].code[0].code.as_json(), "diagnosis")
        self.assertEqual(inst.dataRequirement[1].codeFilter[0].path.value, FHIRString("category").value)
        self.assertEqual(inst.dataRequirement[1].codeFilter[0].path.as_json(), "category")
        self.assertEqual(inst.dataRequirement[1].codeFilter[1].code[0].code.value, FHIRCode("confirmed").value)
        self.assertEqual(inst.dataRequirement[1].codeFilter[1].code[0].code.as_json(), "confirmed")
        self.assertEqual(inst.dataRequirement[1].codeFilter[1].path.value, FHIRString("clinicalStatus").value)
        self.assertEqual(inst.dataRequirement[1].codeFilter[1].path.as_json(), "clinicalStatus")
        self.assertEqual(inst.dataRequirement[1].codeFilter[2].path.value, FHIRString("code").value)
        self.assertEqual(inst.dataRequirement[1].codeFilter[2].path.as_json(), "code")
        self.assertEqual(inst.dataRequirement[1].codeFilter[2].valueSet.value, FHIRCanonical("urn:oid:2.16.840.1.113883.3.464.1003.102.12.1011").value)
        self.assertEqual(inst.dataRequirement[1].codeFilter[2].valueSet.as_json(), "urn:oid:2.16.840.1.113883.3.464.1003.102.12.1011")
        self.assertEqual(inst.dataRequirement[1].type.value, FHIRCode("Condition").value)
        self.assertEqual(inst.dataRequirement[1].type.as_json(), "Condition")
        self.assertEqual(inst.dataRequirement[2].codeFilter[0].code[0].code.value, FHIRCode("diagnosis").value)
        self.assertEqual(inst.dataRequirement[2].codeFilter[0].code[0].code.as_json(), "diagnosis")
        self.assertEqual(inst.dataRequirement[2].codeFilter[0].path.value, FHIRString("category").value)
        self.assertEqual(inst.dataRequirement[2].codeFilter[0].path.as_json(), "category")
        self.assertEqual(inst.dataRequirement[2].codeFilter[1].code[0].code.value, FHIRCode("confirmed").value)
        self.assertEqual(inst.dataRequirement[2].codeFilter[1].code[0].code.as_json(), "confirmed")
        self.assertEqual(inst.dataRequirement[2].codeFilter[1].path.value, FHIRString("clinicalStatus").value)
        self.assertEqual(inst.dataRequirement[2].codeFilter[1].path.as_json(), "clinicalStatus")
        self.assertEqual(inst.dataRequirement[2].codeFilter[2].path.value, FHIRString("code").value)
        self.assertEqual(inst.dataRequirement[2].codeFilter[2].path.as_json(), "code")
        self.assertEqual(inst.dataRequirement[2].codeFilter[2].valueSet.value, FHIRCanonical("urn:oid:2.16.840.1.113883.3.464.1003.102.12.1012").value)
        self.assertEqual(inst.dataRequirement[2].codeFilter[2].valueSet.as_json(), "urn:oid:2.16.840.1.113883.3.464.1003.102.12.1012")
        self.assertEqual(inst.dataRequirement[2].type.value, FHIRCode("Condition").value)
        self.assertEqual(inst.dataRequirement[2].type.as_json(), "Condition")
        self.assertEqual(inst.dataRequirement[3].codeFilter[0].code[0].code.value, FHIRCode("finished").value)
        self.assertEqual(inst.dataRequirement[3].codeFilter[0].code[0].code.as_json(), "finished")
        self.assertEqual(inst.dataRequirement[3].codeFilter[0].path.value, FHIRString("status").value)
        self.assertEqual(inst.dataRequirement[3].codeFilter[0].path.as_json(), "status")
        self.assertEqual(inst.dataRequirement[3].codeFilter[1].code[0].code.value, FHIRCode("ambulatory").value)
        self.assertEqual(inst.dataRequirement[3].codeFilter[1].code[0].code.as_json(), "ambulatory")
        self.assertEqual(inst.dataRequirement[3].codeFilter[1].path.value, FHIRString("class").value)
        self.assertEqual(inst.dataRequirement[3].codeFilter[1].path.as_json(), "class")
        self.assertEqual(inst.dataRequirement[3].codeFilter[2].path.value, FHIRString("type").value)
        self.assertEqual(inst.dataRequirement[3].codeFilter[2].path.as_json(), "type")
        self.assertEqual(inst.dataRequirement[3].codeFilter[2].valueSet.value, FHIRCanonical("urn:oid:2.16.840.1.113883.3.464.1003.101.12.1061").value)
        self.assertEqual(inst.dataRequirement[3].codeFilter[2].valueSet.as_json(), "urn:oid:2.16.840.1.113883.3.464.1003.101.12.1061")
        self.assertEqual(inst.dataRequirement[3].type.value, FHIRCode("Encounter").value)
        self.assertEqual(inst.dataRequirement[3].type.as_json(), "Encounter")
        self.assertEqual(inst.dataRequirement[4].codeFilter[0].path.value, FHIRString("diagnosis").value)
        self.assertEqual(inst.dataRequirement[4].codeFilter[0].path.as_json(), "diagnosis")
        self.assertEqual(inst.dataRequirement[4].codeFilter[0].valueSet.value, FHIRCanonical("urn:oid:2.16.840.1.113883.3.464.1003.198.12.1012").value)
        self.assertEqual(inst.dataRequirement[4].codeFilter[0].valueSet.as_json(), "urn:oid:2.16.840.1.113883.3.464.1003.198.12.1012")
        self.assertEqual(inst.dataRequirement[4].type.value, FHIRCode("DiagnosticReport").value)
        self.assertEqual(inst.dataRequirement[4].type.as_json(), "DiagnosticReport")
        self.assertEqual(inst.dataRequirement[5].codeFilter[0].path.value, FHIRString("code").value)
        self.assertEqual(inst.dataRequirement[5].codeFilter[0].path.as_json(), "code")
        self.assertEqual(inst.dataRequirement[5].codeFilter[0].valueSet.value, FHIRCanonical("urn:oid:2.16.840.1.113883.3.464.1003.196.12.1001").value)
        self.assertEqual(inst.dataRequirement[5].codeFilter[0].valueSet.as_json(), "urn:oid:2.16.840.1.113883.3.464.1003.196.12.1001")
        self.assertEqual(inst.dataRequirement[5].type.value, FHIRCode("Medication").value)
        self.assertEqual(inst.dataRequirement[5].type.as_json(), "Medication")
        self.assertEqual(inst.dataRequirement[6].codeFilter[0].code[0].code.value, FHIRCode("active").value)
        self.assertEqual(inst.dataRequirement[6].codeFilter[0].code[0].code.as_json(), "active")
        self.assertEqual(inst.dataRequirement[6].codeFilter[0].path.value, FHIRString("status").value)
        self.assertEqual(inst.dataRequirement[6].codeFilter[0].path.as_json(), "status")
        self.assertEqual(inst.dataRequirement[6].codeFilter[1].path.value, FHIRString("medication.code").value)
        self.assertEqual(inst.dataRequirement[6].codeFilter[1].path.as_json(), "medication.code")
        self.assertEqual(inst.dataRequirement[6].codeFilter[1].valueSet.value, FHIRCanonical("urn:oid:2.16.840.1.113883.3.464.1003.196.12.1001").value)
        self.assertEqual(inst.dataRequirement[6].codeFilter[1].valueSet.as_json(), "urn:oid:2.16.840.1.113883.3.464.1003.196.12.1001")
        self.assertEqual(inst.dataRequirement[6].type.value, FHIRCode("MedicationRequest").value)
        self.assertEqual(inst.dataRequirement[6].type.as_json(), "MedicationRequest")
        self.assertEqual(inst.dataRequirement[7].codeFilter[0].code[0].code.value, FHIRCode("completed").value)
        self.assertEqual(inst.dataRequirement[7].codeFilter[0].code[0].code.as_json(), "completed")
        self.assertEqual(inst.dataRequirement[7].codeFilter[0].path.value, FHIRString("status").value)
        self.assertEqual(inst.dataRequirement[7].codeFilter[0].path.as_json(), "status")
        self.assertEqual(inst.dataRequirement[7].codeFilter[1].path.value, FHIRString("medication.code").value)
        self.assertEqual(inst.dataRequirement[7].codeFilter[1].path.as_json(), "medication.code")
        self.assertEqual(inst.dataRequirement[7].codeFilter[1].valueSet.value, FHIRCanonical("urn:oid:2.16.840.1.113883.3.464.1003.196.12.1001").value)
        self.assertEqual(inst.dataRequirement[7].codeFilter[1].valueSet.as_json(), "urn:oid:2.16.840.1.113883.3.464.1003.196.12.1001")
        self.assertEqual(inst.dataRequirement[7].type.value, FHIRCode("MedicationStatement").value)
        self.assertEqual(inst.dataRequirement[7].type.as_json(), "MedicationStatement")
        self.assertEqual(inst.date.value, FHIRDateTime("2015-07-22").value)
        self.assertEqual(inst.date.as_json(), "2015-07-22")
        self.assertEqual(inst.description.value, FHIRMarkdown("Logic for CMS 146: Appropriate Testing for Children with Pharyngitis").value)
        self.assertEqual(inst.description.as_json(), "Logic for CMS 146: Appropriate Testing for Children with Pharyngitis")
        self.assertEqual(inst.id.value, FHIRString("library-cms146-example").value)
        self.assertEqual(inst.id.as_json(), "library-cms146-example")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("CMS146").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "CMS146")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.relatedArtifact[0].resource.value, FHIRCanonical("Library/library-quick-model-definition").value)
        self.assertEqual(inst.relatedArtifact[0].resource.as_json(), "Library/library-quick-model-definition")
        self.assertEqual(inst.relatedArtifact[0].type.value, FHIRCode("depends-on").value)
        self.assertEqual(inst.relatedArtifact[0].type.as_json(), "depends-on")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Appropriate Testing for Children with Pharyngitis").value)
        self.assertEqual(inst.title.as_json(), "Appropriate Testing for Children with Pharyngitis")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("logic-library").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "logic-library")
        self.assertEqual(inst.version.value, FHIRString("2.0.0").value)
        self.assertEqual(inst.version.as_json(), "2.0.0")


from fhirclient.models.fhirdatatypes import FHIRDateTime, FHIRMarkdown, FHIRString, FHIRUri, FHIRCode, FHIRCanonical, FHIRUrl