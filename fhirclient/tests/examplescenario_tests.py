#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-25.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import examplescenario

class ExampleScenarioTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("ExampleScenario", js["resourceType"])
        return examplescenario.ExampleScenario(js)

    def testExampleScenario1(self):
        inst = self.instantiate_from('examplescenario-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ExampleScenario instance')
        self.implExampleScenario1(inst)

        js = inst.as_json()
        self.assertEqual("ExampleScenario", js["resourceType"])
        inst2 = examplescenario.ExampleScenario(js)
        self.implExampleScenario1(inst2)

    def implExampleScenario1(self, inst):
        self.assertEqual(inst.actor[0].actorId.value, FHIRString('Nurse').value)
        self.assertEqual(inst.actor[0].actorId.as_json(), 'Nurse')
        self.assertEqual(inst.actor[0].description.value, FHIRMarkdown('The Nurse').value)
        self.assertEqual(inst.actor[0].description.as_json(), 'The Nurse')
        self.assertEqual(inst.actor[0].name.value, FHIRString('Nurse').value)
        self.assertEqual(inst.actor[0].name.as_json(), 'Nurse')
        self.assertEqual(inst.actor[0].type.value, FHIRCode('person').value)
        self.assertEqual(inst.actor[0].type.as_json(), 'person')
        self.assertEqual(inst.actor[1].actorId.value, FHIRString('MAP').value)
        self.assertEqual(inst.actor[1].actorId.as_json(), 'MAP')
        self.assertEqual(inst.actor[1].description.value, FHIRMarkdown('The entity that receives the Administration Requests to show the nurse to perform them').value)
        self.assertEqual(inst.actor[1].description.as_json(), 'The entity that receives the Administration Requests to show the nurse to perform them')
        self.assertEqual(inst.actor[1].name.value, FHIRString('Nurse\'s Tablet').value)
        self.assertEqual(inst.actor[1].name.as_json(), 'Nurse\'s Tablet')
        self.assertEqual(inst.actor[1].type.value, FHIRCode('entity').value)
        self.assertEqual(inst.actor[1].type.as_json(), 'entity')
        self.assertEqual(inst.actor[2].actorId.value, FHIRString('OP').value)
        self.assertEqual(inst.actor[2].actorId.as_json(), 'OP')
        self.assertEqual(inst.actor[2].description.value, FHIRMarkdown('The Medication Administration Order Placer').value)
        self.assertEqual(inst.actor[2].description.as_json(), 'The Medication Administration Order Placer')
        self.assertEqual(inst.actor[2].name.value, FHIRString('MAR / Scheduler').value)
        self.assertEqual(inst.actor[2].name.as_json(), 'MAR / Scheduler')
        self.assertEqual(inst.actor[2].type.value, FHIRCode('entity').value)
        self.assertEqual(inst.actor[2].type.as_json(), 'entity')
        self.assertEqual(inst.actor[3].actorId.value, FHIRString('MAC').value)
        self.assertEqual(inst.actor[3].actorId.as_json(), 'MAC')
        self.assertEqual(inst.actor[3].description.value, FHIRMarkdown('The entity that receives the Medication Administration reports').value)
        self.assertEqual(inst.actor[3].description.as_json(), 'The entity that receives the Medication Administration reports')
        self.assertEqual(inst.actor[3].name.value, FHIRString('MAR / EHR').value)
        self.assertEqual(inst.actor[3].name.as_json(), 'MAR / EHR')
        self.assertEqual(inst.actor[3].type.value, FHIRCode('entity').value)
        self.assertEqual(inst.actor[3].type.as_json(), 'entity')
        self.assertEqual(inst.instance[0].description.value, FHIRMarkdown('The initial prescription which describes "medication X, 3 times per day" - the exact scheduling is not   in the initial prescription (it is left for the care teams to decide on the schedule).').value)
        self.assertEqual(inst.instance[0].description.as_json(), 'The initial prescription which describes "medication X, 3 times per day" - the exact scheduling is not   in the initial prescription (it is left for the care teams to decide on the schedule).')
        self.assertEqual(inst.instance[0].name.value, FHIRString('Initial Prescription').value)
        self.assertEqual(inst.instance[0].name.as_json(), 'Initial Prescription')
        self.assertEqual(inst.instance[0].resourceId.value, FHIRString('iherx001').value)
        self.assertEqual(inst.instance[0].resourceId.as_json(), 'iherx001')
        self.assertEqual(inst.instance[1].description.value, FHIRMarkdown('The administration request for day 1, morning').value)
        self.assertEqual(inst.instance[1].description.as_json(), 'The administration request for day 1, morning')
        self.assertEqual(inst.instance[1].name.value, FHIRString('Request for day 1, morning').value)
        self.assertEqual(inst.instance[1].name.as_json(), 'Request for day 1, morning')
        self.assertEqual(inst.instance[1].resourceId.value, FHIRString('iherx001.001').value)
        self.assertEqual(inst.instance[1].resourceId.as_json(), 'iherx001.001')
        self.assertEqual(inst.instance[2].description.value, FHIRMarkdown('The administration request for day 1, lunch').value)
        self.assertEqual(inst.instance[2].description.as_json(), 'The administration request for day 1, lunch')
        self.assertEqual(inst.instance[2].name.value, FHIRString('Request for day 1, lunch').value)
        self.assertEqual(inst.instance[2].name.as_json(), 'Request for day 1, lunch')
        self.assertEqual(inst.instance[2].resourceId.value, FHIRString('iherx001.002').value)
        self.assertEqual(inst.instance[2].resourceId.as_json(), 'iherx001.002')
        self.assertEqual(inst.instance[3].description.value, FHIRMarkdown('The administration request for day 1, evening').value)
        self.assertEqual(inst.instance[3].description.as_json(), 'The administration request for day 1, evening')
        self.assertEqual(inst.instance[3].name.value, FHIRString('Request for day 1, evening').value)
        self.assertEqual(inst.instance[3].name.as_json(), 'Request for day 1, evening')
        self.assertEqual(inst.instance[3].resourceId.value, FHIRString('iherx001.003').value)
        self.assertEqual(inst.instance[3].resourceId.as_json(), 'iherx001.003')
        self.assertEqual(inst.instance[4].description.value, FHIRMarkdown('The administration request for day 2, morning').value)
        self.assertEqual(inst.instance[4].description.as_json(), 'The administration request for day 2, morning')
        self.assertEqual(inst.instance[4].name.value, FHIRString('Request for day 2, morning').value)
        self.assertEqual(inst.instance[4].name.as_json(), 'Request for day 2, morning')
        self.assertEqual(inst.instance[4].resourceId.value, FHIRString('iherx001.004').value)
        self.assertEqual(inst.instance[4].resourceId.as_json(), 'iherx001.004')
        self.assertEqual(inst.instance[5].description.value, FHIRMarkdown('The administration request for day 2, lunch').value)
        self.assertEqual(inst.instance[5].description.as_json(), 'The administration request for day 2, lunch')
        self.assertEqual(inst.instance[5].name.value, FHIRString('Request for day 2, lunch').value)
        self.assertEqual(inst.instance[5].name.as_json(), 'Request for day 2, lunch')
        self.assertEqual(inst.instance[5].resourceId.value, FHIRString('iherx001.005').value)
        self.assertEqual(inst.instance[5].resourceId.as_json(), 'iherx001.005')
        self.assertEqual(inst.instance[6].description.value, FHIRMarkdown('The administration request for day 2, evening').value)
        self.assertEqual(inst.instance[6].description.as_json(), 'The administration request for day 2, evening')
        self.assertEqual(inst.instance[6].name.value, FHIRString('Request for day 2, evening').value)
        self.assertEqual(inst.instance[6].name.as_json(), 'Request for day 2, evening')
        self.assertEqual(inst.instance[6].resourceId.value, FHIRString('iherx001.006').value)
        self.assertEqual(inst.instance[6].resourceId.as_json(), 'iherx001.006')
        self.assertEqual(inst.instance[7].description.value, FHIRMarkdown('Administration report for day 1, morning: Taken').value)
        self.assertEqual(inst.instance[7].description.as_json(), 'Administration report for day 1, morning: Taken')
        self.assertEqual(inst.instance[7].name.value, FHIRString('Morning meds - taken').value)
        self.assertEqual(inst.instance[7].name.as_json(), 'Morning meds - taken')
        self.assertEqual(inst.instance[7].resourceId.value, FHIRString('iheadm001a').value)
        self.assertEqual(inst.instance[7].resourceId.as_json(), 'iheadm001a')
        self.assertEqual(inst.instance[8].description.value, FHIRMarkdown('Administration report for day 1, morning: NOT Taken').value)
        self.assertEqual(inst.instance[8].description.as_json(), 'Administration report for day 1, morning: NOT Taken')
        self.assertEqual(inst.instance[8].name.value, FHIRString('Morning meds - not taken').value)
        self.assertEqual(inst.instance[8].name.as_json(), 'Morning meds - not taken')
        self.assertEqual(inst.instance[8].resourceId.value, FHIRString('iheadm001b').value)
        self.assertEqual(inst.instance[8].resourceId.as_json(), 'iheadm001b')
        self.assertEqual(inst.instance[9].containedInstance[0].resourceId.value, FHIRString('iherx001.001').value)
        self.assertEqual(inst.instance[9].containedInstance[0].resourceId.as_json(), 'iherx001.001')
        self.assertEqual(inst.instance[9].containedInstance[1].resourceId.value, FHIRString('iherx001.002').value)
        self.assertEqual(inst.instance[9].containedInstance[1].resourceId.as_json(), 'iherx001.002')
        self.assertEqual(inst.instance[9].containedInstance[2].resourceId.value, FHIRString('iherx001.003').value)
        self.assertEqual(inst.instance[9].containedInstance[2].resourceId.as_json(), 'iherx001.003')
        self.assertEqual(inst.instance[9].containedInstance[3].resourceId.value, FHIRString('iherx001.004').value)
        self.assertEqual(inst.instance[9].containedInstance[3].resourceId.as_json(), 'iherx001.004')
        self.assertEqual(inst.instance[9].containedInstance[4].resourceId.value, FHIRString('iherx001.005').value)
        self.assertEqual(inst.instance[9].containedInstance[4].resourceId.as_json(), 'iherx001.005')
        self.assertEqual(inst.instance[9].containedInstance[5].resourceId.value, FHIRString('iherx001.006').value)
        self.assertEqual(inst.instance[9].containedInstance[5].resourceId.as_json(), 'iherx001.006')
        self.assertEqual(inst.instance[9].description.value, FHIRMarkdown('All the medication Requests for Day 1').value)
        self.assertEqual(inst.instance[9].description.as_json(), 'All the medication Requests for Day 1')
        self.assertEqual(inst.instance[9].name.value, FHIRString('Bundle of Medication Requests').value)
        self.assertEqual(inst.instance[9].name.as_json(), 'Bundle of Medication Requests')
        self.assertEqual(inst.instance[9].resourceId.value, FHIRString('iherx001bundle').value)
        self.assertEqual(inst.instance[9].resourceId.as_json(), 'iherx001bundle')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.process[0].postConditions.value, FHIRMarkdown('Medication administration Reports are submitted, EHR is updated.').value)
        self.assertEqual(inst.process[0].postConditions.as_json(), 'Medication administration Reports are submitted, EHR is updated.')
        self.assertEqual(inst.process[0].preConditions.value, FHIRMarkdown('Medication administration requests are in the EHR / MAR, scheduled for each individual intake.').value)
        self.assertEqual(inst.process[0].preConditions.as_json(), 'Medication administration requests are in the EHR / MAR, scheduled for each individual intake.')
        self.assertEqual(inst.process[0].step[0].operation.initiator.value, FHIRString('Nurse').value)
        self.assertEqual(inst.process[0].step[0].operation.initiator.as_json(), 'Nurse')
        self.assertEqual(inst.process[0].step[0].operation.name.value, FHIRString('1. Get today\'s schedule').value)
        self.assertEqual(inst.process[0].step[0].operation.name.as_json(), '1. Get today\'s schedule')
        self.assertEqual(inst.process[0].step[0].operation.number.value, FHIRString('1').value)
        self.assertEqual(inst.process[0].step[0].operation.number.as_json(), '1')
        self.assertEqual(inst.process[0].step[0].operation.receiver.value, FHIRString('MAP').value)
        self.assertEqual(inst.process[0].step[0].operation.receiver.as_json(), 'MAP')
        self.assertEqual(inst.process[0].step[1].process[0].description.value, FHIRMarkdown('Query for medication administration orders,\n- For today\'s shifts\n- For today\'s patients').value)
        self.assertEqual(inst.process[0].step[1].process[0].description.as_json(), 'Query for medication administration orders,\n- For today\'s shifts\n- For today\'s patients')
        self.assertEqual(inst.process[0].step[1].process[0].step[0].operation.initiator.value, FHIRString('MAP').value)
        self.assertEqual(inst.process[0].step[1].process[0].step[0].operation.initiator.as_json(), 'MAP')
        self.assertEqual(inst.process[0].step[1].process[0].step[0].operation.name.value, FHIRString('2.Query for medication administration orders,\n- For today\'s shifts\n- For today\'s patients').value)
        self.assertEqual(inst.process[0].step[1].process[0].step[0].operation.name.as_json(), '2.Query for medication administration orders,\n- For today\'s shifts\n- For today\'s patients')
        self.assertEqual(inst.process[0].step[1].process[0].step[0].operation.number.value, FHIRString('2').value)
        self.assertEqual(inst.process[0].step[1].process[0].step[0].operation.number.as_json(), '2')
        self.assertEqual(inst.process[0].step[1].process[0].step[0].operation.receiver.value, FHIRString('OP').value)
        self.assertEqual(inst.process[0].step[1].process[0].step[0].operation.receiver.as_json(), 'OP')
        self.assertEqual(inst.process[0].step[1].process[0].step[0].operation.request.resourceId.value, FHIRString('iherxqry').value)
        self.assertEqual(inst.process[0].step[1].process[0].step[0].operation.request.resourceId.as_json(), 'iherxqry')
        self.assertEqual(inst.process[0].step[1].process[0].step[0].operation.response.resourceId.value, FHIRString('iherx001bundle').value)
        self.assertEqual(inst.process[0].step[1].process[0].step[0].operation.response.resourceId.as_json(), 'iherx001bundle')
        self.assertEqual(inst.process[0].step[1].process[0].title.value, FHIRString('P1. Query Administration Requests').value)
        self.assertEqual(inst.process[0].step[1].process[0].title.as_json(), 'P1. Query Administration Requests')
        self.assertTrue(inst.process[0].step[2].pause)
        self.assertEqual(inst.process[0].step[3].operation.initiator.value, FHIRString('MAP').value)
        self.assertEqual(inst.process[0].step[3].operation.initiator.as_json(), 'MAP')
        self.assertEqual(inst.process[0].step[3].operation.name.value, FHIRString('Notify (alert)').value)
        self.assertEqual(inst.process[0].step[3].operation.name.as_json(), 'Notify (alert)')
        self.assertEqual(inst.process[0].step[3].operation.number.value, FHIRString('4').value)
        self.assertEqual(inst.process[0].step[3].operation.number.as_json(), '4')
        self.assertEqual(inst.process[0].step[3].operation.receiver.value, FHIRString('Nurse').value)
        self.assertEqual(inst.process[0].step[3].operation.receiver.as_json(), 'Nurse')
        self.assertEqual(inst.process[0].step[4].operation.initiator.value, FHIRString('Nurse').value)
        self.assertEqual(inst.process[0].step[4].operation.initiator.as_json(), 'Nurse')
        self.assertEqual(inst.process[0].step[4].operation.name.value, FHIRString('Read orders').value)
        self.assertEqual(inst.process[0].step[4].operation.name.as_json(), 'Read orders')
        self.assertEqual(inst.process[0].step[4].operation.number.value, FHIRString('5').value)
        self.assertEqual(inst.process[0].step[4].operation.number.as_json(), '5')
        self.assertEqual(inst.process[0].step[4].operation.receiver.value, FHIRString('MAP').value)
        self.assertEqual(inst.process[0].step[4].operation.receiver.as_json(), 'MAP')
        self.assertTrue(inst.process[0].step[5].pause)
        self.assertEqual(inst.process[0].step[6].operation.initiator.value, FHIRString('Nurse').value)
        self.assertEqual(inst.process[0].step[6].operation.initiator.as_json(), 'Nurse')
        self.assertEqual(inst.process[0].step[6].operation.name.value, FHIRString('Ask if patient took meds').value)
        self.assertEqual(inst.process[0].step[6].operation.name.as_json(), 'Ask if patient took meds')
        self.assertEqual(inst.process[0].step[6].operation.number.value, FHIRString('5').value)
        self.assertEqual(inst.process[0].step[6].operation.number.as_json(), '5')
        self.assertEqual(inst.process[0].step[6].operation.receiver.value, FHIRString('Nurse').value)
        self.assertEqual(inst.process[0].step[6].operation.receiver.as_json(), 'Nurse')
        self.assertEqual(inst.process[0].step[7].alternative[0].description.value, FHIRMarkdown('Invoke if patient took medications').value)
        self.assertEqual(inst.process[0].step[7].alternative[0].description.as_json(), 'Invoke if patient took medications')
        self.assertEqual(inst.process[0].step[7].alternative[0].step[0].process[0].step[0].operation.initiator.value, FHIRString('Nurse').value)
        self.assertEqual(inst.process[0].step[7].alternative[0].step[0].process[0].step[0].operation.initiator.as_json(), 'Nurse')
        self.assertTrue(inst.process[0].step[7].alternative[0].step[0].process[0].step[0].operation.initiatorActive)
        self.assertEqual(inst.process[0].step[7].alternative[0].step[0].process[0].step[0].operation.name.value, FHIRString('Register Meds taken').value)
        self.assertEqual(inst.process[0].step[7].alternative[0].step[0].process[0].step[0].operation.name.as_json(), 'Register Meds taken')
        self.assertEqual(inst.process[0].step[7].alternative[0].step[0].process[0].step[0].operation.number.value, FHIRString('1a').value)
        self.assertEqual(inst.process[0].step[7].alternative[0].step[0].process[0].step[0].operation.number.as_json(), '1a')
        self.assertEqual(inst.process[0].step[7].alternative[0].step[0].process[0].step[0].operation.receiver.value, FHIRString('MAP').value)
        self.assertEqual(inst.process[0].step[7].alternative[0].step[0].process[0].step[0].operation.receiver.as_json(), 'MAP')
        self.assertEqual(inst.process[0].step[7].alternative[0].step[0].process[0].title.value, FHIRString('Register Meds taken').value)
        self.assertEqual(inst.process[0].step[7].alternative[0].step[0].process[0].title.as_json(), 'Register Meds taken')
        self.assertEqual(inst.process[0].step[7].alternative[0].title.value, FHIRString('Patient took drugs').value)
        self.assertEqual(inst.process[0].step[7].alternative[0].title.as_json(), 'Patient took drugs')
        self.assertEqual(inst.process[0].step[7].alternative[1].description.value, FHIRMarkdown('No, patient did not take drugs').value)
        self.assertEqual(inst.process[0].step[7].alternative[1].description.as_json(), 'No, patient did not take drugs')
        self.assertEqual(inst.process[0].step[7].alternative[1].step[0].process[0].step[0].operation.initiator.value, FHIRString('Nurse').value)
        self.assertEqual(inst.process[0].step[7].alternative[1].step[0].process[0].step[0].operation.initiator.as_json(), 'Nurse')
        self.assertTrue(inst.process[0].step[7].alternative[1].step[0].process[0].step[0].operation.initiatorActive)
        self.assertEqual(inst.process[0].step[7].alternative[1].step[0].process[0].step[0].operation.name.value, FHIRString('Register Meds NOT taken').value)
        self.assertEqual(inst.process[0].step[7].alternative[1].step[0].process[0].step[0].operation.name.as_json(), 'Register Meds NOT taken')
        self.assertEqual(inst.process[0].step[7].alternative[1].step[0].process[0].step[0].operation.number.value, FHIRString('1b').value)
        self.assertEqual(inst.process[0].step[7].alternative[1].step[0].process[0].step[0].operation.number.as_json(), '1b')
        self.assertEqual(inst.process[0].step[7].alternative[1].step[0].process[0].step[0].operation.receiver.value, FHIRString('MAP').value)
        self.assertEqual(inst.process[0].step[7].alternative[1].step[0].process[0].step[0].operation.receiver.as_json(), 'MAP')
        self.assertEqual(inst.process[0].step[7].alternative[1].step[0].process[0].title.value, FHIRString('Register Meds NOT taken').value)
        self.assertEqual(inst.process[0].step[7].alternative[1].step[0].process[0].title.as_json(), 'Register Meds NOT taken')
        self.assertEqual(inst.process[0].step[7].alternative[1].title.value, FHIRString('No drugs').value)
        self.assertEqual(inst.process[0].step[7].alternative[1].title.as_json(), 'No drugs')
        self.assertEqual(inst.process[0].step[7].alternative[2].description.value, FHIRMarkdown('Unknown whether patient took medications or not').value)
        self.assertEqual(inst.process[0].step[7].alternative[2].description.as_json(), 'Unknown whether patient took medications or not')
        self.assertTrue(inst.process[0].step[7].alternative[2].step[0].pause)
        self.assertEqual(inst.process[0].step[7].alternative[2].title.value, FHIRString('Not clear').value)
        self.assertEqual(inst.process[0].step[7].alternative[2].title.as_json(), 'Not clear')
        self.assertTrue(inst.process[0].step[8].pause)
        self.assertEqual(inst.process[0].step[9].operation.initiator.value, FHIRString('Nurse').value)
        self.assertEqual(inst.process[0].step[9].operation.initiator.as_json(), 'Nurse')
        self.assertEqual(inst.process[0].step[9].operation.name.value, FHIRString('Administer drug').value)
        self.assertEqual(inst.process[0].step[9].operation.name.as_json(), 'Administer drug')
        self.assertEqual(inst.process[0].step[9].operation.number.value, FHIRString('6').value)
        self.assertEqual(inst.process[0].step[9].operation.number.as_json(), '6')
        self.assertEqual(inst.process[0].step[9].operation.receiver.value, FHIRString('Nurse').value)
        self.assertEqual(inst.process[0].step[9].operation.receiver.as_json(), 'Nurse')
        self.assertEqual(inst.process[0].title.value, FHIRString('Mobile Medication Administration').value)
        self.assertEqual(inst.process[0].title.as_json(), 'Mobile Medication Administration')
        self.assertEqual(inst.status.value, FHIRCode('draft').value)
        self.assertEqual(inst.status.as_json(), 'draft')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')


from fhirclient.models.fhirdatatypes import FHIRString, FHIRMarkdown, FHIRCode, FHIRUri