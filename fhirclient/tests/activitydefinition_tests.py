#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import activitydefinition

class ActivityDefinitionTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("ActivityDefinition", js["resourceType"])
        return activitydefinition.ActivityDefinition(js)

    def testActivityDefinition1(self):
        inst = self.instantiate_from('activitydefinition-supplyrequest-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ActivityDefinition instance')
        self.implActivityDefinition1(inst)

        js = inst.as_json()
        self.assertEqual("ActivityDefinition", js["resourceType"])
        inst2 = activitydefinition.ActivityDefinition(js)
        self.implActivityDefinition1(inst2)

    def implActivityDefinition1(self, inst):
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("BlueTubes").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "BlueTubes")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Blood collect tubes blue cap").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Blood collect tubes blue cap")
        self.assertEqual(inst.description.value, FHIRMarkdown("10 Blood collect tubes blue cap").value)
        self.assertEqual(inst.description.as_json(), "10 Blood collect tubes blue cap")
        self.assertEqual(inst.kind.value, FHIRCode("SupplyRequest").value)
        self.assertEqual(inst.kind.as_json(), "SupplyRequest")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.purpose.value, FHIRMarkdown("Describes a request for 10 Blood collection tubes with blue caps.").value)
        self.assertEqual(inst.purpose.as_json(), "Describes a request for 10 Blood collection tubes with blue caps.")
        self.assertEqual(inst.quantity.value, 10)
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.transform.value, FHIRCanonical("StructureMap/supplyrequest-transform").value)
        self.assertEqual(inst.transform.as_json(), "StructureMap/supplyrequest-transform")

    def testActivityDefinition2(self):
        inst = self.instantiate_from('activitydefinition-predecessor-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ActivityDefinition instance')
        self.implActivityDefinition2(inst)

        js = inst.as_json()
        self.assertEqual("ActivityDefinition", js["resourceType"])
        inst2 = activitydefinition.ActivityDefinition(js)
        self.implActivityDefinition2(inst2)

    def implActivityDefinition2(self, inst):
        self.assertEqual(inst.approvalDate.value, FHIRDate("2016-03-12").value)
        self.assertEqual(inst.approvalDate.as_json(), "2016-03-12")
        self.assertEqual(inst.approvalDate.date, FHIRDate('2016-03-12').date)
        self.assertEqual(inst.author[0].name.value, FHIRString("Motive Medical Intelligence").value)
        self.assertEqual(inst.author[0].name.as_json(), "Motive Medical Intelligence")
        self.assertEqual(inst.author[0].telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.author[0].telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.author[0].telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.author[0].telecom[0].use.as_json(), "work")
        self.assertEqual(inst.author[0].telecom[0].value.value, FHIRString("415-362-4007").value)
        self.assertEqual(inst.author[0].telecom[0].value.as_json(), "415-362-4007")
        self.assertEqual(inst.author[0].telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.author[0].telecom[1].system.as_json(), "email")
        self.assertEqual(inst.author[0].telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.author[0].telecom[1].use.as_json(), "work")
        self.assertEqual(inst.author[0].telecom[1].value.value, FHIRString("info@motivemi.com").value)
        self.assertEqual(inst.author[0].telecom[1].value.as_json(), "info@motivemi.com")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("306206005").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "306206005")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.text.value, FHIRString("Referral to service (procedure)").value)
        self.assertEqual(inst.code.text.as_json(), "Referral to service (procedure)")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.contact[0].telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.contact[0].telecom[0].use.as_json(), "work")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("415-362-4007").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "415-362-4007")
        self.assertEqual(inst.contact[0].telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.contact[0].telecom[1].system.as_json(), "email")
        self.assertEqual(inst.contact[0].telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.contact[0].telecom[1].use.as_json(), "work")
        self.assertEqual(inst.contact[0].telecom[1].value.value, FHIRString("info@motivemi.com").value)
        self.assertEqual(inst.contact[0].telecom[1].value.as_json(), "info@motivemi.com")
        self.assertEqual(inst.copyright.value, FHIRMarkdown("© Copyright 2016 Motive Medical Intelligence. All rights reserved.").value)
        self.assertEqual(inst.copyright.as_json(), "© Copyright 2016 Motive Medical Intelligence. All rights reserved.")
        self.assertEqual(inst.date.value, FHIRDateTime("2017-03-03T14:06:00Z").value)
        self.assertEqual(inst.date.as_json(), "2017-03-03T14:06:00Z")
        self.assertEqual(inst.description.value, FHIRMarkdown("refer to primary care mental-health integrated care program for evaluation and treatment of mental health conditions now").value)
        self.assertEqual(inst.description.as_json(), "refer to primary care mental-health integrated care program for evaluation and treatment of mental health conditions now")
        self.assertEqual(inst.effectivePeriod.end.value, FHIRDateTime("2017-12-31").value)
        self.assertEqual(inst.effectivePeriod.end.as_json(), "2017-12-31")
        self.assertEqual(inst.effectivePeriod.start.value, FHIRDateTime("2016-01-01").value)
        self.assertEqual(inst.effectivePeriod.start.as_json(), "2016-01-01")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://motivemi.com/artifacts").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://motivemi.com/artifacts")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("referralPrimaryCareMentalHealth").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "referralPrimaryCareMentalHealth")
        self.assertEqual(inst.jurisdiction[0].coding[0].code.value, FHIRCode("US").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].code.as_json(), "US")
        self.assertEqual(inst.jurisdiction[0].coding[0].system.value, FHIRUri("urn:iso:std:iso:3166").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].system.as_json(), "urn:iso:std:iso:3166")
        self.assertEqual(inst.kind.value, FHIRCode("ServiceRequest").value)
        self.assertEqual(inst.kind.as_json(), "ServiceRequest")
        self.assertEqual(inst.lastReviewDate.value, FHIRDate("2016-08-15").value)
        self.assertEqual(inst.lastReviewDate.as_json(), "2016-08-15")
        self.assertEqual(inst.lastReviewDate.date, FHIRDate('2016-08-15').date)
        self.assertEqual(inst.name.value, FHIRString("ReferralPrimaryCareMentalHealth").value)
        self.assertEqual(inst.name.as_json(), "ReferralPrimaryCareMentalHealth")
        self.assertEqual(inst.participant[0].type.value, FHIRCode("practitioner").value)
        self.assertEqual(inst.participant[0].type.as_json(), "practitioner")
        self.assertEqual(inst.publisher.value, FHIRString("Motive Medical Intelligence").value)
        self.assertEqual(inst.publisher.as_json(), "Motive Medical Intelligence")
        self.assertEqual(inst.relatedArtifact[0].display.value, FHIRString("Practice Guideline for the Treatment of Patients with Major Depressive Disorder").value)
        self.assertEqual(inst.relatedArtifact[0].display.as_json(), "Practice Guideline for the Treatment of Patients with Major Depressive Disorder")
        self.assertEqual(inst.relatedArtifact[0].type.value, FHIRCode("citation").value)
        self.assertEqual(inst.relatedArtifact[0].type.as_json(), "citation")
        self.assertEqual(inst.relatedArtifact[0].url.value, FHIRUrl("http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf").value)
        self.assertEqual(inst.relatedArtifact[0].url.as_json(), "http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf")
        self.assertEqual(inst.relatedArtifact[1].resource.value, FHIRCanonical("ActivityDefinition/referralPrimaryCareMentalHealth").value)
        self.assertEqual(inst.relatedArtifact[1].resource.as_json(), "ActivityDefinition/referralPrimaryCareMentalHealth")
        self.assertEqual(inst.relatedArtifact[1].type.value, FHIRCode("successor").value)
        self.assertEqual(inst.relatedArtifact[1].type.as_json(), "successor")
        self.assertEqual(inst.status.value, FHIRCode("retired").value)
        self.assertEqual(inst.status.as_json(), "retired")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Referral to Primary Care Mental Health").value)
        self.assertEqual(inst.title.as_json(), "Referral to Primary Care Mental Health")
        self.assertEqual(inst.topic[0].text.value, FHIRString("Mental Health Referral").value)
        self.assertEqual(inst.topic[0].text.as_json(), "Mental Health Referral")
        self.assertEqual(inst.url.value, FHIRUri("http://motivemi.com/artifacts/ActivityDefinition/referralPrimaryCareMentalHealth").value)
        self.assertEqual(inst.url.as_json(), "http://motivemi.com/artifacts/ActivityDefinition/referralPrimaryCareMentalHealth")
        self.assertEqual(inst.useContext[0].code.code.value, FHIRCode("age").value)
        self.assertEqual(inst.useContext[0].code.code.as_json(), "age")
        self.assertEqual(inst.useContext[0].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[0].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.value, FHIRCode("D000328").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.as_json(), "D000328")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display.value, FHIRString("Adult").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display.as_json(), "Adult")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.value, FHIRUri("https://meshb.nlm.nih.gov").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.as_json(), "https://meshb.nlm.nih.gov")
        self.assertEqual(inst.useContext[1].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[1].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[1].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[1].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code.value, FHIRCode("87512008").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code.as_json(), "87512008")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display.value, FHIRString("Mild major depression").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display.as_json(), "Mild major depression")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[2].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[2].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[2].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[2].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].code.value, FHIRCode("40379007").value)
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].code.as_json(), "40379007")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].display.value, FHIRString("Major depression, recurrent, mild").value)
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].display.as_json(), "Major depression, recurrent, mild")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[3].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[3].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[3].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[3].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].code.value, FHIRCode("225444004").value)
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].code.as_json(), "225444004")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].display.value, FHIRString("At risk for suicide (finding)").value)
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].display.as_json(), "At risk for suicide (finding)")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[4].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[4].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[4].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[4].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].code.value, FHIRCode("306206005").value)
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].code.as_json(), "306206005")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].display.value, FHIRString("Referral to service (procedure)").value)
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].display.as_json(), "Referral to service (procedure)")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[5].code.code.value, FHIRCode("user").value)
        self.assertEqual(inst.useContext[5].code.code.as_json(), "user")
        self.assertEqual(inst.useContext[5].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[5].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].code.value, FHIRCode("309343006").value)
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].code.as_json(), "309343006")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].display.value, FHIRString("Physician").value)
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].display.as_json(), "Physician")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[6].code.code.value, FHIRCode("venue").value)
        self.assertEqual(inst.useContext[6].code.code.as_json(), "venue")
        self.assertEqual(inst.useContext[6].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[6].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].code.value, FHIRCode("440655000").value)
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].code.as_json(), "440655000")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].display.value, FHIRString("Outpatient environment").value)
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].display.as_json(), "Outpatient environment")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.version.value, FHIRString("1.0.0").value)
        self.assertEqual(inst.version.as_json(), "1.0.0")

    def testActivityDefinition3(self):
        inst = self.instantiate_from('activitydefinition-medicationorder-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ActivityDefinition instance')
        self.implActivityDefinition3(inst)

        js = inst.as_json()
        self.assertEqual("ActivityDefinition", js["resourceType"])
        inst2 = activitydefinition.ActivityDefinition(js)
        self.implActivityDefinition3(inst2)

    def implActivityDefinition3(self, inst):
        self.assertEqual(inst.approvalDate.value, FHIRDate("2016-03-12").value)
        self.assertEqual(inst.approvalDate.as_json(), "2016-03-12")
        self.assertEqual(inst.approvalDate.date, FHIRDate('2016-03-12').date)
        self.assertEqual(inst.author[0].name.value, FHIRString("Motive Medical Intelligence").value)
        self.assertEqual(inst.author[0].name.as_json(), "Motive Medical Intelligence")
        self.assertEqual(inst.author[0].telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.author[0].telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.author[0].telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.author[0].telecom[0].use.as_json(), "work")
        self.assertEqual(inst.author[0].telecom[0].value.value, FHIRString("415-362-4007").value)
        self.assertEqual(inst.author[0].telecom[0].value.as_json(), "415-362-4007")
        self.assertEqual(inst.author[0].telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.author[0].telecom[1].system.as_json(), "email")
        self.assertEqual(inst.author[0].telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.author[0].telecom[1].use.as_json(), "work")
        self.assertEqual(inst.author[0].telecom[1].value.value, FHIRString("info@motivemi.com").value)
        self.assertEqual(inst.author[0].telecom[1].value.as_json(), "info@motivemi.com")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.contact[0].telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.contact[0].telecom[0].use.as_json(), "work")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("415-362-4007").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "415-362-4007")
        self.assertEqual(inst.contact[0].telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.contact[0].telecom[1].system.as_json(), "email")
        self.assertEqual(inst.contact[0].telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.contact[0].telecom[1].use.as_json(), "work")
        self.assertEqual(inst.contact[0].telecom[1].value.value, FHIRString("info@motivemi.com").value)
        self.assertEqual(inst.contact[0].telecom[1].value.as_json(), "info@motivemi.com")
        self.assertEqual(inst.copyright.value, FHIRMarkdown("© Copyright 2016 Motive Medical Intelligence. All rights reserved.").value)
        self.assertEqual(inst.copyright.as_json(), "© Copyright 2016 Motive Medical Intelligence. All rights reserved.")
        self.assertEqual(inst.date.value, FHIRDateTime("2015-08-15").value)
        self.assertEqual(inst.date.as_json(), "2015-08-15")
        self.assertEqual(inst.description.value, FHIRMarkdown("Citalopram 20 mg tablet 1 tablet oral 1 time daily now (30 table; 3 refills").value)
        self.assertEqual(inst.description.as_json(), "Citalopram 20 mg tablet 1 tablet oral 1 time daily now (30 table; 3 refills")
        self.assertEqual(inst.dosage[0].doseAndRate[0].doseQuantity.unit.value, FHIRString("{tbl}").value)
        self.assertEqual(inst.dosage[0].doseAndRate[0].doseQuantity.unit.as_json(), "{tbl}")
        self.assertEqual(inst.dosage[0].doseAndRate[0].doseQuantity.value, 1)
        self.assertEqual(inst.dosage[0].doseAndRate[0].type.coding[0].code.value, FHIRCode("ordered").value)
        self.assertEqual(inst.dosage[0].doseAndRate[0].type.coding[0].code.as_json(), "ordered")
        self.assertEqual(inst.dosage[0].doseAndRate[0].type.coding[0].display.value, FHIRString("Ordered").value)
        self.assertEqual(inst.dosage[0].doseAndRate[0].type.coding[0].display.as_json(), "Ordered")
        self.assertEqual(inst.dosage[0].doseAndRate[0].type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/dose-rate-type").value)
        self.assertEqual(inst.dosage[0].doseAndRate[0].type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/dose-rate-type")
        self.assertEqual(inst.dosage[0].route.coding[0].code.value, FHIRCode("26643006").value)
        self.assertEqual(inst.dosage[0].route.coding[0].code.as_json(), "26643006")
        self.assertEqual(inst.dosage[0].route.coding[0].display.value, FHIRString("Oral route (qualifier value)").value)
        self.assertEqual(inst.dosage[0].route.coding[0].display.as_json(), "Oral route (qualifier value)")
        self.assertEqual(inst.dosage[0].route.text.value, FHIRString("Oral route (qualifier value)").value)
        self.assertEqual(inst.dosage[0].route.text.as_json(), "Oral route (qualifier value)")
        self.assertEqual(inst.dosage[0].text.value, FHIRString("1 tablet oral 1 time daily").value)
        self.assertEqual(inst.dosage[0].text.as_json(), "1 tablet oral 1 time daily")
        self.assertEqual(inst.dosage[0].timing.repeat.frequency.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.dosage[0].timing.repeat.frequency.as_json(), 1)
        self.assertEqual(inst.dosage[0].timing.repeat.period, 1)
        self.assertEqual(inst.dosage[0].timing.repeat.periodUnit.value, FHIRCode("d").value)
        self.assertEqual(inst.dosage[0].timing.repeat.periodUnit.as_json(), "d")
        self.assertEqual(inst.dynamicValue[0].expression.description.value, FHIRString("dispenseRequest.numberOfRepeatsAllowed is three (3)").value)
        self.assertEqual(inst.dynamicValue[0].expression.description.as_json(), "dispenseRequest.numberOfRepeatsAllowed is three (3)")
        self.assertEqual(inst.dynamicValue[0].expression.expression.value, FHIRString("3").value)
        self.assertEqual(inst.dynamicValue[0].expression.expression.as_json(), "3")
        self.assertEqual(inst.dynamicValue[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.dynamicValue[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.dynamicValue[0].path.value, FHIRString("dispenseRequest.numberOfRepeatsAllowed").value)
        self.assertEqual(inst.dynamicValue[0].path.as_json(), "dispenseRequest.numberOfRepeatsAllowed")
        self.assertEqual(inst.dynamicValue[1].expression.description.value, FHIRString("dispenseRequest.quantity is thirty (30) tablets").value)
        self.assertEqual(inst.dynamicValue[1].expression.description.as_json(), "dispenseRequest.quantity is thirty (30) tablets")
        self.assertEqual(inst.dynamicValue[1].expression.expression.value, FHIRString("30 '{tbl}'").value)
        self.assertEqual(inst.dynamicValue[1].expression.expression.as_json(), "30 '{tbl}'")
        self.assertEqual(inst.dynamicValue[1].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.dynamicValue[1].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.dynamicValue[1].path.value, FHIRString("dispenseRequest.quantity").value)
        self.assertEqual(inst.dynamicValue[1].path.as_json(), "dispenseRequest.quantity")
        self.assertEqual(inst.effectivePeriod.end.value, FHIRDateTime("2017-12-31").value)
        self.assertEqual(inst.effectivePeriod.end.as_json(), "2017-12-31")
        self.assertEqual(inst.effectivePeriod.start.value, FHIRDateTime("2016-01-01").value)
        self.assertEqual(inst.effectivePeriod.start.as_json(), "2016-01-01")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://motivemi.com").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://motivemi.com")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("citalopramPrescription").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "citalopramPrescription")
        self.assertEqual(inst.jurisdiction[0].coding[0].code.value, FHIRCode("US").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].code.as_json(), "US")
        self.assertEqual(inst.jurisdiction[0].coding[0].system.value, FHIRUri("urn:iso:std:iso:3166").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].system.as_json(), "urn:iso:std:iso:3166")
        self.assertEqual(inst.kind.value, FHIRCode("MedicationRequest").value)
        self.assertEqual(inst.kind.as_json(), "MedicationRequest")
        self.assertEqual(inst.lastReviewDate.value, FHIRDate("2016-08-15").value)
        self.assertEqual(inst.lastReviewDate.as_json(), "2016-08-15")
        self.assertEqual(inst.lastReviewDate.date, FHIRDate('2016-08-15').date)
        self.assertEqual(inst.name.value, FHIRString("CitalopramPrescription").value)
        self.assertEqual(inst.name.as_json(), "CitalopramPrescription")
        self.assertEqual(inst.publisher.value, FHIRString("Motive Medical Intelligence").value)
        self.assertEqual(inst.publisher.as_json(), "Motive Medical Intelligence")
        self.assertEqual(inst.purpose.value, FHIRMarkdown("Defines a guideline supported prescription for the treatment of depressive disorders").value)
        self.assertEqual(inst.purpose.as_json(), "Defines a guideline supported prescription for the treatment of depressive disorders")
        self.assertEqual(inst.relatedArtifact[0].display.value, FHIRString("Practice Guideline for the Treatment of Patients with Major Depressive Disorder").value)
        self.assertEqual(inst.relatedArtifact[0].display.as_json(), "Practice Guideline for the Treatment of Patients with Major Depressive Disorder")
        self.assertEqual(inst.relatedArtifact[0].type.value, FHIRCode("citation").value)
        self.assertEqual(inst.relatedArtifact[0].type.as_json(), "citation")
        self.assertEqual(inst.relatedArtifact[0].url.value, FHIRUrl("http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf").value)
        self.assertEqual(inst.relatedArtifact[0].url.as_json(), "http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf")
        self.assertEqual(inst.relatedArtifact[1].resource.value, FHIRCanonical("#citalopramMedication").value)
        self.assertEqual(inst.relatedArtifact[1].resource.as_json(), "#citalopramMedication")
        self.assertEqual(inst.relatedArtifact[1].type.value, FHIRCode("composed-of").value)
        self.assertEqual(inst.relatedArtifact[1].type.as_json(), "composed-of")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Citalopram Prescription").value)
        self.assertEqual(inst.title.as_json(), "Citalopram Prescription")
        self.assertEqual(inst.topic[0].text.value, FHIRString("Mental Health Treatment").value)
        self.assertEqual(inst.topic[0].text.as_json(), "Mental Health Treatment")
        self.assertEqual(inst.url.value, FHIRUri("http://motivemi.com/artifacts/ActivityDefinition/citalopramPrescription").value)
        self.assertEqual(inst.url.as_json(), "http://motivemi.com/artifacts/ActivityDefinition/citalopramPrescription")
        self.assertEqual(inst.usage.value, FHIRString("This activity definition is used as part of various suicide risk order sets").value)
        self.assertEqual(inst.usage.as_json(), "This activity definition is used as part of various suicide risk order sets")
        self.assertEqual(inst.useContext[0].code.code.value, FHIRCode("age").value)
        self.assertEqual(inst.useContext[0].code.code.as_json(), "age")
        self.assertEqual(inst.useContext[0].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[0].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.value, FHIRCode("D000328").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.as_json(), "D000328")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display.value, FHIRString("Adult").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display.as_json(), "Adult")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.value, FHIRUri("https://meshb.nlm.nih.gov").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.as_json(), "https://meshb.nlm.nih.gov")
        self.assertEqual(inst.useContext[1].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[1].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[1].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[1].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code.value, FHIRCode("87512008").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code.as_json(), "87512008")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display.value, FHIRString("Mild major depression").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display.as_json(), "Mild major depression")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[2].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[2].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[2].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[2].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].code.value, FHIRCode("40379007").value)
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].code.as_json(), "40379007")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].display.value, FHIRString("Major depression, recurrent, mild").value)
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].display.as_json(), "Major depression, recurrent, mild")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[3].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[3].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[3].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[3].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].code.value, FHIRCode("225444004").value)
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].code.as_json(), "225444004")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].display.value, FHIRString("At risk for suicide (finding)").value)
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].display.as_json(), "At risk for suicide (finding)")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[4].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[4].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[4].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[4].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].code.value, FHIRCode("306206005").value)
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].code.as_json(), "306206005")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].display.value, FHIRString("Referral to service (procedure)").value)
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].display.as_json(), "Referral to service (procedure)")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[5].code.code.value, FHIRCode("user").value)
        self.assertEqual(inst.useContext[5].code.code.as_json(), "user")
        self.assertEqual(inst.useContext[5].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[5].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].code.value, FHIRCode("309343006").value)
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].code.as_json(), "309343006")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].display.value, FHIRString("Physician").value)
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].display.as_json(), "Physician")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[6].code.code.value, FHIRCode("venue").value)
        self.assertEqual(inst.useContext[6].code.code.as_json(), "venue")
        self.assertEqual(inst.useContext[6].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[6].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].code.value, FHIRCode("440655000").value)
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].code.as_json(), "440655000")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].display.value, FHIRString("Outpatient environment").value)
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].display.as_json(), "Outpatient environment")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.version.value, FHIRString("1.0.0").value)
        self.assertEqual(inst.version.as_json(), "1.0.0")

    def testActivityDefinition4(self):
        inst = self.instantiate_from('activitydefinition-servicerequest-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ActivityDefinition instance')
        self.implActivityDefinition4(inst)

        js = inst.as_json()
        self.assertEqual("ActivityDefinition", js["resourceType"])
        inst2 = activitydefinition.ActivityDefinition(js)
        self.implActivityDefinition4(inst2)

    def implActivityDefinition4(self, inst):
        self.assertEqual(inst.bodySite[0].coding[0].code.value, FHIRCode("17401000").value)
        self.assertEqual(inst.bodySite[0].coding[0].code.as_json(), "17401000")
        self.assertEqual(inst.bodySite[0].coding[0].display.value, FHIRString("Heart valve structure").value)
        self.assertEqual(inst.bodySite[0].coding[0].display.as_json(), "Heart valve structure")
        self.assertEqual(inst.bodySite[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.bodySite[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("34068001").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "34068001")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Heart valve replacement").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Heart valve replacement")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.description.value, FHIRMarkdown("Heart valve replacement").value)
        self.assertEqual(inst.description.as_json(), "Heart valve replacement")
        self.assertEqual(inst.kind.value, FHIRCode("ServiceRequest").value)
        self.assertEqual(inst.kind.as_json(), "ServiceRequest")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.participant[0].role.coding[0].code.value, FHIRCode("207RI0011X").value)
        self.assertEqual(inst.participant[0].role.coding[0].code.as_json(), "207RI0011X")
        self.assertEqual(inst.participant[0].role.coding[0].display.value, FHIRString("Interventional Cardiology").value)
        self.assertEqual(inst.participant[0].role.coding[0].display.as_json(), "Interventional Cardiology")
        self.assertEqual(inst.participant[0].role.coding[0].system.value, FHIRUri("http://nucc.org/provider-taxonomy").value)
        self.assertEqual(inst.participant[0].role.coding[0].system.as_json(), "http://nucc.org/provider-taxonomy")
        self.assertEqual(inst.participant[0].role.text.value, FHIRString("Interventional Cardiology").value)
        self.assertEqual(inst.participant[0].role.text.as_json(), "Interventional Cardiology")
        self.assertEqual(inst.participant[0].type.value, FHIRCode("practitioner").value)
        self.assertEqual(inst.participant[0].type.as_json(), "practitioner")
        self.assertEqual(inst.purpose.value, FHIRMarkdown("Describes the proposal to perform a Heart Valve replacement.").value)
        self.assertEqual(inst.purpose.as_json(), "Describes the proposal to perform a Heart Valve replacement.")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.topic[0].coding[0].code.value, FHIRCode("34068001").value)
        self.assertEqual(inst.topic[0].coding[0].code.as_json(), "34068001")
        self.assertEqual(inst.topic[0].coding[0].display.value, FHIRString("Heart valve replacement").value)
        self.assertEqual(inst.topic[0].coding[0].display.as_json(), "Heart valve replacement")
        self.assertEqual(inst.topic[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.topic[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[0].code.code.value, FHIRCode("age").value)
        self.assertEqual(inst.useContext[0].code.code.as_json(), "age")
        self.assertEqual(inst.useContext[0].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[0].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.value, FHIRCode("D000328").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.as_json(), "D000328")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display.value, FHIRString("Adult").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display.as_json(), "Adult")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.value, FHIRUri("https://meshb.nlm.nih.gov").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.as_json(), "https://meshb.nlm.nih.gov")
        self.assertEqual(inst.useContext[1].code.code.value, FHIRCode("user").value)
        self.assertEqual(inst.useContext[1].code.code.as_json(), "user")
        self.assertEqual(inst.useContext[1].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[1].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code.value, FHIRCode("309343006").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code.as_json(), "309343006")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display.value, FHIRString("Physician").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display.as_json(), "Physician")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")

    def testActivityDefinition5(self):
        inst = self.instantiate_from('activitydefinition-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ActivityDefinition instance')
        self.implActivityDefinition5(inst)

        js = inst.as_json()
        self.assertEqual("ActivityDefinition", js["resourceType"])
        inst2 = activitydefinition.ActivityDefinition(js)
        self.implActivityDefinition5(inst2)

    def implActivityDefinition5(self, inst):
        self.assertEqual(inst.approvalDate.value, FHIRDate("2017-03-01").value)
        self.assertEqual(inst.approvalDate.as_json(), "2017-03-01")
        self.assertEqual(inst.approvalDate.date, FHIRDate('2017-03-01').date)
        self.assertEqual(inst.author[0].name.value, FHIRString("Motive Medical Intelligence").value)
        self.assertEqual(inst.author[0].name.as_json(), "Motive Medical Intelligence")
        self.assertEqual(inst.author[0].telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.author[0].telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.author[0].telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.author[0].telecom[0].use.as_json(), "work")
        self.assertEqual(inst.author[0].telecom[0].value.value, FHIRString("415-362-4007").value)
        self.assertEqual(inst.author[0].telecom[0].value.as_json(), "415-362-4007")
        self.assertEqual(inst.author[0].telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.author[0].telecom[1].system.as_json(), "email")
        self.assertEqual(inst.author[0].telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.author[0].telecom[1].use.as_json(), "work")
        self.assertEqual(inst.author[0].telecom[1].value.value, FHIRString("info@motivemi.com").value)
        self.assertEqual(inst.author[0].telecom[1].value.as_json(), "info@motivemi.com")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("306206005").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "306206005")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.text.value, FHIRString("Referral to service (procedure)").value)
        self.assertEqual(inst.code.text.as_json(), "Referral to service (procedure)")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.contact[0].telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.contact[0].telecom[0].use.as_json(), "work")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("415-362-4007").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "415-362-4007")
        self.assertEqual(inst.contact[0].telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.contact[0].telecom[1].system.as_json(), "email")
        self.assertEqual(inst.contact[0].telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.contact[0].telecom[1].use.as_json(), "work")
        self.assertEqual(inst.contact[0].telecom[1].value.value, FHIRString("info@motivemi.com").value)
        self.assertEqual(inst.contact[0].telecom[1].value.as_json(), "info@motivemi.com")
        self.assertEqual(inst.copyright.value, FHIRMarkdown("© Copyright 2016 Motive Medical Intelligence. All rights reserved.").value)
        self.assertEqual(inst.copyright.as_json(), "© Copyright 2016 Motive Medical Intelligence. All rights reserved.")
        self.assertEqual(inst.date.value, FHIRDateTime("2017-03-03T14:06:00Z").value)
        self.assertEqual(inst.date.as_json(), "2017-03-03T14:06:00Z")
        self.assertEqual(inst.description.value, FHIRMarkdown("refer to primary care mental-health integrated care program for evaluation and treatment of mental health conditions now").value)
        self.assertEqual(inst.description.as_json(), "refer to primary care mental-health integrated care program for evaluation and treatment of mental health conditions now")
        self.assertEqual(inst.effectivePeriod.end.value, FHIRDateTime("2017-12-31").value)
        self.assertEqual(inst.effectivePeriod.end.as_json(), "2017-12-31")
        self.assertEqual(inst.effectivePeriod.start.value, FHIRDateTime("2017-03-01").value)
        self.assertEqual(inst.effectivePeriod.start.as_json(), "2017-03-01")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://motivemi.com/artifacts").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://motivemi.com/artifacts")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("referralPrimaryCareMentalHealth").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "referralPrimaryCareMentalHealth")
        self.assertEqual(inst.jurisdiction[0].coding[0].code.value, FHIRCode("US").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].code.as_json(), "US")
        self.assertEqual(inst.jurisdiction[0].coding[0].system.value, FHIRUri("urn:iso:std:iso:3166").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].system.as_json(), "urn:iso:std:iso:3166")
        self.assertEqual(inst.kind.value, FHIRCode("ServiceRequest").value)
        self.assertEqual(inst.kind.as_json(), "ServiceRequest")
        self.assertEqual(inst.lastReviewDate.value, FHIRDate("2017-03-01").value)
        self.assertEqual(inst.lastReviewDate.as_json(), "2017-03-01")
        self.assertEqual(inst.lastReviewDate.date, FHIRDate('2017-03-01').date)
        self.assertEqual(inst.name.value, FHIRString("ReferralPrimaryCareMentalHealth").value)
        self.assertEqual(inst.name.as_json(), "ReferralPrimaryCareMentalHealth")
        self.assertEqual(inst.participant[0].type.value, FHIRCode("practitioner").value)
        self.assertEqual(inst.participant[0].type.as_json(), "practitioner")
        self.assertEqual(inst.publisher.value, FHIRString("Motive Medical Intelligence").value)
        self.assertEqual(inst.publisher.as_json(), "Motive Medical Intelligence")
        self.assertEqual(inst.relatedArtifact[0].display.value, FHIRString("Practice Guideline for the Treatment of Patients with Major Depressive Disorder").value)
        self.assertEqual(inst.relatedArtifact[0].display.as_json(), "Practice Guideline for the Treatment of Patients with Major Depressive Disorder")
        self.assertEqual(inst.relatedArtifact[0].type.value, FHIRCode("citation").value)
        self.assertEqual(inst.relatedArtifact[0].type.as_json(), "citation")
        self.assertEqual(inst.relatedArtifact[0].url.value, FHIRUrl("http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf").value)
        self.assertEqual(inst.relatedArtifact[0].url.as_json(), "http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf")
        self.assertEqual(inst.relatedArtifact[1].resource.value, FHIRCanonical("ActivityDefinition/referralPrimaryCareMentalHealth-initial").value)
        self.assertEqual(inst.relatedArtifact[1].resource.as_json(), "ActivityDefinition/referralPrimaryCareMentalHealth-initial")
        self.assertEqual(inst.relatedArtifact[1].type.value, FHIRCode("predecessor").value)
        self.assertEqual(inst.relatedArtifact[1].type.as_json(), "predecessor")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Referral to Primary Care Mental Health").value)
        self.assertEqual(inst.title.as_json(), "Referral to Primary Care Mental Health")
        self.assertEqual(inst.topic[0].text.value, FHIRString("Mental Health Referral").value)
        self.assertEqual(inst.topic[0].text.as_json(), "Mental Health Referral")
        self.assertEqual(inst.url.value, FHIRUri("http://motivemi.com/artifacts/ActivityDefinition/referralPrimaryCareMentalHealth").value)
        self.assertEqual(inst.url.as_json(), "http://motivemi.com/artifacts/ActivityDefinition/referralPrimaryCareMentalHealth")
        self.assertEqual(inst.useContext[0].code.code.value, FHIRCode("age").value)
        self.assertEqual(inst.useContext[0].code.code.as_json(), "age")
        self.assertEqual(inst.useContext[0].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[0].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.value, FHIRCode("D000328").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.as_json(), "D000328")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display.value, FHIRString("Adult").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display.as_json(), "Adult")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.value, FHIRUri("https://meshb.nlm.nih.gov").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.as_json(), "https://meshb.nlm.nih.gov")
        self.assertEqual(inst.useContext[1].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[1].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[1].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[1].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code.value, FHIRCode("87512008").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code.as_json(), "87512008")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display.value, FHIRString("Mild major depression").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display.as_json(), "Mild major depression")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[2].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[2].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[2].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[2].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].code.value, FHIRCode("40379007").value)
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].code.as_json(), "40379007")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].display.value, FHIRString("Major depression, recurrent, mild").value)
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].display.as_json(), "Major depression, recurrent, mild")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[3].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[3].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[3].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[3].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].code.value, FHIRCode("225444004").value)
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].code.as_json(), "225444004")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].display.value, FHIRString("At risk for suicide (finding)").value)
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].display.as_json(), "At risk for suicide (finding)")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[4].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[4].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[4].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[4].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].code.value, FHIRCode("306206005").value)
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].code.as_json(), "306206005")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].display.value, FHIRString("Referral to service (procedure)").value)
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].display.as_json(), "Referral to service (procedure)")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[5].code.code.value, FHIRCode("user").value)
        self.assertEqual(inst.useContext[5].code.code.as_json(), "user")
        self.assertEqual(inst.useContext[5].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[5].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].code.value, FHIRCode("309343006").value)
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].code.as_json(), "309343006")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].display.value, FHIRString("Physician").value)
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].display.as_json(), "Physician")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[6].code.code.value, FHIRCode("venue").value)
        self.assertEqual(inst.useContext[6].code.code.as_json(), "venue")
        self.assertEqual(inst.useContext[6].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[6].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].code.value, FHIRCode("440655000").value)
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].code.as_json(), "440655000")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].display.value, FHIRString("Outpatient environment").value)
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].display.as_json(), "Outpatient environment")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.version.value, FHIRString("1.1.0").value)
        self.assertEqual(inst.version.as_json(), "1.1.0")


from fhirclient.models.fhirdatatypes import FHIRCode, FHIRString, FHIRMarkdown, FHIRUri, FHIRCanonical, FHIRDate, FHIRDateTime, FHIRUrl, FHIRPositiveInt