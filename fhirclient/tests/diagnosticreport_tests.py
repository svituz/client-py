#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import diagnosticreport

class DiagnosticReportTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("DiagnosticReport", js["resourceType"])
        return diagnosticreport.DiagnosticReport(js)

    def testDiagnosticReport1(self):
        inst = self.instantiate_from('diagnosticreport-example-dxa.json')
        self.assertIsNotNone(inst, 'Must have instantiated a DiagnosticReport instance')
        self.implDiagnosticReport1(inst)

        js = inst.as_json()
        self.assertEqual("DiagnosticReport", js["resourceType"])
        inst2 = diagnosticreport.DiagnosticReport(js)
        self.implDiagnosticReport1(inst2)

    def implDiagnosticReport1(self, inst):
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("38269-7").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "38269-7")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.code.text.value, FHIRString("DXA BONE DENSITOMETRY").value)
        self.assertEqual(inst.code.text.as_json(), "DXA BONE DENSITOMETRY")
        self.assertEqual(inst.conclusionCode[0].coding[0].code.value, FHIRCode("391040000").value)
        self.assertEqual(inst.conclusionCode[0].coding[0].code.as_json(), "391040000")
        self.assertEqual(inst.conclusionCode[0].coding[0].display.value, FHIRString("At risk of osteoporotic fracture").value)
        self.assertEqual(inst.conclusionCode[0].coding[0].display.as_json(), "At risk of osteoporotic fracture")
        self.assertEqual(inst.conclusionCode[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.conclusionCode[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.effectiveDateTime.value, FHIRDateTime("2008-06-17").value)
        self.assertEqual(inst.effectiveDateTime.as_json(), "2008-06-17")
        self.assertEqual(inst.id.value, FHIRString("102").value)
        self.assertEqual(inst.id.as_json(), "102")
        self.assertEqual(inst.issued.value, FHIRInstant("2008-06-18T09:23:00+10:00").value)
        self.assertEqual(inst.issued.as_json(), "2008-06-18T09:23:00+10:00")
        self.assertEqual(inst.issued.date, FHIRInstant('2008-06-18T09:23:00+10:00').date)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("final").value)
        self.assertEqual(inst.status.as_json(), "final")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testDiagnosticReport2(self):
        inst = self.instantiate_from('diagnosticreport-example-f201-brainct.json')
        self.assertIsNotNone(inst, 'Must have instantiated a DiagnosticReport instance')
        self.implDiagnosticReport2(inst)

        js = inst.as_json()
        self.assertEqual("DiagnosticReport", js["resourceType"])
        inst2 = diagnosticreport.DiagnosticReport(js)
        self.implDiagnosticReport2(inst2)

    def implDiagnosticReport2(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("394914008").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "394914008")
        self.assertEqual(inst.category[0].coding[0].display.value, FHIRString("Radiology").value)
        self.assertEqual(inst.category[0].coding[0].display.as_json(), "Radiology")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.category[0].coding[1].code.value, FHIRCode("RAD").value)
        self.assertEqual(inst.category[0].coding[1].code.as_json(), "RAD")
        self.assertEqual(inst.category[0].coding[1].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0074").value)
        self.assertEqual(inst.category[0].coding[1].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0074")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("429858000").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "429858000")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Computed tomography (CT) of head and neck").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Computed tomography (CT) of head and neck")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.text.value, FHIRString("CT of head-neck").value)
        self.assertEqual(inst.code.text.as_json(), "CT of head-neck")
        self.assertEqual(inst.conclusion.value, FHIRString("CT brains: large tumor sphenoid/clivus.").value)
        self.assertEqual(inst.conclusion.as_json(), "CT brains: large tumor sphenoid/clivus.")
        self.assertEqual(inst.conclusionCode[0].coding[0].code.value, FHIRCode("188340000").value)
        self.assertEqual(inst.conclusionCode[0].coding[0].code.as_json(), "188340000")
        self.assertEqual(inst.conclusionCode[0].coding[0].display.value, FHIRString("Malignant tumor of craniopharyngeal duct").value)
        self.assertEqual(inst.conclusionCode[0].coding[0].display.as_json(), "Malignant tumor of craniopharyngeal duct")
        self.assertEqual(inst.conclusionCode[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.conclusionCode[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.effectiveDateTime.value, FHIRDateTime("2012-12-01T12:00:00+01:00").value)
        self.assertEqual(inst.effectiveDateTime.as_json(), "2012-12-01T12:00:00+01:00")
        self.assertEqual(inst.id.value, FHIRString("f201").value)
        self.assertEqual(inst.id.as_json(), "f201")
        self.assertEqual(inst.issued.value, FHIRInstant("2012-12-01T12:00:00+01:00").value)
        self.assertEqual(inst.issued.as_json(), "2012-12-01T12:00:00+01:00")
        self.assertEqual(inst.issued.date, FHIRInstant('2012-12-01T12:00:00+01:00').date)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("final").value)
        self.assertEqual(inst.status.as_json(), "final")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testDiagnosticReport3(self):
        inst = self.instantiate_from('diagnosticreport-example-ultrasound.json')
        self.assertIsNotNone(inst, 'Must have instantiated a DiagnosticReport instance')
        self.implDiagnosticReport3(inst)

        js = inst.as_json()
        self.assertEqual("DiagnosticReport", js["resourceType"])
        inst2 = diagnosticreport.DiagnosticReport(js)
        self.implDiagnosticReport3(inst2)

    def implDiagnosticReport3(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("394914008").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "394914008")
        self.assertEqual(inst.category[0].coding[0].display.value, FHIRString("Radiology").value)
        self.assertEqual(inst.category[0].coding[0].display.as_json(), "Radiology")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.category[0].coding[1].code.value, FHIRCode("RAD").value)
        self.assertEqual(inst.category[0].coding[1].code.as_json(), "RAD")
        self.assertEqual(inst.category[0].coding[1].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0074").value)
        self.assertEqual(inst.category[0].coding[1].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0074")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("45036003").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "45036003")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Ultrasonography of abdomen").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Ultrasonography of abdomen")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.text.value, FHIRString("Abdominal Ultrasound").value)
        self.assertEqual(inst.code.text.as_json(), "Abdominal Ultrasound")
        self.assertEqual(inst.conclusion.value, FHIRString("Unremarkable study").value)
        self.assertEqual(inst.conclusion.as_json(), "Unremarkable study")
        self.assertEqual(inst.effectiveDateTime.value, FHIRDateTime("2012-12-01T12:00:00+01:00").value)
        self.assertEqual(inst.effectiveDateTime.as_json(), "2012-12-01T12:00:00+01:00")
        self.assertEqual(inst.id.value, FHIRString("ultrasound").value)
        self.assertEqual(inst.id.as_json(), "ultrasound")
        self.assertEqual(inst.issued.value, FHIRInstant("2012-12-01T12:00:00+01:00").value)
        self.assertEqual(inst.issued.as_json(), "2012-12-01T12:00:00+01:00")
        self.assertEqual(inst.issued.date, FHIRInstant('2012-12-01T12:00:00+01:00').date)
        self.assertEqual(inst.media[0].comment.value, FHIRString("A comment about the image").value)
        self.assertEqual(inst.media[0].comment.as_json(), "A comment about the image")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("final").value)
        self.assertEqual(inst.status.as_json(), "final")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testDiagnosticReport4(self):
        inst = self.instantiate_from('diagnosticreport-example-pgx.json')
        self.assertIsNotNone(inst, 'Must have instantiated a DiagnosticReport instance')
        self.implDiagnosticReport4(inst)

        js = inst.as_json()
        self.assertEqual("DiagnosticReport", js["resourceType"])
        inst2 = diagnosticreport.DiagnosticReport(js)
        self.implDiagnosticReport4(inst2)

    def implDiagnosticReport4(self, inst):
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("PGxReport").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "PGxReport")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Pharmacogenetics Report").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Pharmacogenetics Report")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("https://system/PGxReport").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "https://system/PGxReport")
        self.assertEqual(inst.code.text.value, FHIRString("Pharmacogenetics Report").value)
        self.assertEqual(inst.code.text.as_json(), "Pharmacogenetics Report")
        self.assertEqual(inst.effectiveDateTime.value, FHIRDateTime("2016-10-15T12:34:56+11:00").value)
        self.assertEqual(inst.effectiveDateTime.as_json(), "2016-10-15T12:34:56+11:00")
        self.assertEqual(inst.id.value, FHIRString("example-pgx").value)
        self.assertEqual(inst.id.as_json(), "example-pgx")
        self.assertEqual(inst.issued.value, FHIRInstant("2016-10-20T14:00:05+11:00").value)
        self.assertEqual(inst.issued.as_json(), "2016-10-20T14:00:05+11:00")
        self.assertEqual(inst.issued.date, FHIRInstant('2016-10-20T14:00:05+11:00').date)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.presentedForm[0].contentType.value, FHIRCode("application/pdf").value)
        self.assertEqual(inst.presentedForm[0].contentType.as_json(), "application/pdf")
        self.assertEqual(inst.presentedForm[0].creation.value, FHIRDateTime("2016-10-20T20:00:00+11:00").value)
        self.assertEqual(inst.presentedForm[0].creation.as_json(), "2016-10-20T20:00:00+11:00")
        self.assertEqual(inst.presentedForm[0].data.value, FHIRBase64Binary("cGRmSW5CYXNlNjRCaW5hcnk=").value)
        self.assertEqual(inst.presentedForm[0].data.as_json(), "cGRmSW5CYXNlNjRCaW5hcnk=")
        self.assertEqual(inst.presentedForm[0].hash.value, FHIRBase64Binary("571ef9c5655840f324e679072ed62b1b95eef8a0").value)
        self.assertEqual(inst.presentedForm[0].hash.as_json(), "571ef9c5655840f324e679072ed62b1b95eef8a0")
        self.assertEqual(inst.presentedForm[0].language.value, FHIRCode("en").value)
        self.assertEqual(inst.presentedForm[0].language.as_json(), "en")
        self.assertEqual(inst.presentedForm[0].title.value, FHIRString("Pharmacogenetics Report").value)
        self.assertEqual(inst.presentedForm[0].title.as_json(), "Pharmacogenetics Report")
        self.assertEqual(inst.status.value, FHIRCode("final").value)
        self.assertEqual(inst.status.as_json(), "final")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testDiagnosticReport5(self):
        inst = self.instantiate_from('diagnosticreport-example-papsmear.json')
        self.assertIsNotNone(inst, 'Must have instantiated a DiagnosticReport instance')
        self.implDiagnosticReport5(inst)

        js = inst.as_json()
        self.assertEqual("DiagnosticReport", js["resourceType"])
        inst2 = diagnosticreport.DiagnosticReport(js)
        self.implDiagnosticReport5(inst2)

    def implDiagnosticReport5(self, inst):
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("47527-7").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "47527-7")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.effectiveDateTime.value, FHIRDateTime("2013-02-11T10:33:33+11:00").value)
        self.assertEqual(inst.effectiveDateTime.as_json(), "2013-02-11T10:33:33+11:00")
        self.assertEqual(inst.id.value, FHIRString("pap").value)
        self.assertEqual(inst.id.as_json(), "pap")
        self.assertEqual(inst.issued.value, FHIRInstant("2013-02-13T11:45:33+11:00").value)
        self.assertEqual(inst.issued.as_json(), "2013-02-13T11:45:33+11:00")
        self.assertEqual(inst.issued.date, FHIRInstant('2013-02-13T11:45:33+11:00').date)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("final").value)
        self.assertEqual(inst.status.as_json(), "final")
        self.assertEqual(inst.text.status.value, FHIRCode("additional").value)
        self.assertEqual(inst.text.status.as_json(), "additional")

    def testDiagnosticReport6(self):
        inst = self.instantiate_from('diagnosticreport-example-gingival-mass.json')
        self.assertIsNotNone(inst, 'Must have instantiated a DiagnosticReport instance')
        self.implDiagnosticReport6(inst)

        js = inst.as_json()
        self.assertEqual("DiagnosticReport", js["resourceType"])
        inst2 = diagnosticreport.DiagnosticReport(js)
        self.implDiagnosticReport6(inst2)

    def implDiagnosticReport6(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("PAT").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "PAT")
        self.assertEqual(inst.category[0].coding[0].display.value, FHIRString("Pathology (gross & histopath, not surgical)").value)
        self.assertEqual(inst.category[0].coding[0].display.as_json(), "Pathology (gross & histopath, not surgical)")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0074").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0074")
        self.assertEqual(inst.category[0].text.value, FHIRString("Pathology").value)
        self.assertEqual(inst.category[0].text.as_json(), "Pathology")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("4503").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "4503")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Biopsy without Microscopic Description (1 Site/Lesion)-Standard").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Biopsy without Microscopic Description (1 Site/Lesion)-Standard")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("https://www.acmeonline.com").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "https://www.acmeonline.com")
        self.assertEqual(inst.code.text.value, FHIRString("Biopsy without Microscopic Description (1 Site/Lesion)-Standard").value)
        self.assertEqual(inst.code.text.as_json(), "Biopsy without Microscopic Description (1 Site/Lesion)-Standard")
        self.assertEqual(inst.effectiveDateTime.value, FHIRDateTime("2017-03-02").value)
        self.assertEqual(inst.effectiveDateTime.as_json(), "2017-03-02")
        self.assertEqual(inst.id.value, FHIRString("gingival-mass").value)
        self.assertEqual(inst.id.as_json(), "gingival-mass")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("https://www.acmeonline.com").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "https://www.acmeonline.com")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("P73456090").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "P73456090")
        self.assertEqual(inst.issued.value, FHIRInstant("2017-03-15T08:13:08Z").value)
        self.assertEqual(inst.issued.as_json(), "2017-03-15T08:13:08Z")
        self.assertEqual(inst.issued.date, FHIRInstant('2017-03-15T08:13:08Z').date)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.presentedForm[0].contentType.value, FHIRCode("application/pdf").value)
        self.assertEqual(inst.presentedForm[0].contentType.as_json(), "application/pdf")
        self.assertEqual(inst.presentedForm[0].language.value, FHIRCode("en").value)
        self.assertEqual(inst.presentedForm[0].language.as_json(), "en")
        self.assertEqual(inst.presentedForm[0].title.value, FHIRString("LAB ID: P73456090 MAX JONES Biopsy without Microscopic Description (1 Site/Lesion)-Standard").value)
        self.assertEqual(inst.presentedForm[0].title.as_json(), "LAB ID: P73456090 MAX JONES Biopsy without Microscopic Description (1 Site/Lesion)-Standard")
        self.assertEqual(inst.status.value, FHIRCode("final").value)
        self.assertEqual(inst.status.as_json(), "final")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")


from fhirclient.models.fhirdatatypes import FHIRCode, FHIRUri, FHIRString, FHIRDateTime, FHIRInstant, FHIRBase64Binary