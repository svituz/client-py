#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import measurereport

class MeasureReportTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("MeasureReport", js["resourceType"])
        return measurereport.MeasureReport(js)

    def testMeasureReport1(self):
        inst = self.instantiate_from('measurereport-cms146-cat3-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a MeasureReport instance')
        self.implMeasureReport1(inst)

        js = inst.as_json()
        self.assertEqual("MeasureReport", js["resourceType"])
        inst2 = measurereport.MeasureReport(js)
        self.implMeasureReport1(inst2)

    def implMeasureReport1(self, inst):
        self.assertEqual(inst.contained[0].id.value, FHIRString("reporter").value)
        self.assertEqual(inst.contained[0].id.as_json(), "reporter")
        self.assertEqual(inst.date.value, FHIRDateTime("2014-04-01").value)
        self.assertEqual(inst.date.as_json(), "2014-04-01")
        self.assertEqual(inst.group[0].id.value, FHIRString("CMS146-group-1").value)
        self.assertEqual(inst.group[0].id.as_json(), "CMS146-group-1")
        self.assertEqual(inst.group[0].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].population[0].count, 500)
        self.assertEqual(inst.group[0].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].population[1].count, 200)
        self.assertEqual(inst.group[0].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].population[2].count, 500)
        self.assertEqual(inst.group[0].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].population[3].count, 100)
        self.assertEqual(inst.group[0].stratifier[0].code[0].text.value, FHIRString("stratifier-ages-up-to-9").value)
        self.assertEqual(inst.group[0].stratifier[0].code[0].text.as_json(), "stratifier-ages-up-to-9")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].count, 250)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].count, 100)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].count, 250)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].count, 50)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].value.text.value, FHIRString("true").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].value.text.as_json(), "true")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].count, 250)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].count, 100)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].count, 250)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].count, 50)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].value.text.value, FHIRString("false").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].value.text.as_json(), "false")
        self.assertEqual(inst.group[0].stratifier[1].code[0].text.value, FHIRString("stratifier-ages-10-plus").value)
        self.assertEqual(inst.group[0].stratifier[1].code[0].text.as_json(), "stratifier-ages-10-plus")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].count, 250)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].count, 100)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].count, 250)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].count, 50)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].value.text.value, FHIRString("true").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].value.text.as_json(), "true")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].count, 250)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].count, 100)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].count, 250)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].count, 50)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].value.text.value, FHIRString("false").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].value.text.as_json(), "false")
        self.assertEqual(inst.group[0].stratifier[2].code[0].text.value, FHIRString("stratifier-gender").value)
        self.assertEqual(inst.group[0].stratifier[2].code[0].text.as_json(), "stratifier-gender")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].count, 250)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].count, 100)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].count, 250)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].count, 50)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].value.text.value, FHIRString("male").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].value.text.as_json(), "male")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].count, 250)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].count, 100)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].count, 250)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].count, 50)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].value.text.value, FHIRString("female").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].value.text.as_json(), "female")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].value.text.value, FHIRString("other").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].value.text.as_json(), "other")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].value.text.value, FHIRString("unknown").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].value.text.as_json(), "unknown")
        self.assertEqual(inst.id.value, FHIRString("measurereport-cms146-cat3-example").value)
        self.assertEqual(inst.id.as_json(), "measurereport-cms146-cat3-example")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("measurereport-cms146-cat3-example-2017-03-13").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "measurereport-cms146-cat3-example-2017-03-13")
        self.assertEqual(inst.measure.value, FHIRCanonical("Measure/CMS146").value)
        self.assertEqual(inst.measure.as_json(), "Measure/CMS146")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.period.end.value, FHIRDateTime("2014-03-31").value)
        self.assertEqual(inst.period.end.as_json(), "2014-03-31")
        self.assertEqual(inst.period.start.value, FHIRDateTime("2014-01-01").value)
        self.assertEqual(inst.period.start.as_json(), "2014-01-01")
        self.assertEqual(inst.status.value, FHIRCode("complete").value)
        self.assertEqual(inst.status.as_json(), "complete")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("summary").value)
        self.assertEqual(inst.type.as_json(), "summary")

    def testMeasureReport2(self):
        inst = self.instantiate_from('measurereport-cms146-cat2-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a MeasureReport instance')
        self.implMeasureReport2(inst)

        js = inst.as_json()
        self.assertEqual("MeasureReport", js["resourceType"])
        inst2 = measurereport.MeasureReport(js)
        self.implMeasureReport2(inst2)

    def implMeasureReport2(self, inst):
        self.assertEqual(inst.contained[0].id.value, FHIRString("reporter").value)
        self.assertEqual(inst.contained[0].id.as_json(), "reporter")
        self.assertEqual(inst.date.value, FHIRDateTime("2014-04-01").value)
        self.assertEqual(inst.date.as_json(), "2014-04-01")
        self.assertEqual(inst.group[0].id.value, FHIRString("CMS146-group-1").value)
        self.assertEqual(inst.group[0].id.as_json(), "CMS146-group-1")
        self.assertEqual(inst.group[0].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].population[0].count, 500)
        self.assertEqual(inst.group[0].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].population[1].count, 200)
        self.assertEqual(inst.group[0].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].population[2].count, 500)
        self.assertEqual(inst.group[0].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].population[3].count, 100)
        self.assertEqual(inst.group[0].stratifier[0].code[0].text.value, FHIRString("stratifier-ages-up-to-9").value)
        self.assertEqual(inst.group[0].stratifier[0].code[0].text.as_json(), "stratifier-ages-up-to-9")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].count, 250)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].count, 100)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].count, 250)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].count, 50)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].value.text.value, FHIRString("true").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].value.text.as_json(), "true")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].count, 250)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].count, 100)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].count, 250)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].count, 50)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].value.text.value, FHIRString("false").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].value.text.as_json(), "false")
        self.assertEqual(inst.group[0].stratifier[1].code[0].text.value, FHIRString("stratifier-ages-10-plus").value)
        self.assertEqual(inst.group[0].stratifier[1].code[0].text.as_json(), "stratifier-ages-10-plus")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].count, 250)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].count, 100)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].count, 250)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].count, 50)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].value.text.value, FHIRString("true").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].value.text.as_json(), "true")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].count, 250)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].count, 100)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].count, 250)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].count, 50)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].value.text.value, FHIRString("false").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].value.text.as_json(), "false")
        self.assertEqual(inst.group[0].stratifier[2].code[0].text.value, FHIRString("stratifier-gender").value)
        self.assertEqual(inst.group[0].stratifier[2].code[0].text.as_json(), "stratifier-gender")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].count, 250)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].count, 100)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].count, 250)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].count, 50)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].value.text.value, FHIRString("male").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].value.text.as_json(), "male")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].count, 250)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].count, 100)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].count, 250)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].count, 50)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].value.text.value, FHIRString("female").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].value.text.as_json(), "female")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].value.text.value, FHIRString("other").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].value.text.as_json(), "other")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusions").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].code.coding[0].code.as_json(), "denominator-exclusions")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].value.text.value, FHIRString("unknown").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].value.text.as_json(), "unknown")
        self.assertEqual(inst.id.value, FHIRString("measurereport-cms146-cat2-example").value)
        self.assertEqual(inst.id.as_json(), "measurereport-cms146-cat2-example")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("measurereport-cms146-cat2-example-2017-03-13").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "measurereport-cms146-cat2-example-2017-03-13")
        self.assertEqual(inst.measure.value, FHIRCanonical("Measure/CMS146").value)
        self.assertEqual(inst.measure.as_json(), "Measure/CMS146")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.period.end.value, FHIRDateTime("2014-03-31").value)
        self.assertEqual(inst.period.end.as_json(), "2014-03-31")
        self.assertEqual(inst.period.start.value, FHIRDateTime("2014-01-01").value)
        self.assertEqual(inst.period.start.as_json(), "2014-01-01")
        self.assertEqual(inst.status.value, FHIRCode("complete").value)
        self.assertEqual(inst.status.as_json(), "complete")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("subject-list").value)
        self.assertEqual(inst.type.as_json(), "subject-list")

    def testMeasureReport3(self):
        inst = self.instantiate_from('measurereport-cms146-cat1-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a MeasureReport instance')
        self.implMeasureReport3(inst)

        js = inst.as_json()
        self.assertEqual("MeasureReport", js["resourceType"])
        inst2 = measurereport.MeasureReport(js)
        self.implMeasureReport3(inst2)

    def implMeasureReport3(self, inst):
        self.assertEqual(inst.contained[0].id.value, FHIRString("reporter").value)
        self.assertEqual(inst.contained[0].id.as_json(), "reporter")
        self.assertEqual(inst.date.value, FHIRDateTime("2014-04-01").value)
        self.assertEqual(inst.date.as_json(), "2014-04-01")
        self.assertEqual(inst.group[0].id.value, FHIRString("CMS146-group-1").value)
        self.assertEqual(inst.group[0].id.as_json(), "CMS146-group-1")
        self.assertEqual(inst.group[0].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].population[0].count, 1)
        self.assertEqual(inst.group[0].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].population[1].count, 1)
        self.assertEqual(inst.group[0].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].population[2].count, 1)
        self.assertEqual(inst.group[0].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].population[3].count, 0)
        self.assertEqual(inst.group[0].stratifier[0].code[0].text.value, FHIRString("stratifier-ages-up-to-9").value)
        self.assertEqual(inst.group[0].stratifier[0].code[0].text.as_json(), "stratifier-ages-up-to-9")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].count, 1)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].count, 1)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].count, 1)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].count, 0)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].value.text.value, FHIRString("true").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[0].value.text.as_json(), "true")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].count, 0)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].count, 0)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].count, 0)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].count, 0)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].value.text.value, FHIRString("false").value)
        self.assertEqual(inst.group[0].stratifier[0].stratum[1].value.text.as_json(), "false")
        self.assertEqual(inst.group[0].stratifier[1].code[0].text.value, FHIRString("stratifier-ages-10-plus").value)
        self.assertEqual(inst.group[0].stratifier[1].code[0].text.as_json(), "stratifier-ages-10-plus")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].count, 0)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].count, 0)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].count, 0)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].count, 0)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].value.text.value, FHIRString("true").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[0].value.text.as_json(), "true")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].count, 1)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].count, 1)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].count, 1)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].count, 0)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].value.text.value, FHIRString("false").value)
        self.assertEqual(inst.group[0].stratifier[1].stratum[1].value.text.as_json(), "false")
        self.assertEqual(inst.group[0].stratifier[2].code[0].text.value, FHIRString("stratifier-gender").value)
        self.assertEqual(inst.group[0].stratifier[2].code[0].text.as_json(), "stratifier-gender")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].count, 1)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].count, 1)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].count, 1)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].value.text.value, FHIRString("male").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[0].value.text.as_json(), "male")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].value.text.value, FHIRString("female").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[1].value.text.as_json(), "female")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].value.text.value, FHIRString("other").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[2].value.text.as_json(), "other")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].code.coding[0].code.value, FHIRCode("initial-population").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].code.coding[0].code.as_json(), "initial-population")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].code.coding[0].code.value, FHIRCode("numerator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].code.coding[0].code.as_json(), "numerator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].code.coding[0].code.value, FHIRCode("denominator").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].code.coding[0].code.as_json(), "denominator")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].code.coding[0].code.value, FHIRCode("denominator-exclusion").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].code.coding[0].code.as_json(), "denominator-exclusion")
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].count, 0)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].value.text.value, FHIRString("unknown").value)
        self.assertEqual(inst.group[0].stratifier[2].stratum[3].value.text.as_json(), "unknown")
        self.assertEqual(inst.id.value, FHIRString("measurereport-cms146-cat1-example").value)
        self.assertEqual(inst.id.as_json(), "measurereport-cms146-cat1-example")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("measurereport-cms146-cat1-example-2017-03-13").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "measurereport-cms146-cat1-example-2017-03-13")
        self.assertEqual(inst.measure.value, FHIRCanonical("Measure/CMS146").value)
        self.assertEqual(inst.measure.as_json(), "Measure/CMS146")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.period.end.value, FHIRDateTime("2014-03-31").value)
        self.assertEqual(inst.period.end.as_json(), "2014-03-31")
        self.assertEqual(inst.period.start.value, FHIRDateTime("2014-01-01").value)
        self.assertEqual(inst.period.start.as_json(), "2014-01-01")
        self.assertEqual(inst.status.value, FHIRCode("complete").value)
        self.assertEqual(inst.status.as_json(), "complete")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("individual").value)
        self.assertEqual(inst.type.as_json(), "individual")


from fhirclient.models.fhirdatatypes import FHIRString, FHIRDateTime, FHIRCode, FHIRCanonical, FHIRUri