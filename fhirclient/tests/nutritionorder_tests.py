#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import nutritionorder

class NutritionOrderTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("NutritionOrder", js["resourceType"])
        return nutritionorder.NutritionOrder(js)

    def testNutritionOrder1(self):
        inst = self.instantiate_from('nutritionorder-example-pureeddiet-simple.json')
        self.assertIsNotNone(inst, 'Must have instantiated a NutritionOrder instance')
        self.implNutritionOrder1(inst)

        js = inst.as_json()
        self.assertEqual("NutritionOrder", js["resourceType"])
        inst2 = nutritionorder.NutritionOrder(js)
        self.implNutritionOrder1(inst2)

    def implNutritionOrder1(self, inst):
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2014-09-17").value)
        self.assertEqual(inst.dateTime.as_json(), "2014-09-17")
        self.assertEqual(inst.id.value, FHIRString("pureeddiet-simple").value)
        self.assertEqual(inst.id.as_json(), "pureeddiet-simple")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://goodhealthhospital.org/nutrition-requests").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://goodhealthhospital.org/nutrition-requests")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("123").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "123")
        self.assertEqual(inst.intent.value, FHIRCode("order").value)
        self.assertEqual(inst.intent.as_json(), "order")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].code.value, FHIRCode("439021000124105").value)
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].code.as_json(), "439021000124105")
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].display.value, FHIRString("Dietary liquid consistency - nectar thick liquid").value)
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].display.as_json(), "Dietary liquid consistency - nectar thick liquid")
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].text.value, FHIRString("Nectar thick liquids").value)
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].text.as_json(), "Nectar thick liquids")
        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.value, FHIRDateTime("2015-02-10").value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.as_json(), "2015-02-10")
        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency.as_json(), 3)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.period, 1)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit.value, FHIRCode("d").value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit.as_json(), "d")
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].code.value, FHIRCode("228055009").value)
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].code.as_json(), "228055009")
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].display.value, FHIRString("Liquidized food").value)
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].display.as_json(), "Liquidized food")
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.texture[0].modifier.text.value, FHIRString("Pureed").value)
        self.assertEqual(inst.oralDiet.texture[0].modifier.text.as_json(), "Pureed")
        self.assertEqual(inst.oralDiet.type[0].coding[0].code.value, FHIRCode("226211001").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].code.as_json(), "226211001")
        self.assertEqual(inst.oralDiet.type[0].coding[0].display.value, FHIRString("Pureed diet").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].display.as_json(), "Pureed diet")
        self.assertEqual(inst.oralDiet.type[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.type[0].coding[1].code.value, FHIRCode("1010").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].code.as_json(), "1010")
        self.assertEqual(inst.oralDiet.type[0].coding[1].display.value, FHIRString("Pureed diet").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].display.as_json(), "Pureed diet")
        self.assertEqual(inst.oralDiet.type[0].coding[1].system.value, FHIRUri("http://goodhealthhospital.org/diet-type-codes").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].system.as_json(), "http://goodhealthhospital.org/diet-type-codes")
        self.assertEqual(inst.oralDiet.type[0].text.value, FHIRString("Pureed diet").value)
        self.assertEqual(inst.oralDiet.type[0].text.as_json(), "Pureed diet")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.supplement[0].instruction.value, FHIRString("Ensure Pudding at breakfast, lunch, supper").value)
        self.assertEqual(inst.supplement[0].instruction.as_json(), "Ensure Pudding at breakfast, lunch, supper")
        self.assertEqual(inst.supplement[0].productName.value, FHIRString("Ensure Pudding 4 oz container").value)
        self.assertEqual(inst.supplement[0].productName.as_json(), "Ensure Pudding 4 oz container")
        self.assertEqual(inst.supplement[0].type.coding[0].code.value, FHIRCode("442971000124100").value)
        self.assertEqual(inst.supplement[0].type.coding[0].code.as_json(), "442971000124100")
        self.assertEqual(inst.supplement[0].type.coding[0].display.value, FHIRString("Adult high energy formula").value)
        self.assertEqual(inst.supplement[0].type.coding[0].display.as_json(), "Adult high energy formula")
        self.assertEqual(inst.supplement[0].type.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.supplement[0].type.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.supplement[0].type.coding[1].code.value, FHIRCode("1040").value)
        self.assertEqual(inst.supplement[0].type.coding[1].code.as_json(), "1040")
        self.assertEqual(inst.supplement[0].type.coding[1].display.value, FHIRString("Adult high energy pudding").value)
        self.assertEqual(inst.supplement[0].type.coding[1].display.as_json(), "Adult high energy pudding")
        self.assertEqual(inst.supplement[0].type.coding[1].system.value, FHIRUri("http://goodhealthhospital.org/supplement-type-codes").value)
        self.assertEqual(inst.supplement[0].type.coding[1].system.as_json(), "http://goodhealthhospital.org/supplement-type-codes")
        self.assertEqual(inst.supplement[0].type.text.value, FHIRString("Adult high energy pudding").value)
        self.assertEqual(inst.supplement[0].type.text.as_json(), "Adult high energy pudding")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testNutritionOrder2(self):
        inst = self.instantiate_from('nutritionorder-example-proteinsupplement.json')
        self.assertIsNotNone(inst, 'Must have instantiated a NutritionOrder instance')
        self.implNutritionOrder2(inst)

        js = inst.as_json()
        self.assertEqual("NutritionOrder", js["resourceType"])
        inst2 = nutritionorder.NutritionOrder(js)
        self.implNutritionOrder2(inst2)

    def implNutritionOrder2(self, inst):
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2014-09-17").value)
        self.assertEqual(inst.dateTime.as_json(), "2014-09-17")
        self.assertEqual(inst.id.value, FHIRString("proteinsupplement").value)
        self.assertEqual(inst.id.as_json(), "proteinsupplement")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://goodhealthhospital.org/nutrition-requests").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://goodhealthhospital.org/nutrition-requests")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("123").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "123")
        self.assertEqual(inst.intent.value, FHIRCode("order").value)
        self.assertEqual(inst.intent.as_json(), "order")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.supplement[0].instruction.value, FHIRString("Beneprotein 1 scoop TID with meal.starting on  2015-02-10").value)
        self.assertEqual(inst.supplement[0].instruction.as_json(), "Beneprotein 1 scoop TID with meal.starting on  2015-02-10")
        self.assertEqual(inst.supplement[0].productName.value, FHIRString("Beneprotein").value)
        self.assertEqual(inst.supplement[0].productName.as_json(), "Beneprotein")
        self.assertEqual(inst.supplement[0].quantity.code.value, FHIRCode("{scoop}").value)
        self.assertEqual(inst.supplement[0].quantity.code.as_json(), "{scoop}")
        self.assertEqual(inst.supplement[0].quantity.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.supplement[0].quantity.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.supplement[0].quantity.unit.value, FHIRString("scoop").value)
        self.assertEqual(inst.supplement[0].quantity.unit.as_json(), "scoop")
        self.assertEqual(inst.supplement[0].quantity.value, 1)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.boundsPeriod.start.value, FHIRDateTime("2015-02-10").value)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.boundsPeriod.start.as_json(), "2015-02-10")
        self.assertEqual(inst.supplement[0].schedule[0].repeat.when[0].value, FHIRCode("C").value)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.when[0].as_json(), "C")
        self.assertEqual(inst.supplement[0].type.coding[0].code.value, FHIRCode("442991000124104").value)
        self.assertEqual(inst.supplement[0].type.coding[0].code.as_json(), "442991000124104")
        self.assertEqual(inst.supplement[0].type.coding[0].display.value, FHIRString("Adult high protein formula").value)
        self.assertEqual(inst.supplement[0].type.coding[0].display.as_json(), "Adult high protein formula")
        self.assertEqual(inst.supplement[0].type.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.supplement[0].type.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.supplement[0].type.coding[1].code.value, FHIRCode("1000").value)
        self.assertEqual(inst.supplement[0].type.coding[1].code.as_json(), "1000")
        self.assertEqual(inst.supplement[0].type.coding[1].display.value, FHIRString("High Protein Powder").value)
        self.assertEqual(inst.supplement[0].type.coding[1].display.as_json(), "High Protein Powder")
        self.assertEqual(inst.supplement[0].type.coding[1].system.value, FHIRUri("http://goodhealthhospital.org/supplement-type-codes").value)
        self.assertEqual(inst.supplement[0].type.coding[1].system.as_json(), "http://goodhealthhospital.org/supplement-type-codes")
        self.assertEqual(inst.supplement[0].type.text.value, FHIRString("High Protein Powder").value)
        self.assertEqual(inst.supplement[0].type.text.as_json(), "High Protein Powder")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testNutritionOrder3(self):
        inst = self.instantiate_from('nutritionorder-example-pureeddiet.json')
        self.assertIsNotNone(inst, 'Must have instantiated a NutritionOrder instance')
        self.implNutritionOrder3(inst)

        js = inst.as_json()
        self.assertEqual("NutritionOrder", js["resourceType"])
        inst2 = nutritionorder.NutritionOrder(js)
        self.implNutritionOrder3(inst2)

    def implNutritionOrder3(self, inst):
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2014-09-17").value)
        self.assertEqual(inst.dateTime.as_json(), "2014-09-17")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code.value, FHIRCode("227493005").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code.as_json(), "227493005")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display.value, FHIRString("Cashew Nut").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display.as_json(), "Cashew Nut")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version.value, FHIRString("20140730").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version.as_json(), "20140730")
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code.value, FHIRCode("dairy-free").value)
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code.as_json(), "dairy-free")
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/diet").value)
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/diet")
        self.assertEqual(inst.id.value, FHIRString("pureeddiet").value)
        self.assertEqual(inst.id.as_json(), "pureeddiet")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://goodhealthhospital.org/nutrition-requests").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://goodhealthhospital.org/nutrition-requests")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("123").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "123")
        self.assertEqual(inst.intent.value, FHIRCode("order").value)
        self.assertEqual(inst.intent.as_json(), "order")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].code.value, FHIRCode("439021000124105").value)
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].code.as_json(), "439021000124105")
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].display.value, FHIRString("Dietary liquid consistency - nectar thick liquid").value)
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].display.as_json(), "Dietary liquid consistency - nectar thick liquid")
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].text.value, FHIRString("Nectar thick liquids").value)
        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].text.as_json(), "Nectar thick liquids")
        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.value, FHIRDateTime("2015-02-10").value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.as_json(), "2015-02-10")
        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency.as_json(), 3)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.period, 1)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit.value, FHIRCode("d").value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit.as_json(), "d")
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].code.value, FHIRCode("228055009").value)
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].code.as_json(), "228055009")
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].display.value, FHIRString("Liquidized food").value)
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].display.as_json(), "Liquidized food")
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.texture[0].modifier.text.value, FHIRString("Pureed").value)
        self.assertEqual(inst.oralDiet.texture[0].modifier.text.as_json(), "Pureed")
        self.assertEqual(inst.oralDiet.type[0].coding[0].code.value, FHIRCode("226211001").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].code.as_json(), "226211001")
        self.assertEqual(inst.oralDiet.type[0].coding[0].display.value, FHIRString("Pureed diet").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].display.as_json(), "Pureed diet")
        self.assertEqual(inst.oralDiet.type[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.type[0].coding[1].code.value, FHIRCode("1010").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].code.as_json(), "1010")
        self.assertEqual(inst.oralDiet.type[0].coding[1].display.value, FHIRString("Pureed diet").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].display.as_json(), "Pureed diet")
        self.assertEqual(inst.oralDiet.type[0].coding[1].system.value, FHIRUri("http://goodhealthhospital.org/diet-type-codes").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].system.as_json(), "http://goodhealthhospital.org/diet-type-codes")
        self.assertEqual(inst.oralDiet.type[0].text.value, FHIRString("Pureed diet").value)
        self.assertEqual(inst.oralDiet.type[0].text.as_json(), "Pureed diet")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testNutritionOrder4(self):
        inst = self.instantiate_from('nutritionorder-example-infantenteral.json')
        self.assertIsNotNone(inst, 'Must have instantiated a NutritionOrder instance')
        self.implNutritionOrder4(inst)

        js = inst.as_json()
        self.assertEqual("NutritionOrder", js["resourceType"])
        inst2 = nutritionorder.NutritionOrder(js)
        self.implNutritionOrder4(inst2)

    def implNutritionOrder4(self, inst):
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2014-09-17").value)
        self.assertEqual(inst.dateTime.as_json(), "2014-09-17")
        self.assertEqual(inst.enteralFormula.additiveProductName.value, FHIRString("Acme High Carbohydrate Additive").value)
        self.assertEqual(inst.enteralFormula.additiveProductName.as_json(), "Acme High Carbohydrate Additive")
        self.assertEqual(inst.enteralFormula.additiveType.coding[0].code.value, FHIRCode("carbohydrate").value)
        self.assertEqual(inst.enteralFormula.additiveType.coding[0].code.as_json(), "carbohydrate")
        self.assertEqual(inst.enteralFormula.additiveType.coding[0].display.value, FHIRString("Carbohydrate").value)
        self.assertEqual(inst.enteralFormula.additiveType.coding[0].display.as_json(), "Carbohydrate")
        self.assertEqual(inst.enteralFormula.additiveType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/entformula-additive").value)
        self.assertEqual(inst.enteralFormula.additiveType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/entformula-additive")
        self.assertEqual(inst.enteralFormula.administrationInstruction.value, FHIRString("Add high calorie high carbohydrate additive to increase cal/oz from 24 cal/oz to 27 cal/oz.").value)
        self.assertEqual(inst.enteralFormula.administrationInstruction.as_json(), "Add high calorie high carbohydrate additive to increase cal/oz from 24 cal/oz to 27 cal/oz.")
        self.assertEqual(inst.enteralFormula.administration[0].quantity.code.value, FHIRCode("[foz_us]").value)
        self.assertEqual(inst.enteralFormula.administration[0].quantity.code.as_json(), "[foz_us]")
        self.assertEqual(inst.enteralFormula.administration[0].quantity.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.enteralFormula.administration[0].quantity.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.enteralFormula.administration[0].quantity.unit.value, FHIRString("ounces").value)
        self.assertEqual(inst.enteralFormula.administration[0].quantity.unit.as_json(), "ounces")
        self.assertEqual(inst.enteralFormula.administration[0].quantity.value, 4)
        self.assertEqual(inst.enteralFormula.administration[0].schedule.repeat.boundsPeriod.start.value, FHIRDateTime("2014-09-17").value)
        self.assertEqual(inst.enteralFormula.administration[0].schedule.repeat.boundsPeriod.start.as_json(), "2014-09-17")
        self.assertEqual(inst.enteralFormula.administration[0].schedule.repeat.frequency.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.enteralFormula.administration[0].schedule.repeat.frequency.as_json(), 1)
        self.assertEqual(inst.enteralFormula.administration[0].schedule.repeat.period, 3)
        self.assertEqual(inst.enteralFormula.administration[0].schedule.repeat.periodUnit.value, FHIRCode("h").value)
        self.assertEqual(inst.enteralFormula.administration[0].schedule.repeat.periodUnit.as_json(), "h")
        self.assertEqual(inst.enteralFormula.baseFormulaProductName.value, FHIRString("Acme Infant Formula + Iron").value)
        self.assertEqual(inst.enteralFormula.baseFormulaProductName.as_json(), "Acme Infant Formula + Iron")
        self.assertEqual(inst.enteralFormula.baseFormulaType.coding[0].code.value, FHIRCode("412414007").value)
        self.assertEqual(inst.enteralFormula.baseFormulaType.coding[0].code.as_json(), "412414007")
        self.assertEqual(inst.enteralFormula.baseFormulaType.coding[0].display.value, FHIRString("infant formula + iron").value)
        self.assertEqual(inst.enteralFormula.baseFormulaType.coding[0].display.as_json(), "infant formula + iron")
        self.assertEqual(inst.enteralFormula.baseFormulaType.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.enteralFormula.baseFormulaType.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.enteralFormula.caloricDensity.code.value, FHIRCode("cal/[foz_us]").value)
        self.assertEqual(inst.enteralFormula.caloricDensity.code.as_json(), "cal/[foz_us]")
        self.assertEqual(inst.enteralFormula.caloricDensity.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.enteralFormula.caloricDensity.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.enteralFormula.caloricDensity.unit.value, FHIRString("calories per ounce").value)
        self.assertEqual(inst.enteralFormula.caloricDensity.unit.as_json(), "calories per ounce")
        self.assertEqual(inst.enteralFormula.caloricDensity.value, 20)
        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.code.value, FHIRCode("[foz_us]").value)
        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.code.as_json(), "[foz_us]")
        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.unit.value, FHIRString("ounces").value)
        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.unit.as_json(), "ounces")
        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.value, 32)
        self.assertEqual(inst.enteralFormula.routeofAdministration.coding[0].code.value, FHIRCode("PO").value)
        self.assertEqual(inst.enteralFormula.routeofAdministration.coding[0].code.as_json(), "PO")
        self.assertEqual(inst.enteralFormula.routeofAdministration.coding[0].display.value, FHIRString("Swallow, oral").value)
        self.assertEqual(inst.enteralFormula.routeofAdministration.coding[0].display.as_json(), "Swallow, oral")
        self.assertEqual(inst.enteralFormula.routeofAdministration.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration").value)
        self.assertEqual(inst.enteralFormula.routeofAdministration.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration")
        self.assertTrue(inst.enteralFormula.routeofAdministration.coding[0].userSelected)
        self.assertEqual(inst.id.value, FHIRString("infantenteral").value)
        self.assertEqual(inst.id.as_json(), "infantenteral")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.acme.org/nutritionorders").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.acme.org/nutritionorders")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("123").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "123")
        self.assertEqual(inst.intent.value, FHIRCode("order").value)
        self.assertEqual(inst.intent.as_json(), "order")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testNutritionOrder5(self):
        inst = self.instantiate_from('nutritionorder-example-diabeticdiet.json')
        self.assertIsNotNone(inst, 'Must have instantiated a NutritionOrder instance')
        self.implNutritionOrder5(inst)

        js = inst.as_json()
        self.assertEqual("NutritionOrder", js["resourceType"])
        inst2 = nutritionorder.NutritionOrder(js)
        self.implNutritionOrder5(inst2)

    def implNutritionOrder5(self, inst):
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2014-09-17").value)
        self.assertEqual(inst.dateTime.as_json(), "2014-09-17")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code.value, FHIRCode("227493005").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code.as_json(), "227493005")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display.value, FHIRString("Cashew Nut").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display.as_json(), "Cashew Nut")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version.value, FHIRString("20140730").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version.as_json(), "20140730")
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code.value, FHIRCode("dairy-free").value)
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code.as_json(), "dairy-free")
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/diet").value)
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/diet")
        self.assertEqual(inst.id.value, FHIRString("diabeticdiet").value)
        self.assertEqual(inst.id.as_json(), "diabeticdiet")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://goodhealthhospital.org/nutrition-requests").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://goodhealthhospital.org/nutrition-requests")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("123").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "123")
        self.assertEqual(inst.intent.value, FHIRCode("order").value)
        self.assertEqual(inst.intent.as_json(), "order")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.oralDiet.nutrient[0].amount.code.value, FHIRCode("g").value)
        self.assertEqual(inst.oralDiet.nutrient[0].amount.code.as_json(), "g")
        self.assertEqual(inst.oralDiet.nutrient[0].amount.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.oralDiet.nutrient[0].amount.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.oralDiet.nutrient[0].amount.unit.value, FHIRString("grams").value)
        self.assertEqual(inst.oralDiet.nutrient[0].amount.unit.as_json(), "grams")
        self.assertEqual(inst.oralDiet.nutrient[0].amount.value, 75)
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].code.value, FHIRCode("2331003").value)
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].code.as_json(), "2331003")
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].display.value, FHIRString("Carbohydrate").value)
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].display.as_json(), "Carbohydrate")
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.value, FHIRDateTime("2015-02-10").value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.as_json(), "2015-02-10")
        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency.as_json(), 3)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.period, 1)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit.value, FHIRCode("d").value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit.as_json(), "d")
        self.assertEqual(inst.oralDiet.type[0].coding[0].code.value, FHIRCode("160670007").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].code.as_json(), "160670007")
        self.assertEqual(inst.oralDiet.type[0].coding[0].display.value, FHIRString("Diabetic diet").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].display.as_json(), "Diabetic diet")
        self.assertEqual(inst.oralDiet.type[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.type[0].coding[1].code.value, FHIRCode("1030").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].code.as_json(), "1030")
        self.assertEqual(inst.oralDiet.type[0].coding[1].display.value, FHIRString("DD - Diabetic diet").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].display.as_json(), "DD - Diabetic diet")
        self.assertEqual(inst.oralDiet.type[0].coding[1].system.value, FHIRUri("http://goodhealthhospital.org/diet-type-codes").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].system.as_json(), "http://goodhealthhospital.org/diet-type-codes")
        self.assertEqual(inst.oralDiet.type[0].text.value, FHIRString("DD - Diabetic diet").value)
        self.assertEqual(inst.oralDiet.type[0].text.as_json(), "DD - Diabetic diet")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testNutritionOrder6(self):
        inst = self.instantiate_from('nutritionorder-example-diabeticsupplement.json')
        self.assertIsNotNone(inst, 'Must have instantiated a NutritionOrder instance')
        self.implNutritionOrder6(inst)

        js = inst.as_json()
        self.assertEqual("NutritionOrder", js["resourceType"])
        inst2 = nutritionorder.NutritionOrder(js)
        self.implNutritionOrder6(inst2)

    def implNutritionOrder6(self, inst):
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2014-09-17").value)
        self.assertEqual(inst.dateTime.as_json(), "2014-09-17")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code.value, FHIRCode("227493005").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code.as_json(), "227493005")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display.value, FHIRString("Cashew Nut").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display.as_json(), "Cashew Nut")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version.value, FHIRString("20140730").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version.as_json(), "20140730")
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code.value, FHIRCode("kosher").value)
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code.as_json(), "kosher")
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/diet").value)
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/diet")
        self.assertEqual(inst.id.value, FHIRString("diabeticsupplement").value)
        self.assertEqual(inst.id.as_json(), "diabeticsupplement")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://goodhealthhospital.org/nutrition-requests").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://goodhealthhospital.org/nutrition-requests")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("123").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "123")
        self.assertEqual(inst.intent.value, FHIRCode("order").value)
        self.assertEqual(inst.intent.as_json(), "order")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.supplement[0].productName.value, FHIRString("Glucerna").value)
        self.assertEqual(inst.supplement[0].productName.as_json(), "Glucerna")
        self.assertEqual(inst.supplement[0].quantity.unit.value, FHIRString("8 oz bottle").value)
        self.assertEqual(inst.supplement[0].quantity.unit.as_json(), "8 oz bottle")
        self.assertEqual(inst.supplement[0].quantity.value, 1)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.boundsPeriod.start.value, FHIRDateTime("2015-02-10T15:00:00Z").value)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.boundsPeriod.start.as_json(), "2015-02-10T15:00:00Z")
        self.assertEqual(inst.supplement[0].schedule[0].repeat.frequency.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.frequency.as_json(), 1)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.period, 24)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.periodUnit.value, FHIRCode("h").value)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.periodUnit.as_json(), "h")
        self.assertEqual(inst.supplement[0].schedule[1].repeat.duration, 1)
        self.assertEqual(inst.supplement[0].schedule[1].repeat.durationUnit.value, FHIRCode("h").value)
        self.assertEqual(inst.supplement[0].schedule[1].repeat.durationUnit.as_json(), "h")
        self.assertEqual(inst.supplement[0].schedule[1].repeat.when[0].value, FHIRCode("HS").value)
        self.assertEqual(inst.supplement[0].schedule[1].repeat.when[0].as_json(), "HS")
        self.assertEqual(inst.supplement[0].type.coding[0].code.value, FHIRCode("443051000124104").value)
        self.assertEqual(inst.supplement[0].type.coding[0].code.as_json(), "443051000124104")
        self.assertEqual(inst.supplement[0].type.coding[0].display.value, FHIRString("Adult diabetes specialty formula").value)
        self.assertEqual(inst.supplement[0].type.coding[0].display.as_json(), "Adult diabetes specialty formula")
        self.assertEqual(inst.supplement[0].type.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.supplement[0].type.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.supplement[0].type.coding[1].code.value, FHIRCode("1010").value)
        self.assertEqual(inst.supplement[0].type.coding[1].code.as_json(), "1010")
        self.assertEqual(inst.supplement[0].type.coding[1].display.value, FHIRString("Adult diabetic formula").value)
        self.assertEqual(inst.supplement[0].type.coding[1].display.as_json(), "Adult diabetic formula")
        self.assertEqual(inst.supplement[0].type.coding[1].system.value, FHIRUri("http://goodhealthhospital.org/supplement-type-codes").value)
        self.assertEqual(inst.supplement[0].type.coding[1].system.as_json(), "http://goodhealthhospital.org/supplement-type-codes")
        self.assertEqual(inst.supplement[0].type.text.value, FHIRString("Adult diabetic formula").value)
        self.assertEqual(inst.supplement[0].type.text.as_json(), "Adult diabetic formula")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testNutritionOrder7(self):
        inst = self.instantiate_from('nutritionorder-example-energysupplement.json')
        self.assertIsNotNone(inst, 'Must have instantiated a NutritionOrder instance')
        self.implNutritionOrder7(inst)

        js = inst.as_json()
        self.assertEqual("NutritionOrder", js["resourceType"])
        inst2 = nutritionorder.NutritionOrder(js)
        self.implNutritionOrder7(inst2)

    def implNutritionOrder7(self, inst):
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2014-09-17").value)
        self.assertEqual(inst.dateTime.as_json(), "2014-09-17")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code.value, FHIRCode("227493005").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code.as_json(), "227493005")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display.value, FHIRString("Cashew Nut").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display.as_json(), "Cashew Nut")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version.value, FHIRString("20140730").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version.as_json(), "20140730")
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code.value, FHIRCode("kosher").value)
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code.as_json(), "kosher")
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/diet").value)
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/diet")
        self.assertEqual(inst.id.value, FHIRString("energysupplement").value)
        self.assertEqual(inst.id.as_json(), "energysupplement")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://goodhealthhospital.org/nutrition-requests").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://goodhealthhospital.org/nutrition-requests")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("123").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "123")
        self.assertEqual(inst.intent.value, FHIRCode("order").value)
        self.assertEqual(inst.intent.as_json(), "order")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.supplement[0].productName.value, FHIRString("Ensure").value)
        self.assertEqual(inst.supplement[0].productName.as_json(), "Ensure")
        self.assertEqual(inst.supplement[0].quantity.unit.value, FHIRString("8 oz can").value)
        self.assertEqual(inst.supplement[0].quantity.unit.as_json(), "8 oz can")
        self.assertEqual(inst.supplement[0].quantity.value, 1)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.boundsPeriod.start.value, FHIRDateTime("2015-02-10").value)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.boundsPeriod.start.as_json(), "2015-02-10")
        self.assertEqual(inst.supplement[0].schedule[0].repeat.frequency.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.frequency.as_json(), 3)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.period, 1)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.periodUnit.value, FHIRCode("d").value)
        self.assertEqual(inst.supplement[0].schedule[0].repeat.periodUnit.as_json(), "d")
        self.assertEqual(inst.supplement[0].type.coding[0].code.value, FHIRCode("442971000124100").value)
        self.assertEqual(inst.supplement[0].type.coding[0].code.as_json(), "442971000124100")
        self.assertEqual(inst.supplement[0].type.coding[0].display.value, FHIRString("Adult high energy formula").value)
        self.assertEqual(inst.supplement[0].type.coding[0].display.as_json(), "Adult high energy formula")
        self.assertEqual(inst.supplement[0].type.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.supplement[0].type.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.supplement[0].type.coding[1].code.value, FHIRCode("1010").value)
        self.assertEqual(inst.supplement[0].type.coding[1].code.as_json(), "1010")
        self.assertEqual(inst.supplement[0].type.coding[1].display.value, FHIRString("Adult high energy drink").value)
        self.assertEqual(inst.supplement[0].type.coding[1].display.as_json(), "Adult high energy drink")
        self.assertEqual(inst.supplement[0].type.coding[1].system.value, FHIRUri("http://goodhealthhospital.org/supplement-type-codes").value)
        self.assertEqual(inst.supplement[0].type.coding[1].system.as_json(), "http://goodhealthhospital.org/supplement-type-codes")
        self.assertEqual(inst.supplement[0].type.text.value, FHIRString("Adult high energy drink").value)
        self.assertEqual(inst.supplement[0].type.text.as_json(), "Adult high energy drink")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testNutritionOrder8(self):
        inst = self.instantiate_from('nutritionorder-example-renaldiet.json')
        self.assertIsNotNone(inst, 'Must have instantiated a NutritionOrder instance')
        self.implNutritionOrder8(inst)

        js = inst.as_json()
        self.assertEqual("NutritionOrder", js["resourceType"])
        inst2 = nutritionorder.NutritionOrder(js)
        self.implNutritionOrder8(inst2)

    def implNutritionOrder8(self, inst):
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2014-09-17").value)
        self.assertEqual(inst.dateTime.as_json(), "2014-09-17")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code.value, FHIRCode("227493005").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code.as_json(), "227493005")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display.value, FHIRString("Cashew Nut").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display.as_json(), "Cashew Nut")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version.value, FHIRString("20140730").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version.as_json(), "20140730")
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code.value, FHIRCode("dairy-free").value)
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code.as_json(), "dairy-free")
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/diet").value)
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/diet")
        self.assertEqual(inst.id.value, FHIRString("renaldiet").value)
        self.assertEqual(inst.id.as_json(), "renaldiet")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://goodhealthhospital.org/nutrition-requests").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://goodhealthhospital.org/nutrition-requests")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("123").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "123")
        self.assertEqual(inst.intent.value, FHIRCode("order").value)
        self.assertEqual(inst.intent.as_json(), "order")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.oralDiet.nutrient[0].amount.code.value, FHIRCode("g").value)
        self.assertEqual(inst.oralDiet.nutrient[0].amount.code.as_json(), "g")
        self.assertEqual(inst.oralDiet.nutrient[0].amount.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.oralDiet.nutrient[0].amount.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.oralDiet.nutrient[0].amount.unit.value, FHIRString("grams").value)
        self.assertEqual(inst.oralDiet.nutrient[0].amount.unit.as_json(), "grams")
        self.assertEqual(inst.oralDiet.nutrient[0].amount.value, 2)
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].code.value, FHIRCode("39972003").value)
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].code.as_json(), "39972003")
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].display.value, FHIRString("Sodium").value)
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].display.as_json(), "Sodium")
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.nutrient[1].amount.code.value, FHIRCode("mg").value)
        self.assertEqual(inst.oralDiet.nutrient[1].amount.code.as_json(), "mg")
        self.assertEqual(inst.oralDiet.nutrient[1].amount.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.oralDiet.nutrient[1].amount.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.oralDiet.nutrient[1].amount.unit.value, FHIRString("milligrams").value)
        self.assertEqual(inst.oralDiet.nutrient[1].amount.unit.as_json(), "milligrams")
        self.assertEqual(inst.oralDiet.nutrient[1].amount.value, 1000)
        self.assertEqual(inst.oralDiet.nutrient[1].modifier.coding[0].code.value, FHIRCode("30820000").value)
        self.assertEqual(inst.oralDiet.nutrient[1].modifier.coding[0].code.as_json(), "30820000")
        self.assertEqual(inst.oralDiet.nutrient[1].modifier.coding[0].display.value, FHIRString("Phosphorus").value)
        self.assertEqual(inst.oralDiet.nutrient[1].modifier.coding[0].display.as_json(), "Phosphorus")
        self.assertEqual(inst.oralDiet.nutrient[1].modifier.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.nutrient[1].modifier.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.nutrient[2].amount.code.value, FHIRCode("g").value)
        self.assertEqual(inst.oralDiet.nutrient[2].amount.code.as_json(), "g")
        self.assertEqual(inst.oralDiet.nutrient[2].amount.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.oralDiet.nutrient[2].amount.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.oralDiet.nutrient[2].amount.unit.value, FHIRString("grams").value)
        self.assertEqual(inst.oralDiet.nutrient[2].amount.unit.as_json(), "grams")
        self.assertEqual(inst.oralDiet.nutrient[2].amount.value, 2)
        self.assertEqual(inst.oralDiet.nutrient[2].modifier.coding[0].code.value, FHIRCode("88480006").value)
        self.assertEqual(inst.oralDiet.nutrient[2].modifier.coding[0].code.as_json(), "88480006")
        self.assertEqual(inst.oralDiet.nutrient[2].modifier.coding[0].display.value, FHIRString("Potassium").value)
        self.assertEqual(inst.oralDiet.nutrient[2].modifier.coding[0].display.as_json(), "Potassium")
        self.assertEqual(inst.oralDiet.nutrient[2].modifier.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.nutrient[2].modifier.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.value, FHIRDateTime("2015-02-10").value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.as_json(), "2015-02-10")
        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency.as_json(), 3)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.period, 1)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit.value, FHIRCode("d").value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit.as_json(), "d")
        self.assertEqual(inst.oralDiet.type[0].coding[0].code.value, FHIRCode("33489005").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].code.as_json(), "33489005")
        self.assertEqual(inst.oralDiet.type[0].coding[0].display.value, FHIRString("Renal diet").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].display.as_json(), "Renal diet")
        self.assertEqual(inst.oralDiet.type[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.type[0].coding[1].code.value, FHIRCode("1050").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].code.as_json(), "1050")
        self.assertEqual(inst.oralDiet.type[0].coding[1].display.value, FHIRString("Renal").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].display.as_json(), "Renal")
        self.assertEqual(inst.oralDiet.type[0].coding[1].system.value, FHIRUri("http://goodhealthhospital.org/diet-type-codes").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].system.as_json(), "http://goodhealthhospital.org/diet-type-codes")
        self.assertEqual(inst.oralDiet.type[0].text.value, FHIRString("Renal Diet").value)
        self.assertEqual(inst.oralDiet.type[0].text.as_json(), "Renal Diet")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testNutritionOrder9(self):
        inst = self.instantiate_from('nutritionorder-example-fiberrestricteddiet.json')
        self.assertIsNotNone(inst, 'Must have instantiated a NutritionOrder instance')
        self.implNutritionOrder9(inst)

        js = inst.as_json()
        self.assertEqual("NutritionOrder", js["resourceType"])
        inst2 = nutritionorder.NutritionOrder(js)
        self.implNutritionOrder9(inst2)

    def implNutritionOrder9(self, inst):
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2014-09-17").value)
        self.assertEqual(inst.dateTime.as_json(), "2014-09-17")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code.value, FHIRCode("227493005").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code.as_json(), "227493005")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display.value, FHIRString("Cashew Nut").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display.as_json(), "Cashew Nut")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version.value, FHIRString("20140730").value)
        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version.as_json(), "20140730")
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code.value, FHIRCode("dairy-free").value)
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code.as_json(), "dairy-free")
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/diet").value)
        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/diet")
        self.assertEqual(inst.id.value, FHIRString("fiberrestricteddiet").value)
        self.assertEqual(inst.id.as_json(), "fiberrestricteddiet")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://goodhealthhospital.org/nutrition-requests").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://goodhealthhospital.org/nutrition-requests")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("123").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "123")
        self.assertEqual(inst.intent.value, FHIRCode("order").value)
        self.assertEqual(inst.intent.as_json(), "order")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.oralDiet.nutrient[0].amount.code.value, FHIRCode("g").value)
        self.assertEqual(inst.oralDiet.nutrient[0].amount.code.as_json(), "g")
        self.assertEqual(inst.oralDiet.nutrient[0].amount.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.oralDiet.nutrient[0].amount.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.oralDiet.nutrient[0].amount.unit.value, FHIRString("grams").value)
        self.assertEqual(inst.oralDiet.nutrient[0].amount.unit.as_json(), "grams")
        self.assertEqual(inst.oralDiet.nutrient[0].amount.value, 50)
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].code.value, FHIRCode("256674009").value)
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].code.as_json(), "256674009")
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].display.value, FHIRString("Fat").value)
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].display.as_json(), "Fat")
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.value, FHIRDateTime("2015-02-10").value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.as_json(), "2015-02-10")
        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency.as_json(), 3)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.period, 1)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit.value, FHIRCode("d").value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit.as_json(), "d")
        self.assertEqual(inst.oralDiet.type[0].coding[0].code.value, FHIRCode("15108003").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].code.as_json(), "15108003")
        self.assertEqual(inst.oralDiet.type[0].coding[0].display.value, FHIRString("Restricted fiber diet").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].display.as_json(), "Restricted fiber diet")
        self.assertEqual(inst.oralDiet.type[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.type[0].coding[1].code.value, FHIRCode("1000").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].code.as_json(), "1000")
        self.assertEqual(inst.oralDiet.type[0].coding[1].display.value, FHIRString("Fiber restricted").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].display.as_json(), "Fiber restricted")
        self.assertEqual(inst.oralDiet.type[0].coding[1].system.value, FHIRUri("http://goodhealthhospital.org/diet-type-codes").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].system.as_json(), "http://goodhealthhospital.org/diet-type-codes")
        self.assertEqual(inst.oralDiet.type[0].text.value, FHIRString("Fiber restricted diet").value)
        self.assertEqual(inst.oralDiet.type[0].text.as_json(), "Fiber restricted diet")
        self.assertEqual(inst.oralDiet.type[1].coding[0].code.value, FHIRCode("16208003").value)
        self.assertEqual(inst.oralDiet.type[1].coding[0].code.as_json(), "16208003")
        self.assertEqual(inst.oralDiet.type[1].coding[0].display.value, FHIRString("Low fat diet").value)
        self.assertEqual(inst.oralDiet.type[1].coding[0].display.as_json(), "Low fat diet")
        self.assertEqual(inst.oralDiet.type[1].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.type[1].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.type[1].coding[1].code.value, FHIRCode("1100").value)
        self.assertEqual(inst.oralDiet.type[1].coding[1].code.as_json(), "1100")
        self.assertEqual(inst.oralDiet.type[1].coding[1].display.value, FHIRString("Low Fat").value)
        self.assertEqual(inst.oralDiet.type[1].coding[1].display.as_json(), "Low Fat")
        self.assertEqual(inst.oralDiet.type[1].coding[1].system.value, FHIRUri("http://goodhealthhospital.org/diet-type-codes").value)
        self.assertEqual(inst.oralDiet.type[1].coding[1].system.as_json(), "http://goodhealthhospital.org/diet-type-codes")
        self.assertEqual(inst.oralDiet.type[1].text.value, FHIRString("Low fat diet").value)
        self.assertEqual(inst.oralDiet.type[1].text.as_json(), "Low fat diet")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testNutritionOrder10(self):
        inst = self.instantiate_from('nutritionorder-example-texture-modified.json')
        self.assertIsNotNone(inst, 'Must have instantiated a NutritionOrder instance')
        self.implNutritionOrder10(inst)

        js = inst.as_json()
        self.assertEqual("NutritionOrder", js["resourceType"])
        inst2 = nutritionorder.NutritionOrder(js)
        self.implNutritionOrder10(inst2)

    def implNutritionOrder10(self, inst):
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2014-09-17").value)
        self.assertEqual(inst.dateTime.as_json(), "2014-09-17")
        self.assertEqual(inst.id.value, FHIRString("texturemodified").value)
        self.assertEqual(inst.id.as_json(), "texturemodified")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://goodhealthhospital.org/nutrition-requests").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://goodhealthhospital.org/nutrition-requests")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("123").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "123")
        self.assertEqual(inst.intent.value, FHIRCode("order").value)
        self.assertEqual(inst.intent.as_json(), "order")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.value, FHIRDateTime("2015-02-10").value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.as_json(), "2015-02-10")
        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency.as_json(), 3)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.period, 1)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit.value, FHIRCode("d").value)
        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit.as_json(), "d")
        self.assertEqual(inst.oralDiet.texture[0].foodType.coding[0].code.value, FHIRCode("28647000").value)
        self.assertEqual(inst.oralDiet.texture[0].foodType.coding[0].code.as_json(), "28647000")
        self.assertEqual(inst.oralDiet.texture[0].foodType.coding[0].display.value, FHIRString("Meat").value)
        self.assertEqual(inst.oralDiet.texture[0].foodType.coding[0].display.as_json(), "Meat")
        self.assertEqual(inst.oralDiet.texture[0].foodType.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.texture[0].foodType.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.texture[0].foodType.text.value, FHIRString("Regular, Chopped Meat").value)
        self.assertEqual(inst.oralDiet.texture[0].foodType.text.as_json(), "Regular, Chopped Meat")
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].code.value, FHIRCode("228049004").value)
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].code.as_json(), "228049004")
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].display.value, FHIRString("Chopped food").value)
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].display.as_json(), "Chopped food")
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.texture[0].modifier.text.value, FHIRString("Regular, Chopped Meat").value)
        self.assertEqual(inst.oralDiet.texture[0].modifier.text.as_json(), "Regular, Chopped Meat")
        self.assertEqual(inst.oralDiet.type[0].coding[0].code.value, FHIRCode("435801000124108").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].code.as_json(), "435801000124108")
        self.assertEqual(inst.oralDiet.type[0].coding[0].display.value, FHIRString("Texture modified diet").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].display.as_json(), "Texture modified diet")
        self.assertEqual(inst.oralDiet.type[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.oralDiet.type[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.oralDiet.type[0].coding[1].code.value, FHIRCode("1010").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].code.as_json(), "1010")
        self.assertEqual(inst.oralDiet.type[0].coding[1].display.value, FHIRString("Texture modified diet").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].display.as_json(), "Texture modified diet")
        self.assertEqual(inst.oralDiet.type[0].coding[1].system.value, FHIRUri("http://goodhealthhospital.org/diet-type-codes").value)
        self.assertEqual(inst.oralDiet.type[0].coding[1].system.as_json(), "http://goodhealthhospital.org/diet-type-codes")
        self.assertEqual(inst.oralDiet.type[0].text.value, FHIRString("Texture modified diet").value)
        self.assertEqual(inst.oralDiet.type[0].text.as_json(), "Texture modified diet")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")


from fhirclient.models.fhirdatatypes import FHIRDateTime, FHIRString, FHIRUri, FHIRCode, FHIRPositiveInt