#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import plandefinition

class PlanDefinitionTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("PlanDefinition", js["resourceType"])
        return plandefinition.PlanDefinition(js)

    def testPlanDefinition1(self):
        inst = self.instantiate_from('plandefinition-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a PlanDefinition instance')
        self.implPlanDefinition1(inst)

        js = inst.as_json()
        self.assertEqual("PlanDefinition", js["resourceType"])
        inst2 = plandefinition.PlanDefinition(js)
        self.implPlanDefinition1(inst2)

    def implPlanDefinition1(self, inst):
        self.assertEqual(inst.action[0].action[0].action[0].definitionCanonical.value, FHIRCanonical("#referralToMentalHealthCare").value)
        self.assertEqual(inst.action[0].action[0].action[0].definitionCanonical.as_json(), "#referralToMentalHealthCare")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].expression.expression.value, FHIRString("Now()").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].expression.expression.as_json(), "Now()")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].path.value, FHIRString("timing.event").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].path.as_json(), "timing.event")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].expression.expression.value, FHIRString("Code '261QM0850X' from SuicideRiskLogic.\"NUCC Provider Taxonomy\" display 'Adult Mental Health'").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].expression.expression.as_json(), "Code '261QM0850X' from SuicideRiskLogic.\"NUCC Provider Taxonomy\" display 'Adult Mental Health'")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].path.value, FHIRString("specialty").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].path.as_json(), "specialty")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].expression.expression.value, FHIRString("SuicideRiskLogic.ServiceRequestFulfillmentTime").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].expression.expression.as_json(), "SuicideRiskLogic.ServiceRequestFulfillmentTime")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].path.value, FHIRString("occurrenceDateTime").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].path.as_json(), "occurrenceDateTime")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].expression.expression.value, FHIRString("SuicideRiskLogic.Patient").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].expression.expression.as_json(), "SuicideRiskLogic.Patient")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].path.value, FHIRString("subject").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].path.as_json(), "subject")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].expression.expression.value, FHIRString("SuicideRiskLogic.Practitioner").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].expression.expression.as_json(), "SuicideRiskLogic.Practitioner")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].path.value, FHIRString("requester.agent").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].path.as_json(), "requester.agent")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].expression.expression.value, FHIRString("SuicideRiskLogic.RiskAssessmentScore").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].expression.expression.as_json(), "SuicideRiskLogic.RiskAssessmentScore")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].path.value, FHIRString("reasonCode").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].path.as_json(), "reasonCode")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].expression.expression.value, FHIRString("SuicideRiskLogic.RiskAssessment").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].expression.expression.as_json(), "SuicideRiskLogic.RiskAssessment")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].path.value, FHIRString("reasonReference").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].path.as_json(), "reasonReference")
        self.assertEqual(inst.action[0].action[0].action[0].textEquivalent.value, FHIRString("Refer to outpatient mental health program for evaluation and treatment of mental health conditions now").value)
        self.assertEqual(inst.action[0].action[0].action[0].textEquivalent.as_json(), "Refer to outpatient mental health program for evaluation and treatment of mental health conditions now")
        self.assertEqual(inst.action[0].action[0].groupingBehavior.value, FHIRCode("logical-group").value)
        self.assertEqual(inst.action[0].action[0].groupingBehavior.as_json(), "logical-group")
        self.assertEqual(inst.action[0].action[0].selectionBehavior.value, FHIRCode("any").value)
        self.assertEqual(inst.action[0].action[0].selectionBehavior.as_json(), "any")
        self.assertEqual(inst.action[0].action[0].title.value, FHIRString("Consults and Referrals").value)
        self.assertEqual(inst.action[0].action[0].title.as_json(), "Consults and Referrals")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].definitionCanonical.value, FHIRCanonical("#citalopramPrescription").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].definitionCanonical.as_json(), "#citalopramPrescription")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[0].expression.expression.value, FHIRString("'draft'").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[0].expression.expression.as_json(), "'draft'")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[0].path.value, FHIRString("status").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[0].path.as_json(), "status")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[1].expression.expression.value, FHIRString("SuicideRiskLogic.Patient").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[1].expression.expression.as_json(), "SuicideRiskLogic.Patient")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[1].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[1].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[1].path.value, FHIRString("patient").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[1].path.as_json(), "patient")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[2].expression.expression.value, FHIRString("SuicideRiskLogic.Practitioner").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[2].expression.expression.as_json(), "SuicideRiskLogic.Practitioner")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[2].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[2].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[2].path.value, FHIRString("prescriber").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[2].path.as_json(), "prescriber")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[3].expression.expression.value, FHIRString("SuicideRiskLogic.RiskAssessmentScore").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[3].expression.expression.as_json(), "SuicideRiskLogic.RiskAssessmentScore")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[3].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[3].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[3].path.value, FHIRString("reasonCode").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[3].path.as_json(), "reasonCode")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[4].expression.expression.value, FHIRString("SuicideRiskLogic.RiskAssessment").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[4].expression.expression.as_json(), "SuicideRiskLogic.RiskAssessment")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[4].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[4].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[4].path.value, FHIRString("reasonReference").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[4].path.as_json(), "reasonReference")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].textEquivalent.value, FHIRString("citalopram 20 mg tablet 1 tablet oral 1 time daily now (30 table; 3 refills)").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].textEquivalent.as_json(), "citalopram 20 mg tablet 1 tablet oral 1 time daily now (30 table; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[1].textEquivalent.value, FHIRString("escitalopram 10 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[1].textEquivalent.as_json(), "escitalopram 10 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[2].textEquivalent.value, FHIRString("fluoxetine 20 mg capsule 1 capsule oral 1 time daily now (30 tablet; 3 refills)").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[2].textEquivalent.as_json(), "fluoxetine 20 mg capsule 1 capsule oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[3].textEquivalent.value, FHIRString("paroxetine 20 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[3].textEquivalent.as_json(), "paroxetine 20 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[4].textEquivalent.value, FHIRString("sertraline 50 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[4].textEquivalent.as_json(), "sertraline 50 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].document.contentType.value, FHIRCode("text/html").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].document.contentType.as_json(), "text/html")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].document.title.value, FHIRString("National Library of Medicine. DailyMed website. CITALOPRAM- citalopram hydrobromide tablet, film coated.").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].document.title.as_json(), "National Library of Medicine. DailyMed website. CITALOPRAM- citalopram hydrobromide tablet, film coated.")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].document.url.value, FHIRUrl("http://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=6daeb45c-451d-b135-bf8f-2d6dff4b6b01").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].document.url.as_json(), "http://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=6daeb45c-451d-b135-bf8f-2d6dff4b6b01")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].type.value, FHIRCode("citation").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].type.as_json(), "citation")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].groupingBehavior.value, FHIRCode("logical-group").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].groupingBehavior.as_json(), "logical-group")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].selectionBehavior.value, FHIRCode("at-most-one").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].selectionBehavior.as_json(), "at-most-one")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].title.value, FHIRString("Selective Serotonin Reuptake Inhibitors (Choose a mazimum of one or document reasons for exception)").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[0].title.as_json(), "Selective Serotonin Reuptake Inhibitors (Choose a mazimum of one or document reasons for exception)")
        self.assertEqual(inst.action[0].action[1].action[0].action[1].textEquivalent.value, FHIRString("Dopamine Norepinephrine Reuptake Inhibitors (Choose a maximum of one or document reasons for exception)").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[1].textEquivalent.as_json(), "Dopamine Norepinephrine Reuptake Inhibitors (Choose a maximum of one or document reasons for exception)")
        self.assertEqual(inst.action[0].action[1].action[0].action[2].textEquivalent.value, FHIRString("Serotonin Norepinephrine Reuptake Inhibitors (Choose a maximum of one or doument reasons for exception)").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[2].textEquivalent.as_json(), "Serotonin Norepinephrine Reuptake Inhibitors (Choose a maximum of one or doument reasons for exception)")
        self.assertEqual(inst.action[0].action[1].action[0].action[3].textEquivalent.value, FHIRString("Norepinephrine-Serotonin Modulators (Choose a maximum of one or document reasons for exception)").value)
        self.assertEqual(inst.action[0].action[1].action[0].action[3].textEquivalent.as_json(), "Norepinephrine-Serotonin Modulators (Choose a maximum of one or document reasons for exception)")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.contentType.value, FHIRCode("text/html").value)
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.contentType.as_json(), "text/html")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/cqf-qualityOfEvidence").value)
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/cqf-qualityOfEvidence")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].valueCodeableConcept.coding[0].code.value, FHIRCode("high").value)
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].valueCodeableConcept.coding[0].code.as_json(), "high")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].valueCodeableConcept.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/evidence-quality").value)
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].valueCodeableConcept.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/evidence-quality")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].valueCodeableConcept.text.value, FHIRString("High Quality").value)
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].valueCodeableConcept.text.as_json(), "High Quality")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.title.value, FHIRString("Practice Guideline for the Treatment of Patients with Major Depressive Disorder").value)
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.title.as_json(), "Practice Guideline for the Treatment of Patients with Major Depressive Disorder")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.url.value, FHIRUrl("http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf").value)
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.url.as_json(), "http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].type.value, FHIRCode("citation").value)
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].type.as_json(), "citation")
        self.assertEqual(inst.action[0].action[1].action[0].groupingBehavior.value, FHIRCode("logical-group").value)
        self.assertEqual(inst.action[0].action[1].action[0].groupingBehavior.as_json(), "logical-group")
        self.assertEqual(inst.action[0].action[1].action[0].selectionBehavior.value, FHIRCode("at-most-one").value)
        self.assertEqual(inst.action[0].action[1].action[0].selectionBehavior.as_json(), "at-most-one")
        self.assertEqual(inst.action[0].action[1].action[0].title.value, FHIRString("First-Line Antidepressants").value)
        self.assertEqual(inst.action[0].action[1].action[0].title.as_json(), "First-Line Antidepressants")
        self.assertEqual(inst.action[0].action[1].groupingBehavior.value, FHIRCode("logical-group").value)
        self.assertEqual(inst.action[0].action[1].groupingBehavior.as_json(), "logical-group")
        self.assertEqual(inst.action[0].action[1].selectionBehavior.value, FHIRCode("at-most-one").value)
        self.assertEqual(inst.action[0].action[1].selectionBehavior.as_json(), "at-most-one")
        self.assertEqual(inst.action[0].action[1].title.value, FHIRString("Medications").value)
        self.assertEqual(inst.action[0].action[1].title.as_json(), "Medications")
        self.assertEqual(inst.action[0].title.value, FHIRString("Suicide Risk Assessment and Outpatient Management").value)
        self.assertEqual(inst.action[0].title.as_json(), "Suicide Risk Assessment and Outpatient Management")
        self.assertEqual(inst.approvalDate.value, FHIRDate("2016-03-12").value)
        self.assertEqual(inst.approvalDate.as_json(), "2016-03-12")
        self.assertEqual(inst.approvalDate.date, FHIRDate('2016-03-12').date)
        self.assertEqual(inst.author[0].name.value, FHIRString("Motive Medical Intelligence").value)
        self.assertEqual(inst.author[0].name.as_json(), "Motive Medical Intelligence")
        self.assertEqual(inst.author[0].telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.author[0].telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.author[0].telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.author[0].telecom[0].use.as_json(), "work")
        self.assertEqual(inst.author[0].telecom[0].value.value, FHIRString("415-362-4007").value)
        self.assertEqual(inst.author[0].telecom[0].value.as_json(), "415-362-4007")
        self.assertEqual(inst.author[0].telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.author[0].telecom[1].system.as_json(), "email")
        self.assertEqual(inst.author[0].telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.author[0].telecom[1].use.as_json(), "work")
        self.assertEqual(inst.author[0].telecom[1].value.value, FHIRString("info@motivemi.com").value)
        self.assertEqual(inst.author[0].telecom[1].value.as_json(), "info@motivemi.com")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.contact[0].telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.contact[0].telecom[0].use.as_json(), "work")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("415-362-4007").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "415-362-4007")
        self.assertEqual(inst.contact[0].telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.contact[0].telecom[1].system.as_json(), "email")
        self.assertEqual(inst.contact[0].telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.contact[0].telecom[1].use.as_json(), "work")
        self.assertEqual(inst.contact[0].telecom[1].value.value, FHIRString("info@motivemi.com").value)
        self.assertEqual(inst.contact[0].telecom[1].value.as_json(), "info@motivemi.com")
        self.assertEqual(inst.contained[0].id.value, FHIRString("referralToMentalHealthCare").value)
        self.assertEqual(inst.contained[0].id.as_json(), "referralToMentalHealthCare")
        self.assertEqual(inst.contained[1].id.value, FHIRString("citalopramPrescription").value)
        self.assertEqual(inst.contained[1].id.as_json(), "citalopramPrescription")
        self.assertEqual(inst.contained[2].id.value, FHIRString("citalopramMedication").value)
        self.assertEqual(inst.contained[2].id.as_json(), "citalopramMedication")
        self.assertEqual(inst.contained[3].id.value, FHIRString("citalopramSubstance").value)
        self.assertEqual(inst.contained[3].id.as_json(), "citalopramSubstance")
        self.assertEqual(inst.copyright.value, FHIRMarkdown("© Copyright 2016 Motive Medical Intelligence. All rights reserved.").value)
        self.assertEqual(inst.copyright.as_json(), "© Copyright 2016 Motive Medical Intelligence. All rights reserved.")
        self.assertEqual(inst.date.value, FHIRDateTime("2015-08-15").value)
        self.assertEqual(inst.date.as_json(), "2015-08-15")
        self.assertEqual(inst.description.value, FHIRMarkdown("Orders to be applied to a patient characterized as low suicide risk.").value)
        self.assertEqual(inst.description.as_json(), "Orders to be applied to a patient characterized as low suicide risk.")
        self.assertEqual(inst.effectivePeriod.end.value, FHIRDateTime("2017-12-31").value)
        self.assertEqual(inst.effectivePeriod.end.as_json(), "2017-12-31")
        self.assertEqual(inst.effectivePeriod.start.value, FHIRDateTime("2016-01-01").value)
        self.assertEqual(inst.effectivePeriod.start.as_json(), "2016-01-01")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.id.value, FHIRString("low-suicide-risk-order-set").value)
        self.assertEqual(inst.id.as_json(), "low-suicide-risk-order-set")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://motivemi.com/artifacts").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://motivemi.com/artifacts")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("mmi:low-suicide-risk-order-set").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "mmi:low-suicide-risk-order-set")
        self.assertEqual(inst.jurisdiction[0].coding[0].code.value, FHIRCode("US").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].code.as_json(), "US")
        self.assertEqual(inst.jurisdiction[0].coding[0].system.value, FHIRUri("urn:iso:std:iso:3166").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].system.as_json(), "urn:iso:std:iso:3166")
        self.assertEqual(inst.lastReviewDate.value, FHIRDate("2016-08-15").value)
        self.assertEqual(inst.lastReviewDate.as_json(), "2016-08-15")
        self.assertEqual(inst.lastReviewDate.date, FHIRDate('2016-08-15').date)
        self.assertEqual(inst.library[0].value, FHIRCanonical("Library/suiciderisk-orderset-logic").value)
        self.assertEqual(inst.library[0].as_json(), "Library/suiciderisk-orderset-logic")
        self.assertEqual(inst.name.value, FHIRString("LowSuicideRiskOrderSet").value)
        self.assertEqual(inst.name.as_json(), "LowSuicideRiskOrderSet")
        self.assertEqual(inst.publisher.value, FHIRString("Motive Medical Intelligence").value)
        self.assertEqual(inst.publisher.as_json(), "Motive Medical Intelligence")
        self.assertEqual(inst.purpose.value, FHIRMarkdown("This order set helps ensure consistent application of appropriate orders for the care of low suicide risk patients.").value)
        self.assertEqual(inst.purpose.as_json(), "This order set helps ensure consistent application of appropriate orders for the care of low suicide risk patients.")
        self.assertEqual(inst.relatedArtifact[0].display.value, FHIRString("Practice Guideline for the Treatment of Patients with Major Depressive Disorder").value)
        self.assertEqual(inst.relatedArtifact[0].display.as_json(), "Practice Guideline for the Treatment of Patients with Major Depressive Disorder")
        self.assertEqual(inst.relatedArtifact[0].type.value, FHIRCode("derived-from").value)
        self.assertEqual(inst.relatedArtifact[0].type.as_json(), "derived-from")
        self.assertEqual(inst.relatedArtifact[0].url.value, FHIRUrl("http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf").value)
        self.assertEqual(inst.relatedArtifact[0].url.as_json(), "http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf")
        self.assertEqual(inst.relatedArtifact[1].resource.value, FHIRCanonical("ActivityDefinition/referralPrimaryCareMentalHealth").value)
        self.assertEqual(inst.relatedArtifact[1].resource.as_json(), "ActivityDefinition/referralPrimaryCareMentalHealth")
        self.assertEqual(inst.relatedArtifact[1].type.value, FHIRCode("composed-of").value)
        self.assertEqual(inst.relatedArtifact[1].type.as_json(), "composed-of")
        self.assertEqual(inst.relatedArtifact[2].resource.value, FHIRCanonical("ActivityDefinition/citalopramPrescription").value)
        self.assertEqual(inst.relatedArtifact[2].resource.as_json(), "ActivityDefinition/citalopramPrescription")
        self.assertEqual(inst.relatedArtifact[2].type.value, FHIRCode("composed-of").value)
        self.assertEqual(inst.relatedArtifact[2].type.as_json(), "composed-of")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Low Suicide Risk Order Set").value)
        self.assertEqual(inst.title.as_json(), "Low Suicide Risk Order Set")
        self.assertEqual(inst.topic[0].text.value, FHIRString("Suicide risk assessment").value)
        self.assertEqual(inst.topic[0].text.as_json(), "Suicide risk assessment")
        self.assertEqual(inst.url.value, FHIRUri("http://motivemi.com/artifacts/PlanDefinition/low-suicide-risk-order-set").value)
        self.assertEqual(inst.url.as_json(), "http://motivemi.com/artifacts/PlanDefinition/low-suicide-risk-order-set")
        self.assertEqual(inst.usage.value, FHIRString("This order set should be applied after assessing a patient for suicide risk, when the findings of that assessment indicate the patient has low suicide risk.").value)
        self.assertEqual(inst.usage.as_json(), "This order set should be applied after assessing a patient for suicide risk, when the findings of that assessment indicate the patient has low suicide risk.")
        self.assertEqual(inst.useContext[0].code.code.value, FHIRCode("age").value)
        self.assertEqual(inst.useContext[0].code.code.as_json(), "age")
        self.assertEqual(inst.useContext[0].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[0].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.value, FHIRCode("D000328").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.as_json(), "D000328")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display.value, FHIRString("Adult").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display.as_json(), "Adult")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.value, FHIRUri("https://meshb.nlm.nih.gov").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.as_json(), "https://meshb.nlm.nih.gov")
        self.assertEqual(inst.useContext[1].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[1].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[1].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[1].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code.value, FHIRCode("87512008").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code.as_json(), "87512008")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display.value, FHIRString("Mild major depression").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display.as_json(), "Mild major depression")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[2].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[2].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[2].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[2].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].code.value, FHIRCode("40379007").value)
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].code.as_json(), "40379007")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].display.value, FHIRString("Major depression, recurrent, mild").value)
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].display.as_json(), "Major depression, recurrent, mild")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[3].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[3].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[3].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[3].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].code.value, FHIRCode("394687007").value)
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].code.as_json(), "394687007")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].display.value, FHIRString("Low suicide risk").value)
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].display.as_json(), "Low suicide risk")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[4].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[4].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[4].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[4].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].code.value, FHIRCode("225337009").value)
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].code.as_json(), "225337009")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].display.value, FHIRString("Suicide risk assessment").value)
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].display.as_json(), "Suicide risk assessment")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[5].code.code.value, FHIRCode("user").value)
        self.assertEqual(inst.useContext[5].code.code.as_json(), "user")
        self.assertEqual(inst.useContext[5].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[5].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].code.value, FHIRCode("309343006").value)
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].code.as_json(), "309343006")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].display.value, FHIRString("Physician").value)
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].display.as_json(), "Physician")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.useContext[6].code.code.value, FHIRCode("venue").value)
        self.assertEqual(inst.useContext[6].code.code.as_json(), "venue")
        self.assertEqual(inst.useContext[6].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[6].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].code.value, FHIRCode("440655000").value)
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].code.as_json(), "440655000")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].display.value, FHIRString("Outpatient environment").value)
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].display.as_json(), "Outpatient environment")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.version.value, FHIRString("1.0.0").value)
        self.assertEqual(inst.version.as_json(), "1.0.0")

    def testPlanDefinition2(self):
        inst = self.instantiate_from('plandefinition-options-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a PlanDefinition instance')
        self.implPlanDefinition2(inst)

        js = inst.as_json()
        self.assertEqual("PlanDefinition", js["resourceType"])
        inst2 = plandefinition.PlanDefinition(js)
        self.implPlanDefinition2(inst2)

    def implPlanDefinition2(self, inst):
        self.assertEqual(inst.action[0].action[0].definitionCanonical.value, FHIRCanonical("#activitydefinition-medicationrequest-1").value)
        self.assertEqual(inst.action[0].action[0].definitionCanonical.as_json(), "#activitydefinition-medicationrequest-1")
        self.assertEqual(inst.action[0].action[0].id.value, FHIRString("medication-action-1").value)
        self.assertEqual(inst.action[0].action[0].id.as_json(), "medication-action-1")
        self.assertEqual(inst.action[0].action[0].title.value, FHIRString("Administer Medication 1").value)
        self.assertEqual(inst.action[0].action[0].title.as_json(), "Administer Medication 1")
        self.assertEqual(inst.action[0].action[1].definitionCanonical.value, FHIRCanonical("#activitydefinition-medicationrequest-2").value)
        self.assertEqual(inst.action[0].action[1].definitionCanonical.as_json(), "#activitydefinition-medicationrequest-2")
        self.assertEqual(inst.action[0].action[1].id.value, FHIRString("medication-action-2").value)
        self.assertEqual(inst.action[0].action[1].id.as_json(), "medication-action-2")
        self.assertEqual(inst.action[0].action[1].relatedAction[0].actionId.value, FHIRId("medication-action-1").value)
        self.assertEqual(inst.action[0].action[1].relatedAction[0].actionId.as_json(), "medication-action-1")
        self.assertEqual(inst.action[0].action[1].relatedAction[0].offsetDuration.unit.value, FHIRString("h").value)
        self.assertEqual(inst.action[0].action[1].relatedAction[0].offsetDuration.unit.as_json(), "h")
        self.assertEqual(inst.action[0].action[1].relatedAction[0].offsetDuration.value, 1)
        self.assertEqual(inst.action[0].action[1].relatedAction[0].relationship.value, FHIRCode("after-end").value)
        self.assertEqual(inst.action[0].action[1].relatedAction[0].relationship.as_json(), "after-end")
        self.assertEqual(inst.action[0].action[1].title.value, FHIRString("Administer Medication 2").value)
        self.assertEqual(inst.action[0].action[1].title.as_json(), "Administer Medication 2")
        self.assertEqual(inst.action[0].groupingBehavior.value, FHIRCode("logical-group").value)
        self.assertEqual(inst.action[0].groupingBehavior.as_json(), "logical-group")
        self.assertEqual(inst.action[0].selectionBehavior.value, FHIRCode("all").value)
        self.assertEqual(inst.action[0].selectionBehavior.as_json(), "all")
        self.assertEqual(inst.contained[0].id.value, FHIRString("activitydefinition-medicationrequest-1").value)
        self.assertEqual(inst.contained[0].id.as_json(), "activitydefinition-medicationrequest-1")
        self.assertEqual(inst.contained[1].id.value, FHIRString("activitydefinition-medicationrequest-2").value)
        self.assertEqual(inst.contained[1].id.as_json(), "activitydefinition-medicationrequest-2")
        self.assertEqual(inst.id.value, FHIRString("options-example").value)
        self.assertEqual(inst.id.as_json(), "options-example")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">[Put rendering here]</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">[Put rendering here]</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("This example illustrates relationships between actions.").value)
        self.assertEqual(inst.title.as_json(), "This example illustrates relationships between actions.")

    def testPlanDefinition3(self):
        inst = self.instantiate_from('plandefinition-protocol-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a PlanDefinition instance')
        self.implPlanDefinition3(inst)

        js = inst.as_json()
        self.assertEqual("PlanDefinition", js["resourceType"])
        inst2 = plandefinition.PlanDefinition(js)
        self.implPlanDefinition3(inst2)

    def implPlanDefinition3(self, inst):
        self.assertEqual(inst.action[0].cardinalityBehavior.value, FHIRCode("single").value)
        self.assertEqual(inst.action[0].cardinalityBehavior.as_json(), "single")
        self.assertEqual(inst.action[0].condition[0].expression.expression.value, FHIRString("exists ([Condition: Obesity]) or not exists ([Observation: BMI] O where O.effectiveDateTime 2 years or less before Today())").value)
        self.assertEqual(inst.action[0].condition[0].expression.expression.as_json(), "exists ([Condition: Obesity]) or not exists ([Observation: BMI] O where O.effectiveDateTime 2 years or less before Today())")
        self.assertEqual(inst.action[0].condition[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].condition[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].condition[0].kind.value, FHIRCode("applicability").value)
        self.assertEqual(inst.action[0].condition[0].kind.as_json(), "applicability")
        self.assertEqual(inst.action[0].definitionCanonical.value, FHIRCanonical("#procedure").value)
        self.assertEqual(inst.action[0].definitionCanonical.as_json(), "#procedure")
        self.assertEqual(inst.action[0].description.value, FHIRString("Measure, Weight, Height, Waist, Circumference; Calculate BMI").value)
        self.assertEqual(inst.action[0].description.as_json(), "Measure, Weight, Height, Waist, Circumference; Calculate BMI")
        self.assertEqual(inst.action[0].goalId[0].value, FHIRId("reduce-bmi-ratio").value)
        self.assertEqual(inst.action[0].goalId[0].as_json(), "reduce-bmi-ratio")
        self.assertEqual(inst.action[0].requiredBehavior.value, FHIRCode("must-unless-documented").value)
        self.assertEqual(inst.action[0].requiredBehavior.as_json(), "must-unless-documented")
        self.assertEqual(inst.action[0].title.value, FHIRString("Measure BMI").value)
        self.assertEqual(inst.action[0].title.as_json(), "Measure BMI")
        self.assertEqual(inst.author[0].name.value, FHIRString("National Heart, Lung, and Blood Institute").value)
        self.assertEqual(inst.author[0].name.as_json(), "National Heart, Lung, and Blood Institute")
        self.assertEqual(inst.author[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.author[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.author[0].telecom[0].value.value, FHIRString("https://www.nhlbi.nih.gov/health-pro/guidelines").value)
        self.assertEqual(inst.author[0].telecom[0].value.as_json(), "https://www.nhlbi.nih.gov/health-pro/guidelines")
        self.assertEqual(inst.contained[0].id.value, FHIRString("procedure").value)
        self.assertEqual(inst.contained[0].id.as_json(), "procedure")
        self.assertEqual(inst.goal[0].addresses[0].coding[0].code.value, FHIRCode("414916001").value)
        self.assertEqual(inst.goal[0].addresses[0].coding[0].code.as_json(), "414916001")
        self.assertEqual(inst.goal[0].addresses[0].coding[0].display.value, FHIRString("Obesity (disorder)").value)
        self.assertEqual(inst.goal[0].addresses[0].coding[0].display.as_json(), "Obesity (disorder)")
        self.assertEqual(inst.goal[0].addresses[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.goal[0].addresses[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.goal[0].category.text.value, FHIRString("Treatment").value)
        self.assertEqual(inst.goal[0].category.text.as_json(), "Treatment")
        self.assertEqual(inst.goal[0].description.text.value, FHIRString("Reduce BMI to below 25").value)
        self.assertEqual(inst.goal[0].description.text.as_json(), "Reduce BMI to below 25")
        self.assertEqual(inst.goal[0].documentation[0].display.value, FHIRString("Evaluation and Treatment Strategy").value)
        self.assertEqual(inst.goal[0].documentation[0].display.as_json(), "Evaluation and Treatment Strategy")
        self.assertEqual(inst.goal[0].documentation[0].type.value, FHIRCode("justification").value)
        self.assertEqual(inst.goal[0].documentation[0].type.as_json(), "justification")
        self.assertEqual(inst.goal[0].documentation[0].url.value, FHIRUrl("https://www.nhlbi.nih.gov/health-pro/guidelines/current/obesity-guidelines/e_textbook/txgd/42.htm").value)
        self.assertEqual(inst.goal[0].documentation[0].url.as_json(), "https://www.nhlbi.nih.gov/health-pro/guidelines/current/obesity-guidelines/e_textbook/txgd/42.htm")
        self.assertEqual(inst.goal[0].id.value, FHIRString("reduce-bmi-ratio").value)
        self.assertEqual(inst.goal[0].id.as_json(), "reduce-bmi-ratio")
        self.assertEqual(inst.goal[0].priority.text.value, FHIRString("medium-priority").value)
        self.assertEqual(inst.goal[0].priority.text.as_json(), "medium-priority")
        self.assertEqual(inst.goal[0].start.text.value, FHIRString("When the patient's BMI Ratio is at or above 25").value)
        self.assertEqual(inst.goal[0].start.text.as_json(), "When the patient's BMI Ratio is at or above 25")
        self.assertEqual(inst.goal[0].target[0].detailRange.high.unit.value, FHIRString("kg/m2").value)
        self.assertEqual(inst.goal[0].target[0].detailRange.high.unit.as_json(), "kg/m2")
        self.assertEqual(inst.goal[0].target[0].detailRange.high.value, 24.9)
        self.assertEqual(inst.goal[0].target[0].due.unit.value, FHIRString("a").value)
        self.assertEqual(inst.goal[0].target[0].due.unit.as_json(), "a")
        self.assertEqual(inst.goal[0].target[0].due.value, 1)
        self.assertEqual(inst.goal[0].target[0].measure.coding[0].code.value, FHIRCode("39156-5").value)
        self.assertEqual(inst.goal[0].target[0].measure.coding[0].code.as_json(), "39156-5")
        self.assertEqual(inst.goal[0].target[0].measure.coding[0].display.value, FHIRString("Body mass index (BMI) [Ratio]").value)
        self.assertEqual(inst.goal[0].target[0].measure.coding[0].display.as_json(), "Body mass index (BMI) [Ratio]")
        self.assertEqual(inst.goal[0].target[0].measure.coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.goal[0].target[0].measure.coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.id.value, FHIRString("protocol-example").value)
        self.assertEqual(inst.id.as_json(), "protocol-example")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://acme.org").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://acme.org")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("example-1").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "example-1")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.purpose.value, FHIRMarkdown("Example of A medical algorithm for assessment and treatment of overweight and obesity").value)
        self.assertEqual(inst.purpose.as_json(), "Example of A medical algorithm for assessment and treatment of overweight and obesity")
        self.assertEqual(inst.relatedArtifact[0].display.value, FHIRString("Overweight and Obesity Treatment Guidelines").value)
        self.assertEqual(inst.relatedArtifact[0].display.as_json(), "Overweight and Obesity Treatment Guidelines")
        self.assertEqual(inst.relatedArtifact[0].type.value, FHIRCode("derived-from").value)
        self.assertEqual(inst.relatedArtifact[0].type.as_json(), "derived-from")
        self.assertEqual(inst.relatedArtifact[0].url.value, FHIRUrl("http://www.nhlbi.nih.gov/health-pro/guidelines/current/obesity-guidelines/e_textbook/txgd/algorthm/algorthm.htm").value)
        self.assertEqual(inst.relatedArtifact[0].url.as_json(), "http://www.nhlbi.nih.gov/health-pro/guidelines/current/obesity-guidelines/e_textbook/txgd/algorthm/algorthm.htm")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Obesity Assessment Protocol").value)
        self.assertEqual(inst.title.as_json(), "Obesity Assessment Protocol")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("clinical-protocol").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "clinical-protocol")
        self.assertEqual(inst.useContext[0].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[0].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.value, FHIRCode("414916001").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.as_json(), "414916001")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display.value, FHIRString("Obesity (disorder)").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display.as_json(), "Obesity (disorder)")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")

    def testPlanDefinition4(self):
        inst = self.instantiate_from('plandefinition-example-cardiology-os.json')
        self.assertIsNotNone(inst, 'Must have instantiated a PlanDefinition instance')
        self.implPlanDefinition4(inst)

        js = inst.as_json()
        self.assertEqual("PlanDefinition", js["resourceType"])
        inst2 = plandefinition.PlanDefinition(js)
        self.implPlanDefinition4(inst2)

    def implPlanDefinition4(self, inst):
        self.assertEqual(inst.action[0].action[0].action[0].definitionCanonical.value, FHIRCanonical("#referralToCardiologyConsult").value)
        self.assertEqual(inst.action[0].action[0].action[0].definitionCanonical.as_json(), "#referralToCardiologyConsult")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].expression.expression.value, FHIRString("Now()").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].expression.expression.as_json(), "Now()")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].path.value, FHIRString("timing.event").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].path.as_json(), "timing.event")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].expression.expression.value, FHIRString("Code '261QM0850X' from CardiologyChestPainLogic.\"NUCC Provider Taxonomy\" display 'Adult Mental Health'").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].expression.expression.as_json(), "Code '261QM0850X' from CardiologyChestPainLogic.\"NUCC Provider Taxonomy\" display 'Adult Mental Health'")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].path.value, FHIRString("specialty").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].path.as_json(), "specialty")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].expression.expression.value, FHIRString("CardiologyChestPainLogic.ServiceRequestFulfillmentTime").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].expression.expression.as_json(), "CardiologyChestPainLogic.ServiceRequestFulfillmentTime")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].path.value, FHIRString("occurrenceDateTime").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].path.as_json(), "occurrenceDateTime")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].expression.expression.value, FHIRString("CardiologyChestPainLogic.Patient").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].expression.expression.as_json(), "CardiologyChestPainLogic.Patient")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].path.value, FHIRString("subject").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].path.as_json(), "subject")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].expression.expression.value, FHIRString("CardiologyChestPainLogic.Practitioner").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].expression.expression.as_json(), "CardiologyChestPainLogic.Practitioner")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].path.value, FHIRString("requester.agent").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].path.as_json(), "requester.agent")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].expression.expression.value, FHIRString("CardiologyChestPainLogic.CardiologyReferralReason").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].expression.expression.as_json(), "CardiologyChestPainLogic.CardiologyReferralReason")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].path.value, FHIRString("reasonCode").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].path.as_json(), "reasonCode")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].expression.expression.value, FHIRString("CardiologyChestPainLogic.RiskAssessment").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].expression.expression.as_json(), "CardiologyChestPainLogic.RiskAssessment")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].path.value, FHIRString("reasonReference").value)
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].path.as_json(), "reasonReference")
        self.assertEqual(inst.action[0].action[0].action[0].textEquivalent.value, FHIRString("Referral to cardiology to evaluate chest pain (routine)").value)
        self.assertEqual(inst.action[0].action[0].action[0].textEquivalent.as_json(), "Referral to cardiology to evaluate chest pain (routine)")
        self.assertEqual(inst.action[0].action[0].action[1].definitionCanonical.value, FHIRCanonical("#CollectReferralReason").value)
        self.assertEqual(inst.action[0].action[0].action[1].definitionCanonical.as_json(), "#CollectReferralReason")
        self.assertEqual(inst.action[0].action[0].action[1].title.value, FHIRString("Reason for cardiology consultation").value)
        self.assertEqual(inst.action[0].action[0].action[1].title.as_json(), "Reason for cardiology consultation")
        self.assertEqual(inst.action[0].action[0].action[2].definitionCanonical.value, FHIRCanonical("#CardiologyConsultationGoal").value)
        self.assertEqual(inst.action[0].action[0].action[2].definitionCanonical.as_json(), "#CardiologyConsultationGoal")
        self.assertEqual(inst.action[0].action[0].action[2].title.value, FHIRString("Goal of cardiology consultation").value)
        self.assertEqual(inst.action[0].action[0].action[2].title.as_json(), "Goal of cardiology consultation")
        self.assertEqual(inst.action[0].action[0].groupingBehavior.value, FHIRCode("logical-group").value)
        self.assertEqual(inst.action[0].action[0].groupingBehavior.as_json(), "logical-group")
        self.assertEqual(inst.action[0].action[0].selectionBehavior.value, FHIRCode("any").value)
        self.assertEqual(inst.action[0].action[0].selectionBehavior.as_json(), "any")
        self.assertEqual(inst.action[0].action[0].title.value, FHIRString("Consults and Referrals").value)
        self.assertEqual(inst.action[0].action[0].title.as_json(), "Consults and Referrals")
        self.assertEqual(inst.action[0].action[1].action[0].groupingBehavior.value, FHIRCode("logical-group").value)
        self.assertEqual(inst.action[0].action[1].action[0].groupingBehavior.as_json(), "logical-group")
        self.assertEqual(inst.action[0].action[1].action[0].selectionBehavior.value, FHIRCode("at-most-one").value)
        self.assertEqual(inst.action[0].action[1].action[0].selectionBehavior.as_json(), "at-most-one")
        self.assertEqual(inst.action[0].action[1].action[1].action[0].definitionCanonical.value, FHIRCanonical("#metoprololTartrate25Prescription").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[0].definitionCanonical.as_json(), "#metoprololTartrate25Prescription")
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[0].expression.expression.value, FHIRString("'draft'").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[0].expression.expression.as_json(), "'draft'")
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[0].path.value, FHIRString("status").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[0].path.as_json(), "status")
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[1].expression.expression.value, FHIRString("CardiologyChestPainLogic.Patient").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[1].expression.expression.as_json(), "CardiologyChestPainLogic.Patient")
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[1].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[1].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[1].path.value, FHIRString("patient").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[1].path.as_json(), "patient")
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[2].expression.expression.value, FHIRString("CardiologyChestPainLogic.Practitioner").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[2].expression.expression.as_json(), "CardiologyChestPainLogic.Practitioner")
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[2].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[2].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[2].path.value, FHIRString("prescriber").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[2].path.as_json(), "prescriber")
        self.assertEqual(inst.action[0].action[1].action[1].action[0].textEquivalent.value, FHIRString("metoprolol tartrate 25 mg tablet 1 tablet oral 2 time daily").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[0].textEquivalent.as_json(), "metoprolol tartrate 25 mg tablet 1 tablet oral 2 time daily")
        self.assertEqual(inst.action[0].action[1].action[1].action[1].definitionCanonical.value, FHIRCanonical("#metoprololTartrate50Prescription").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[1].definitionCanonical.as_json(), "#metoprololTartrate50Prescription")
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[0].expression.expression.value, FHIRString("'draft'").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[0].expression.expression.as_json(), "'draft'")
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[0].path.value, FHIRString("status").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[0].path.as_json(), "status")
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[1].expression.expression.value, FHIRString("CardiologyChestPainLogic.Patient").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[1].expression.expression.as_json(), "CardiologyChestPainLogic.Patient")
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[1].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[1].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[1].path.value, FHIRString("patient").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[1].path.as_json(), "patient")
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[2].expression.expression.value, FHIRString("CardiologyChestPainLogic.Practitioner").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[2].expression.expression.as_json(), "CardiologyChestPainLogic.Practitioner")
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[2].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[2].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[2].path.value, FHIRString("prescriber").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[2].path.as_json(), "prescriber")
        self.assertEqual(inst.action[0].action[1].action[1].action[1].textEquivalent.value, FHIRString("metoprolol tartrate 50 mg tablet 1 tablet oral 2 time daily").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[1].textEquivalent.as_json(), "metoprolol tartrate 50 mg tablet 1 tablet oral 2 time daily")
        self.assertEqual(inst.action[0].action[1].action[1].action[2].definitionCanonical.value, FHIRCanonical("#amlodipinePrescription").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[2].definitionCanonical.as_json(), "#amlodipinePrescription")
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[0].expression.expression.value, FHIRString("'draft'").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[0].expression.expression.as_json(), "'draft'")
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[0].path.value, FHIRString("status").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[0].path.as_json(), "status")
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[1].expression.expression.value, FHIRString("CardiologyChestPainLogic.Patient").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[1].expression.expression.as_json(), "CardiologyChestPainLogic.Patient")
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[1].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[1].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[1].path.value, FHIRString("patient").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[1].path.as_json(), "patient")
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[2].expression.expression.value, FHIRString("CardiologyChestPainLogic.Practitioner").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[2].expression.expression.as_json(), "CardiologyChestPainLogic.Practitioner")
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[2].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[2].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[2].path.value, FHIRString("prescriber").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[2].path.as_json(), "prescriber")
        self.assertEqual(inst.action[0].action[1].action[1].action[2].textEquivalent.value, FHIRString("amlodipine 5  tablet 1 tablet oral  daily").value)
        self.assertEqual(inst.action[0].action[1].action[1].action[2].textEquivalent.as_json(), "amlodipine 5  tablet 1 tablet oral  daily")
        self.assertEqual(inst.action[0].action[1].action[1].groupingBehavior.value, FHIRCode("logical-group").value)
        self.assertEqual(inst.action[0].action[1].action[1].groupingBehavior.as_json(), "logical-group")
        self.assertEqual(inst.action[0].action[1].action[1].selectionBehavior.value, FHIRCode("at-most-one").value)
        self.assertEqual(inst.action[0].action[1].action[1].selectionBehavior.as_json(), "at-most-one")
        self.assertEqual(inst.action[0].action[1].action[1].title.value, FHIRString("Antianginal Therapy").value)
        self.assertEqual(inst.action[0].action[1].action[1].title.as_json(), "Antianginal Therapy")
        self.assertEqual(inst.action[0].action[1].action[2].action[0].definitionCanonical.value, FHIRCanonical("#nitroglycerinPrescription").value)
        self.assertEqual(inst.action[0].action[1].action[2].action[0].definitionCanonical.as_json(), "#nitroglycerinPrescription")
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[0].expression.expression.value, FHIRString("'draft'").value)
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[0].expression.expression.as_json(), "'draft'")
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[0].path.value, FHIRString("status").value)
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[0].path.as_json(), "status")
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[1].expression.expression.value, FHIRString("CardiologyChestPainLogic.Patient").value)
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[1].expression.expression.as_json(), "CardiologyChestPainLogic.Patient")
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[1].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[1].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[1].path.value, FHIRString("patient").value)
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[1].path.as_json(), "patient")
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[2].expression.expression.value, FHIRString("CardiologyChestPainLogic.Practitioner").value)
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[2].expression.expression.as_json(), "CardiologyChestPainLogic.Practitioner")
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[2].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[2].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[2].path.value, FHIRString("prescriber").value)
        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[2].path.as_json(), "prescriber")
        self.assertEqual(inst.action[0].action[1].action[2].action[0].textEquivalent.value, FHIRString("nitroglycerin 0.4 mg tablet sub-lingual every 5 minutes as needed for chest pain; maximum 3 tablets").value)
        self.assertEqual(inst.action[0].action[1].action[2].action[0].textEquivalent.as_json(), "nitroglycerin 0.4 mg tablet sub-lingual every 5 minutes as needed for chest pain; maximum 3 tablets")
        self.assertEqual(inst.action[0].action[1].action[2].groupingBehavior.value, FHIRCode("logical-group").value)
        self.assertEqual(inst.action[0].action[1].action[2].groupingBehavior.as_json(), "logical-group")
        self.assertEqual(inst.action[0].action[1].action[2].selectionBehavior.value, FHIRCode("at-most-one").value)
        self.assertEqual(inst.action[0].action[1].action[2].selectionBehavior.as_json(), "at-most-one")
        self.assertEqual(inst.action[0].action[1].action[2].title.value, FHIRString("Nitroglycerin").value)
        self.assertEqual(inst.action[0].action[1].action[2].title.as_json(), "Nitroglycerin")
        self.assertEqual(inst.action[0].action[1].description.value, FHIRString("Consider the following medications for stable patients to be initiated prior to the cardiology consultation.").value)
        self.assertEqual(inst.action[0].action[1].description.as_json(), "Consider the following medications for stable patients to be initiated prior to the cardiology consultation.")
        self.assertEqual(inst.action[0].action[1].title.value, FHIRString("Medications").value)
        self.assertEqual(inst.action[0].action[1].title.as_json(), "Medications")
        self.assertEqual(inst.author[0].name.value, FHIRString("Bruce Bray MD").value)
        self.assertEqual(inst.author[0].name.as_json(), "Bruce Bray MD")
        self.assertEqual(inst.author[1].name.value, FHIRString("Scott Wall MD").value)
        self.assertEqual(inst.author[1].name.as_json(), "Scott Wall MD")
        self.assertEqual(inst.author[2].name.value, FHIRString("Aiden Abidov MD, PhD").value)
        self.assertEqual(inst.author[2].name.as_json(), "Aiden Abidov MD, PhD")
        self.assertEqual(inst.contained[0].id.value, FHIRString("cardiology-chestPain-logic").value)
        self.assertEqual(inst.contained[0].id.as_json(), "cardiology-chestPain-logic")
        self.assertEqual(inst.contained[1].id.value, FHIRString("referralToCardiologyConsult").value)
        self.assertEqual(inst.contained[1].id.as_json(), "referralToCardiologyConsult")
        self.assertEqual(inst.contained[2].id.value, FHIRString("metoprololTartrate25Prescription").value)
        self.assertEqual(inst.contained[2].id.as_json(), "metoprololTartrate25Prescription")
        self.assertEqual(inst.contained[3].id.value, FHIRString("metoprololTartrate25Medication").value)
        self.assertEqual(inst.contained[3].id.as_json(), "metoprololTartrate25Medication")
        self.assertEqual(inst.contained[4].id.value, FHIRString("metoprololTartrate25Substance").value)
        self.assertEqual(inst.contained[4].id.as_json(), "metoprololTartrate25Substance")
        self.assertEqual(inst.contained[5].id.value, FHIRString("metoprololTartrate50Prescription").value)
        self.assertEqual(inst.contained[5].id.as_json(), "metoprololTartrate50Prescription")
        self.assertEqual(inst.contained[6].id.value, FHIRString("metoprololTartrate50Medication").value)
        self.assertEqual(inst.contained[6].id.as_json(), "metoprololTartrate50Medication")
        self.assertEqual(inst.contained[7].id.value, FHIRString("metoprololTartrate50Substance").value)
        self.assertEqual(inst.contained[7].id.as_json(), "metoprololTartrate50Substance")
        self.assertEqual(inst.contained[8].id.value, FHIRString("nitroglycerinPrescription").value)
        self.assertEqual(inst.contained[8].id.as_json(), "nitroglycerinPrescription")
        self.assertEqual(inst.contained[9].id.value, FHIRString("nitroglycerinMedication").value)
        self.assertEqual(inst.contained[9].id.as_json(), "nitroglycerinMedication")
        self.assertEqual(inst.copyright.value, FHIRMarkdown("© Copyright Cognitive Medical Systems, Inc. 9444 Waples Street Suite 300 San Diego, CA 92121").value)
        self.assertEqual(inst.copyright.as_json(), "© Copyright Cognitive Medical Systems, Inc. 9444 Waples Street Suite 300 San Diego, CA 92121")
        self.assertEqual(inst.date.value, FHIRDateTime("2017-08-29").value)
        self.assertEqual(inst.date.as_json(), "2017-08-29")
        self.assertEqual(inst.id.value, FHIRString("example-cardiology-os").value)
        self.assertEqual(inst.id.as_json(), "example-cardiology-os")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:va.gov:kbs:knart:artifact:r1").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:va.gov:kbs:knart:artifact:r1")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("bb7ccea6-9744-4743-854a-bcffd87191f6").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "bb7ccea6-9744-4743-854a-bcffd87191f6")
        self.assertEqual(inst.identifier[1].system.value, FHIRUri("urn:va.gov:kbs:contract:VA118-16-D-1008:to:VA-118-16-F-1008-0007").value)
        self.assertEqual(inst.identifier[1].system.as_json(), "urn:va.gov:kbs:contract:VA118-16-D-1008:to:VA-118-16-F-1008-0007")
        self.assertEqual(inst.identifier[1].value.value, FHIRString("CLIN0004AG").value)
        self.assertEqual(inst.identifier[1].value.as_json(), "CLIN0004AG")
        self.assertEqual(inst.identifier[2].system.value, FHIRUri("urn:cognitivemedicine.com:lab:jira").value)
        self.assertEqual(inst.identifier[2].system.as_json(), "urn:cognitivemedicine.com:lab:jira")
        self.assertEqual(inst.identifier[2].value.value, FHIRString("KP-914").value)
        self.assertEqual(inst.identifier[2].value.as_json(), "KP-914")
        self.assertEqual(inst.library[0].value, FHIRCanonical("#cardiology-chestPain-logic").value)
        self.assertEqual(inst.library[0].as_json(), "#cardiology-chestPain-logic")
        self.assertEqual(inst.name.value, FHIRString("ChestPainCoronaryArteryDiseaseOrderSetKNART").value)
        self.assertEqual(inst.name.as_json(), "ChestPainCoronaryArteryDiseaseOrderSetKNART")
        self.assertEqual(inst.publisher.value, FHIRString("Department of Veterans Affairs").value)
        self.assertEqual(inst.publisher.as_json(), "Department of Veterans Affairs")
        self.assertEqual(inst.relatedArtifact[0].display.value, FHIRString("Cardiology: Chest Pain (CP) / Coronary Artery Disease (CAD) Clinical Content White Paper").value)
        self.assertEqual(inst.relatedArtifact[0].display.as_json(), "Cardiology: Chest Pain (CP) / Coronary Artery Disease (CAD) Clinical Content White Paper")
        self.assertEqual(inst.relatedArtifact[0].type.value, FHIRCode("derived-from").value)
        self.assertEqual(inst.relatedArtifact[0].type.as_json(), "derived-from")
        self.assertEqual(inst.relatedArtifact[0].url.value, FHIRUrl("NEED-A-URL-HERE").value)
        self.assertEqual(inst.relatedArtifact[0].url.as_json(), "NEED-A-URL-HERE")
        self.assertEqual(inst.relatedArtifact[1].display.value, FHIRString("Outcome CVD (coronary death, myocardial infarction, coronary insufficiency, angina, ischemic stroke, hemorrhagic stroke, transient ischemic attack, peripheral artery disease, heart failure)").value)
        self.assertEqual(inst.relatedArtifact[1].display.as_json(), "Outcome CVD (coronary death, myocardial infarction, coronary insufficiency, angina, ischemic stroke, hemorrhagic stroke, transient ischemic attack, peripheral artery disease, heart failure)")
        self.assertEqual(inst.relatedArtifact[1].type.value, FHIRCode("justification").value)
        self.assertEqual(inst.relatedArtifact[1].type.as_json(), "justification")
        self.assertEqual(inst.relatedArtifact[1].url.value, FHIRUrl("https://www.framinghamheartstudy.org/risk-functions/cardiovascular-disease/10-year-risk.php").value)
        self.assertEqual(inst.relatedArtifact[1].url.as_json(), "https://www.framinghamheartstudy.org/risk-functions/cardiovascular-disease/10-year-risk.php")
        self.assertEqual(inst.relatedArtifact[2].display.value, FHIRString("General cardiovascular risk profile for use in primary care: the Framingham Heart Study").value)
        self.assertEqual(inst.relatedArtifact[2].display.as_json(), "General cardiovascular risk profile for use in primary care: the Framingham Heart Study")
        self.assertEqual(inst.relatedArtifact[2].type.value, FHIRCode("justification").value)
        self.assertEqual(inst.relatedArtifact[2].type.as_json(), "justification")
        self.assertEqual(inst.relatedArtifact[2].url.value, FHIRUrl("https://www.framinghamheartstudy.org/risk-functions/cardiovascular-disease/10-year-risk.php").value)
        self.assertEqual(inst.relatedArtifact[2].url.as_json(), "https://www.framinghamheartstudy.org/risk-functions/cardiovascular-disease/10-year-risk.php")
        self.assertEqual(inst.relatedArtifact[3].type.value, FHIRCode("justification").value)
        self.assertEqual(inst.relatedArtifact[3].type.as_json(), "justification")
        self.assertEqual(inst.relatedArtifact[3].url.value, FHIRUrl("NEED-A-URL-HERE").value)
        self.assertEqual(inst.relatedArtifact[3].url.as_json(), "NEED-A-URL-HERE")
        self.assertEqual(inst.relatedArtifact[4].type.value, FHIRCode("justification").value)
        self.assertEqual(inst.relatedArtifact[4].type.as_json(), "justification")
        self.assertEqual(inst.relatedArtifact[4].url.value, FHIRUrl("NEED-A-URL-HERE").value)
        self.assertEqual(inst.relatedArtifact[4].url.as_json(), "NEED-A-URL-HERE")
        self.assertEqual(inst.relatedArtifact[5].display.value, FHIRString("LABEL: ASPIRIN 81 MG- aspirin tablet, coated").value)
        self.assertEqual(inst.relatedArtifact[5].display.as_json(), "LABEL: ASPIRIN 81 MG- aspirin tablet, coated")
        self.assertEqual(inst.relatedArtifact[5].type.value, FHIRCode("justification").value)
        self.assertEqual(inst.relatedArtifact[5].type.as_json(), "justification")
        self.assertEqual(inst.relatedArtifact[5].url.value, FHIRUrl("https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=b4064039-2345-4227-b83d-54dc13a838d3").value)
        self.assertEqual(inst.relatedArtifact[5].url.as_json(), "https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=b4064039-2345-4227-b83d-54dc13a838d3")
        self.assertEqual(inst.relatedArtifact[6].display.value, FHIRString("LABEL: CLOPIDOGREL- clopidogrel bisulfate tablet, film coated").value)
        self.assertEqual(inst.relatedArtifact[6].display.as_json(), "LABEL: CLOPIDOGREL- clopidogrel bisulfate tablet, film coated")
        self.assertEqual(inst.relatedArtifact[6].type.value, FHIRCode("justification").value)
        self.assertEqual(inst.relatedArtifact[6].type.as_json(), "justification")
        self.assertEqual(inst.relatedArtifact[6].url.value, FHIRUrl("https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=7fe85155-bc00-406b-b097-e8aece187a8a").value)
        self.assertEqual(inst.relatedArtifact[6].url.as_json(), "https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=7fe85155-bc00-406b-b097-e8aece187a8a")
        self.assertEqual(inst.relatedArtifact[7].display.value, FHIRString("LABEL: LIPITOR- atorvastatin calcium tablet, film coated").value)
        self.assertEqual(inst.relatedArtifact[7].display.as_json(), "LABEL: LIPITOR- atorvastatin calcium tablet, film coated")
        self.assertEqual(inst.relatedArtifact[7].type.value, FHIRCode("justification").value)
        self.assertEqual(inst.relatedArtifact[7].type.as_json(), "justification")
        self.assertEqual(inst.relatedArtifact[7].url.value, FHIRUrl("https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=7fe85155-bc00-406b-b097-e8aece187a8a").value)
        self.assertEqual(inst.relatedArtifact[7].url.as_json(), "https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=7fe85155-bc00-406b-b097-e8aece187a8a")
        self.assertEqual(inst.relatedArtifact[8].display.value, FHIRString("LABEL: METOPROLOL SUCCINATE EXTENDED-RELEASE - metoprolol succinate tablet, film coated, extended release").value)
        self.assertEqual(inst.relatedArtifact[8].display.as_json(), "LABEL: METOPROLOL SUCCINATE EXTENDED-RELEASE - metoprolol succinate tablet, film coated, extended release")
        self.assertEqual(inst.relatedArtifact[8].type.value, FHIRCode("justification").value)
        self.assertEqual(inst.relatedArtifact[8].type.as_json(), "justification")
        self.assertEqual(inst.relatedArtifact[8].url.value, FHIRUrl("https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=2d948600-35d8-4490-983b-918bdce488c8").value)
        self.assertEqual(inst.relatedArtifact[8].url.as_json(), "https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=2d948600-35d8-4490-983b-918bdce488c8")
        self.assertEqual(inst.relatedArtifact[9].display.value, FHIRString("LABEL: NITROGLYCERIN- nitroglycerin tablet").value)
        self.assertEqual(inst.relatedArtifact[9].display.as_json(), "LABEL: NITROGLYCERIN- nitroglycerin tablet")
        self.assertEqual(inst.relatedArtifact[9].type.value, FHIRCode("justification").value)
        self.assertEqual(inst.relatedArtifact[9].type.as_json(), "justification")
        self.assertEqual(inst.relatedArtifact[9].url.value, FHIRUrl("https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=67bf2a15-b115-47ac-ae28-ce2dafd6b5c9").value)
        self.assertEqual(inst.relatedArtifact[9].url.as_json(), "https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=67bf2a15-b115-47ac-ae28-ce2dafd6b5c9")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Chest Pain (CP) - Coronary Artery Disease (CAD) Order Set KNART").value)
        self.assertEqual(inst.title.as_json(), "Chest Pain (CP) - Coronary Artery Disease (CAD) Order Set KNART")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("order-set").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "order-set")
        self.assertEqual(inst.type.coding[0].display.value, FHIRString("Order Set").value)
        self.assertEqual(inst.type.coding[0].display.as_json(), "Order Set")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/plan-definition-type").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/plan-definition-type")
        self.assertEqual(inst.url.value, FHIRUri("http://va.gov/kas/orderset/B5-Cardiology-ChestPainCAD-OS").value)
        self.assertEqual(inst.url.as_json(), "http://va.gov/kas/orderset/B5-Cardiology-ChestPainCAD-OS")
        self.assertEqual(inst.useContext[0].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[0].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[0].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[0].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.value, FHIRCode("look up value").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.as_json(), "look up value")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display.value, FHIRString("appropriate snomed condition").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display.as_json(), "appropriate snomed condition")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.version.value, FHIRString("0.1").value)
        self.assertEqual(inst.version.as_json(), "0.1")

    def testPlanDefinition5(self):
        inst = self.instantiate_from('plandefinition-predecessor-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a PlanDefinition instance')
        self.implPlanDefinition5(inst)

        js = inst.as_json()
        self.assertEqual("PlanDefinition", js["resourceType"])
        inst2 = plandefinition.PlanDefinition(js)
        self.implPlanDefinition5(inst2)

    def implPlanDefinition5(self, inst):
        self.assertEqual(inst.action[0].action[0].condition[0].expression.expression.value, FHIRString("Should Administer Zika Virus Exposure Assessment").value)
        self.assertEqual(inst.action[0].action[0].condition[0].expression.expression.as_json(), "Should Administer Zika Virus Exposure Assessment")
        self.assertEqual(inst.action[0].action[0].condition[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[0].condition[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[0].condition[0].kind.value, FHIRCode("applicability").value)
        self.assertEqual(inst.action[0].action[0].condition[0].kind.as_json(), "applicability")
        self.assertEqual(inst.action[0].action[0].definitionCanonical.value, FHIRCanonical("ActivityDefinition/administer-zika-virus-exposure-assessment").value)
        self.assertEqual(inst.action[0].action[0].definitionCanonical.as_json(), "ActivityDefinition/administer-zika-virus-exposure-assessment")
        self.assertEqual(inst.action[0].action[1].condition[0].expression.expression.value, FHIRString("Should Order Serum + Urine rRT-PCR Test").value)
        self.assertEqual(inst.action[0].action[1].condition[0].expression.expression.as_json(), "Should Order Serum + Urine rRT-PCR Test")
        self.assertEqual(inst.action[0].action[1].condition[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[1].condition[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[1].condition[0].kind.value, FHIRCode("applicability").value)
        self.assertEqual(inst.action[0].action[1].condition[0].kind.as_json(), "applicability")
        self.assertEqual(inst.action[0].action[1].definitionCanonical.value, FHIRCanonical("ActivityDefinition/order-serum-urine-rrt-pcr-test").value)
        self.assertEqual(inst.action[0].action[1].definitionCanonical.as_json(), "ActivityDefinition/order-serum-urine-rrt-pcr-test")
        self.assertEqual(inst.action[0].action[2].condition[0].expression.expression.value, FHIRString("Should Order Serum Zika Virus IgM + Dengue Virus IgM").value)
        self.assertEqual(inst.action[0].action[2].condition[0].expression.expression.as_json(), "Should Order Serum Zika Virus IgM + Dengue Virus IgM")
        self.assertEqual(inst.action[0].action[2].condition[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[2].condition[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[2].condition[0].kind.value, FHIRCode("applicability").value)
        self.assertEqual(inst.action[0].action[2].condition[0].kind.as_json(), "applicability")
        self.assertEqual(inst.action[0].action[2].definitionCanonical.value, FHIRCanonical("ActivityDefinition/order-serum-zika-dengue-virus-igm").value)
        self.assertEqual(inst.action[0].action[2].definitionCanonical.as_json(), "ActivityDefinition/order-serum-zika-dengue-virus-igm")
        self.assertEqual(inst.action[0].action[3].condition[0].expression.expression.value, FHIRString("Should Consider IgM Antibody Testing").value)
        self.assertEqual(inst.action[0].action[3].condition[0].expression.expression.as_json(), "Should Consider IgM Antibody Testing")
        self.assertEqual(inst.action[0].action[3].condition[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[3].condition[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[3].condition[0].kind.value, FHIRCode("applicability").value)
        self.assertEqual(inst.action[0].action[3].condition[0].kind.as_json(), "applicability")
        self.assertEqual(inst.action[0].action[3].definitionCanonical.value, FHIRCanonical("ActivityDefinition/consider-igm-antibody-testing").value)
        self.assertEqual(inst.action[0].action[3].definitionCanonical.as_json(), "ActivityDefinition/consider-igm-antibody-testing")
        self.assertEqual(inst.action[0].action[4].action[0].definitionCanonical.value, FHIRCanonical("ActivityDefinition/provide-mosquito-prevention-advice").value)
        self.assertEqual(inst.action[0].action[4].action[0].definitionCanonical.as_json(), "ActivityDefinition/provide-mosquito-prevention-advice")
        self.assertEqual(inst.action[0].action[4].action[1].definitionCanonical.value, FHIRCanonical("ActivityDefinition/provide-contraception-advice").value)
        self.assertEqual(inst.action[0].action[4].action[1].definitionCanonical.as_json(), "ActivityDefinition/provide-contraception-advice")
        self.assertEqual(inst.action[0].action[4].condition[0].expression.expression.value, FHIRString("Should Provide Mosquito Prevention and Contraception Advice").value)
        self.assertEqual(inst.action[0].action[4].condition[0].expression.expression.as_json(), "Should Provide Mosquito Prevention and Contraception Advice")
        self.assertEqual(inst.action[0].action[4].condition[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].action[4].condition[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].action[4].condition[0].kind.value, FHIRCode("applicability").value)
        self.assertEqual(inst.action[0].action[4].condition[0].kind.as_json(), "applicability")
        self.assertEqual(inst.action[0].condition[0].expression.expression.value, FHIRString("Is Patient Pregnant").value)
        self.assertEqual(inst.action[0].condition[0].expression.expression.as_json(), "Is Patient Pregnant")
        self.assertEqual(inst.action[0].condition[0].expression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.action[0].condition[0].expression.language.as_json(), "text/cql")
        self.assertEqual(inst.action[0].condition[0].kind.value, FHIRCode("applicability").value)
        self.assertEqual(inst.action[0].condition[0].kind.as_json(), "applicability")
        self.assertEqual(inst.action[0].title.value, FHIRString("Zika Virus Assessment").value)
        self.assertEqual(inst.action[0].title.as_json(), "Zika Virus Assessment")
        self.assertEqual(inst.action[0].trigger[0].name.value, FHIRString("patient-view").value)
        self.assertEqual(inst.action[0].trigger[0].name.as_json(), "patient-view")
        self.assertEqual(inst.action[0].trigger[0].type.value, FHIRCode("named-event").value)
        self.assertEqual(inst.action[0].trigger[0].type.as_json(), "named-event")
        self.assertEqual(inst.date.value, FHIRDateTime("2016-11-14").value)
        self.assertEqual(inst.date.as_json(), "2016-11-14")
        self.assertEqual(inst.description.value, FHIRMarkdown("Zika Virus Management intervention describing the CDC Guidelines for Zika Virus Reporting and Management.").value)
        self.assertEqual(inst.description.as_json(), "Zika Virus Management intervention describing the CDC Guidelines for Zika Virus Reporting and Management.")
        self.assertEqual(inst.id.value, FHIRString("zika-virus-intervention-initial").value)
        self.assertEqual(inst.id.as_json(), "zika-virus-intervention-initial")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("zika-virus-intervention").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "zika-virus-intervention")
        self.assertEqual(inst.library[0].value, FHIRCanonical("Library/zika-virus-intervention-logic").value)
        self.assertEqual(inst.library[0].as_json(), "Library/zika-virus-intervention-logic")
        self.assertEqual(inst.relatedArtifact[0].type.value, FHIRCode("derived-from").value)
        self.assertEqual(inst.relatedArtifact[0].type.as_json(), "derived-from")
        self.assertEqual(inst.relatedArtifact[0].url.value, FHIRUrl("https://www.cdc.gov/mmwr/volumes/65/wr/mm6539e1.htm?s_cid=mm6539e1_w").value)
        self.assertEqual(inst.relatedArtifact[0].url.as_json(), "https://www.cdc.gov/mmwr/volumes/65/wr/mm6539e1.htm?s_cid=mm6539e1_w")
        self.assertEqual(inst.relatedArtifact[1].resource.value, FHIRCanonical("PlanDefinition/zika-virus-intervention").value)
        self.assertEqual(inst.relatedArtifact[1].resource.as_json(), "PlanDefinition/zika-virus-intervention")
        self.assertEqual(inst.relatedArtifact[1].type.value, FHIRCode("successor").value)
        self.assertEqual(inst.relatedArtifact[1].type.as_json(), "successor")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Example Zika Virus Intervention").value)
        self.assertEqual(inst.title.as_json(), "Example Zika Virus Intervention")
        self.assertEqual(inst.topic[0].text.value, FHIRString("Zika Virus Management").value)
        self.assertEqual(inst.topic[0].text.as_json(), "Zika Virus Management")
        self.assertEqual(inst.url.value, FHIRUri("http://example.org/PlanDefinition/zika-virus-intervention").value)
        self.assertEqual(inst.url.as_json(), "http://example.org/PlanDefinition/zika-virus-intervention")
        self.assertEqual(inst.version.value, FHIRString("1.0.0").value)
        self.assertEqual(inst.version.as_json(), "1.0.0")

    def testPlanDefinition6(self):
        inst = self.instantiate_from('plandefinition-example-kdn5-simplified.json')
        self.assertIsNotNone(inst, 'Must have instantiated a PlanDefinition instance')
        self.implPlanDefinition6(inst)

        js = inst.as_json()
        self.assertEqual("PlanDefinition", js["resourceType"])
        inst2 = plandefinition.PlanDefinition(js)
        self.implPlanDefinition6(inst2)

    def implPlanDefinition6(self, inst):
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].definitionCanonical.value, FHIRCanonical("#1111").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].definitionCanonical.as_json(), "#1111")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].url.value, FHIRUri("day").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].url.as_json(), "day")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].valueInteger, 1)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].url.value, FHIRUri("day").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].url.as_json(), "day")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].valueInteger, 8)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/timing-daysOfCycle").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/timing-daysOfCycle")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].id.value, FHIRString("action-1").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].id.as_json(), "action-1")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].textEquivalent.value, FHIRString("Gemcitabine 1250 mg/m² IV over 30 minutes on days 1 and 8").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].textEquivalent.as_json(), "Gemcitabine 1250 mg/m² IV over 30 minutes on days 1 and 8")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].definitionCanonical.value, FHIRCanonical("#2222").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].definitionCanonical.as_json(), "#2222")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].url.value, FHIRUri("day").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].url.as_json(), "day")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].valueInteger, 1)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/timing-daysOfCycle").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/timing-daysOfCycle")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].id.value, FHIRString("action-2").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].id.as_json(), "action-2")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].relatedAction[0].actionId.value, FHIRId("action-1").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].relatedAction[0].actionId.as_json(), "action-1")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].relatedAction[0].relationship.value, FHIRCode("concurrent-with-start").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].relatedAction[0].relationship.as_json(), "concurrent-with-start")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].textEquivalent.value, FHIRString("CARBOplatin AUC 5 IV over 30 minutes on Day 1").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].textEquivalent.as_json(), "CARBOplatin AUC 5 IV over 30 minutes on Day 1")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].id.value, FHIRString("cycle-definition-1").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].id.as_json(), "cycle-definition-1")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].textEquivalent.value, FHIRString("21-day cycle for 6 cycles").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].textEquivalent.as_json(), "21-day cycle for 6 cycles")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.count.value, FHIRPositiveInt('6').value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.count.as_json(), 6)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.duration, 21)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.durationUnit.value, FHIRCode("d").value)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.durationUnit.as_json(), "d")
        self.assertEqual(inst.action[0].action[0].action[0].groupingBehavior.value, FHIRCode("sentence-group").value)
        self.assertEqual(inst.action[0].action[0].action[0].groupingBehavior.as_json(), "sentence-group")
        self.assertEqual(inst.action[0].action[0].action[0].selectionBehavior.value, FHIRCode("exactly-one").value)
        self.assertEqual(inst.action[0].action[0].action[0].selectionBehavior.as_json(), "exactly-one")
        self.assertEqual(inst.action[0].action[0].selectionBehavior.value, FHIRCode("all").value)
        self.assertEqual(inst.action[0].action[0].selectionBehavior.as_json(), "all")
        self.assertEqual(inst.action[0].selectionBehavior.value, FHIRCode("exactly-one").value)
        self.assertEqual(inst.action[0].selectionBehavior.as_json(), "exactly-one")
        self.assertEqual(inst.approvalDate.value, FHIRDate("2016-07-27").value)
        self.assertEqual(inst.approvalDate.as_json(), "2016-07-27")
        self.assertEqual(inst.approvalDate.date, FHIRDate('2016-07-27').date)
        self.assertEqual(inst.author[0].name.value, FHIRString("Lee Surprenant").value)
        self.assertEqual(inst.author[0].name.as_json(), "Lee Surprenant")
        self.assertEqual(inst.contained[0].id.value, FHIRString("1111").value)
        self.assertEqual(inst.contained[0].id.as_json(), "1111")
        self.assertEqual(inst.contained[1].id.value, FHIRString("2222").value)
        self.assertEqual(inst.contained[1].id.as_json(), "2222")
        self.assertEqual(inst.copyright.value, FHIRMarkdown("All rights reserved.").value)
        self.assertEqual(inst.copyright.as_json(), "All rights reserved.")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.id.value, FHIRString("KDN5").value)
        self.assertEqual(inst.id.as_json(), "KDN5")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://example.org/ordertemplates").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://example.org/ordertemplates")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("KDN5").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "KDN5")
        self.assertEqual(inst.lastReviewDate.value, FHIRDate("2016-07-27").value)
        self.assertEqual(inst.lastReviewDate.as_json(), "2016-07-27")
        self.assertEqual(inst.lastReviewDate.date, FHIRDate('2016-07-27').date)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.publisher.value, FHIRString("National Comprehensive Cancer Network, Inc.").value)
        self.assertEqual(inst.publisher.as_json(), "National Comprehensive Cancer Network, Inc.")
        self.assertEqual(inst.relatedArtifact[0].display.value, FHIRString("NCCN Guidelines for Kidney Cancer. V.2.2016").value)
        self.assertEqual(inst.relatedArtifact[0].display.as_json(), "NCCN Guidelines for Kidney Cancer. V.2.2016")
        self.assertEqual(inst.relatedArtifact[0].type.value, FHIRCode("derived-from").value)
        self.assertEqual(inst.relatedArtifact[0].type.as_json(), "derived-from")
        self.assertEqual(inst.relatedArtifact[0].url.value, FHIRUrl("http://www.example.org/professionals/physician_gls/PDF/kidney.pdf").value)
        self.assertEqual(inst.relatedArtifact[0].url.as_json(), "http://www.example.org/professionals/physician_gls/PDF/kidney.pdf")
        self.assertEqual(inst.relatedArtifact[1].citation.value, FHIRMarkdown("Oudard S, et al. J Urol. 2007;177(5):1698-702").value)
        self.assertEqual(inst.relatedArtifact[1].citation.as_json(), "Oudard S, et al. J Urol. 2007;177(5):1698-702")
        self.assertEqual(inst.relatedArtifact[1].type.value, FHIRCode("citation").value)
        self.assertEqual(inst.relatedArtifact[1].type.as_json(), "citation")
        self.assertEqual(inst.relatedArtifact[1].url.value, FHIRUrl("http://www.ncbi.nlm.nih.gov/pubmed/17437788").value)
        self.assertEqual(inst.relatedArtifact[1].url.as_json(), "http://www.ncbi.nlm.nih.gov/pubmed/17437788")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("additional").value)
        self.assertEqual(inst.text.status.as_json(), "additional")
        self.assertEqual(inst.title.value, FHIRString("Gemcitabine/CARBOplatin").value)
        self.assertEqual(inst.title.as_json(), "Gemcitabine/CARBOplatin")
        self.assertEqual(inst.type.text.value, FHIRString("Chemotherapy Order Template").value)
        self.assertEqual(inst.type.text.as_json(), "Chemotherapy Order Template")
        self.assertEqual(inst.useContext[0].code.code.value, FHIRCode("treamentSetting-or-diseaseStatus").value)
        self.assertEqual(inst.useContext[0].code.code.as_json(), "treamentSetting-or-diseaseStatus")
        self.assertEqual(inst.useContext[0].code.system.value, FHIRUri("http://example.org/fhir/CodeSystem/indications").value)
        self.assertEqual(inst.useContext[0].code.system.as_json(), "http://example.org/fhir/CodeSystem/indications")
        self.assertEqual(inst.useContext[0].extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/usagecontext-group").value)
        self.assertEqual(inst.useContext[0].extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/usagecontext-group")
        self.assertEqual(inst.useContext[0].extension[0].valueString.value, FHIRString("A").value)
        self.assertEqual(inst.useContext[0].extension[0].valueString.as_json(), "A")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.text.value, FHIRString("Metastatic").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.text.as_json(), "Metastatic")
        self.assertEqual(inst.useContext[1].code.code.value, FHIRCode("disease-or-histology").value)
        self.assertEqual(inst.useContext[1].code.code.as_json(), "disease-or-histology")
        self.assertEqual(inst.useContext[1].code.system.value, FHIRUri("http://example.org/fhir/CodeSystem/indications").value)
        self.assertEqual(inst.useContext[1].code.system.as_json(), "http://example.org/fhir/CodeSystem/indications")
        self.assertEqual(inst.useContext[1].extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/usagecontext-group").value)
        self.assertEqual(inst.useContext[1].extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/usagecontext-group")
        self.assertEqual(inst.useContext[1].extension[0].valueString.value, FHIRString("A").value)
        self.assertEqual(inst.useContext[1].extension[0].valueString.as_json(), "A")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.text.value, FHIRString("Collecting Duct/Medullary Subtypes").value)
        self.assertEqual(inst.useContext[1].valueCodeableConcept.text.as_json(), "Collecting Duct/Medullary Subtypes")
        self.assertEqual(inst.useContext[2].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[2].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[2].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[2].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[2].extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/usagecontext-group").value)
        self.assertEqual(inst.useContext[2].extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/usagecontext-group")
        self.assertEqual(inst.useContext[2].extension[0].valueString.value, FHIRString("A").value)
        self.assertEqual(inst.useContext[2].extension[0].valueString.as_json(), "A")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.text.value, FHIRString("Kidney Cancer").value)
        self.assertEqual(inst.useContext[2].valueCodeableConcept.text.as_json(), "Kidney Cancer")
        self.assertEqual(inst.useContext[3].code.code.value, FHIRCode("treatmentSetting-or-diseaseStatus").value)
        self.assertEqual(inst.useContext[3].code.code.as_json(), "treatmentSetting-or-diseaseStatus")
        self.assertEqual(inst.useContext[3].code.system.value, FHIRUri("http://example.org/fhir/CodeSystem/indications").value)
        self.assertEqual(inst.useContext[3].code.system.as_json(), "http://example.org/fhir/CodeSystem/indications")
        self.assertEqual(inst.useContext[3].extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/usagecontext-group").value)
        self.assertEqual(inst.useContext[3].extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/usagecontext-group")
        self.assertEqual(inst.useContext[3].extension[0].valueString.value, FHIRString("B").value)
        self.assertEqual(inst.useContext[3].extension[0].valueString.as_json(), "B")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.text.value, FHIRString("Relapsed").value)
        self.assertEqual(inst.useContext[3].valueCodeableConcept.text.as_json(), "Relapsed")
        self.assertEqual(inst.useContext[4].code.code.value, FHIRCode("disease-or-histology").value)
        self.assertEqual(inst.useContext[4].code.code.as_json(), "disease-or-histology")
        self.assertEqual(inst.useContext[4].code.system.value, FHIRUri("http://example.org/fhir/CodeSystem/indications").value)
        self.assertEqual(inst.useContext[4].code.system.as_json(), "http://example.org/fhir/CodeSystem/indications")
        self.assertEqual(inst.useContext[4].extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/usagecontext-group").value)
        self.assertEqual(inst.useContext[4].extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/usagecontext-group")
        self.assertEqual(inst.useContext[4].extension[0].valueString.value, FHIRString("B").value)
        self.assertEqual(inst.useContext[4].extension[0].valueString.as_json(), "B")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.text.value, FHIRString("Collecting Duct/Medullary Subtypes").value)
        self.assertEqual(inst.useContext[4].valueCodeableConcept.text.as_json(), "Collecting Duct/Medullary Subtypes")
        self.assertEqual(inst.useContext[5].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[5].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[5].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[5].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[5].extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/usagecontext-group").value)
        self.assertEqual(inst.useContext[5].extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/usagecontext-group")
        self.assertEqual(inst.useContext[5].extension[0].valueString.value, FHIRString("B").value)
        self.assertEqual(inst.useContext[5].extension[0].valueString.as_json(), "B")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.text.value, FHIRString("Kidney Cancer – Collecting Duct/Medullary Subtypes - Metastatic").value)
        self.assertEqual(inst.useContext[5].valueCodeableConcept.text.as_json(), "Kidney Cancer – Collecting Duct/Medullary Subtypes - Metastatic")
        self.assertEqual(inst.version.value, FHIRString("1").value)
        self.assertEqual(inst.version.as_json(), "1")


from fhirclient.models.fhirdatatypes import FHIRCanonical, FHIRString, FHIRCode, FHIRUrl, FHIRUri, FHIRDate, FHIRMarkdown, FHIRDateTime, FHIRId, FHIRPositiveInt