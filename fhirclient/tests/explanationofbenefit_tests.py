#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import explanationofbenefit

class ExplanationOfBenefitTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("ExplanationOfBenefit", js["resourceType"])
        return explanationofbenefit.ExplanationOfBenefit(js)

    def testExplanationOfBenefit1(self):
        inst = self.instantiate_from('explanationofbenefit-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ExplanationOfBenefit instance')
        self.implExplanationOfBenefit1(inst)

        js = inst.as_json()
        self.assertEqual("ExplanationOfBenefit", js["resourceType"])
        inst2 = explanationofbenefit.ExplanationOfBenefit(js)
        self.implExplanationOfBenefit1(inst2)

    def implExplanationOfBenefit1(self, inst):
        self.assertEqual(inst.careTeam[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.careTeam[0].sequence.as_json(), 1)
        self.assertEqual(inst.created.value, FHIRDateTime("2014-08-16").value)
        self.assertEqual(inst.created.as_json(), "2014-08-16")
        self.assertEqual(inst.disposition.value, FHIRString("Claim settled as per contract.").value)
        self.assertEqual(inst.disposition.as_json(), "Claim settled as per contract.")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.BenefitsInc.com/fhir/explanationofbenefit").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.BenefitsInc.com/fhir/explanationofbenefit")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("987654321").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "987654321")
        self.assertTrue(inst.insurance[0].focal)
        self.assertEqual(inst.item[0].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].adjudication[0].amount.value, 120.0)
        self.assertEqual(inst.item[0].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[0].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[0].adjudication[1].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.item[0].adjudication[1].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.item[0].adjudication[1].value, 0.8)
        self.assertEqual(inst.item[0].adjudication[2].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].adjudication[2].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].adjudication[2].amount.value, 96.0)
        self.assertEqual(inst.item[0].adjudication[2].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[0].adjudication[2].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[0].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[0].net.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].net.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].net.value, 135.57)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.value, FHIRCode("1205").value)
        self.assertEqual(inst.item[0].productOrService.coding[0].code.as_json(), "1205")
        self.assertEqual(inst.item[0].productOrService.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-USCLS").value)
        self.assertEqual(inst.item[0].productOrService.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-USCLS")
        self.assertEqual(inst.item[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[0].servicedDate.value, FHIRDate("2014-08-16").value)
        self.assertEqual(inst.item[0].servicedDate.as_json(), "2014-08-16")
        self.assertEqual(inst.item[0].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.item[0].unitPrice.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[0].unitPrice.currency.as_json(), "USD")
        self.assertEqual(inst.item[0].unitPrice.value, 135.57)
        self.assertEqual(inst.item[1].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[1].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[1].adjudication[0].amount.value, 180.0)
        self.assertEqual(inst.item[1].adjudication[0].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[1].adjudication[0].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[1].careTeamSequence[0].value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[1].careTeamSequence[0].as_json(), 1)
        self.assertEqual(inst.item[1].detail[0].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[1].detail[0].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[1].detail[0].adjudication[0].amount.value, 180.0)
        self.assertEqual(inst.item[1].detail[0].adjudication[0].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[1].detail[0].adjudication[0].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[1].detail[0].net.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[1].detail[0].net.currency.as_json(), "USD")
        self.assertEqual(inst.item[1].detail[0].net.value, 200.0)
        self.assertEqual(inst.item[1].detail[0].productOrService.coding[0].code.value, FHIRCode("group").value)
        self.assertEqual(inst.item[1].detail[0].productOrService.coding[0].code.as_json(), "group")
        self.assertEqual(inst.item[1].detail[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[1].detail[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[0].amount.value, 200.0)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[0].category.coding[0].code.value, FHIRCode("eligible").value)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[0].category.coding[0].code.as_json(), "eligible")
        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[1].category.coding[0].code.value, FHIRCode("eligpercent").value)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[1].category.coding[0].code.as_json(), "eligpercent")
        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[1].value, 0.9)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[2].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[2].amount.currency.as_json(), "USD")
        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[2].amount.value, 180.0)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[2].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[2].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.item[1].detail[0].subDetail[0].net.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].net.currency.as_json(), "USD")
        self.assertEqual(inst.item[1].detail[0].subDetail[0].net.value, 200.0)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].productOrService.coding[0].code.value, FHIRCode("1205").value)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].productOrService.coding[0].code.as_json(), "1205")
        self.assertEqual(inst.item[1].detail[0].subDetail[0].productOrService.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-USCLS").value)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].productOrService.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-USCLS")
        self.assertEqual(inst.item[1].detail[0].subDetail[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].sequence.as_json(), 1)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].unitPrice.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[1].detail[0].subDetail[0].unitPrice.currency.as_json(), "USD")
        self.assertEqual(inst.item[1].detail[0].subDetail[0].unitPrice.value, 200.0)
        self.assertEqual(inst.item[1].net.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.item[1].net.currency.as_json(), "USD")
        self.assertEqual(inst.item[1].net.value, 200.0)
        self.assertEqual(inst.item[1].productOrService.coding[0].code.value, FHIRCode("group").value)
        self.assertEqual(inst.item[1].productOrService.coding[0].code.as_json(), "group")
        self.assertEqual(inst.item[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.item[1].sequence.as_json(), 2)
        self.assertEqual(inst.item[1].servicedDate.value, FHIRDate("2014-08-16").value)
        self.assertEqual(inst.item[1].servicedDate.as_json(), "2014-08-16")
        self.assertEqual(inst.item[1].servicedDate.date, FHIRDate('2014-08-16').date)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.outcome.value, FHIRCode("complete").value)
        self.assertEqual(inst.outcome.as_json(), "complete")
        self.assertEqual(inst.payee.type.coding[0].code.value, FHIRCode("provider").value)
        self.assertEqual(inst.payee.type.coding[0].code.as_json(), "provider")
        self.assertEqual(inst.payee.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/payeetype").value)
        self.assertEqual(inst.payee.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/payeetype")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the ExplanationOfBenefit</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the ExplanationOfBenefit</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.total[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.total[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.total[0].amount.value, 135.57)
        self.assertEqual(inst.total[0].category.coding[0].code.value, FHIRCode("submitted").value)
        self.assertEqual(inst.total[0].category.coding[0].code.as_json(), "submitted")
        self.assertEqual(inst.total[1].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.total[1].amount.currency.as_json(), "USD")
        self.assertEqual(inst.total[1].amount.value, 96.0)
        self.assertEqual(inst.total[1].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.total[1].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("oral").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "oral")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/claim-type").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/claim-type")
        self.assertEqual(inst.use.value, FHIRCode("claim").value)
        self.assertEqual(inst.use.as_json(), "claim")

    def testExplanationOfBenefit2(self):
        inst = self.instantiate_from('explanationofbenefit-example-2.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ExplanationOfBenefit instance')
        self.implExplanationOfBenefit2(inst)

        js = inst.as_json()
        self.assertEqual("ExplanationOfBenefit", js["resourceType"])
        inst2 = explanationofbenefit.ExplanationOfBenefit(js)
        self.implExplanationOfBenefit2(inst2)

    def implExplanationOfBenefit2(self, inst):
        self.assertEqual(inst.accident.date.value, FHIRDate("2014-02-14").value)
        self.assertEqual(inst.accident.date.as_json(), "2014-02-14")
        self.assertEqual(inst.accident.date.date, FHIRDate('2014-02-14').date)
        self.assertEqual(inst.accident.type.coding[0].code.value, FHIRCode("SPT").value)
        self.assertEqual(inst.accident.type.coding[0].code.as_json(), "SPT")
        self.assertEqual(inst.accident.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.accident.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.billablePeriod.end.value, FHIRDateTime("2014-03-01").value)
        self.assertEqual(inst.billablePeriod.end.as_json(), "2014-03-01")
        self.assertEqual(inst.billablePeriod.start.value, FHIRDateTime("2014-02-01").value)
        self.assertEqual(inst.billablePeriod.start.as_json(), "2014-02-01")
        self.assertEqual(inst.created.value, FHIRDateTime("2014-08-16").value)
        self.assertEqual(inst.created.as_json(), "2014-08-16")
        self.assertEqual(inst.disposition.value, FHIRString("Could not process.").value)
        self.assertEqual(inst.disposition.as_json(), "Could not process.")
        self.assertEqual(inst.formCode.coding[0].code.value, FHIRCode("2").value)
        self.assertEqual(inst.formCode.coding[0].code.as_json(), "2")
        self.assertEqual(inst.formCode.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/forms-codes").value)
        self.assertEqual(inst.formCode.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/forms-codes")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.BenefitsInc.com/fhir/explanationofbenefit").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.BenefitsInc.com/fhir/explanationofbenefit")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("error-1").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "error-1")
        self.assertTrue(inst.insurance[0].focal)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.outcome.value, FHIRCode("error").value)
        self.assertEqual(inst.outcome.as_json(), "error")
        self.assertEqual(inst.precedence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.precedence.as_json(), 2)
        self.assertEqual(inst.procedure[0].date.value, FHIRDateTime("2014-02-14").value)
        self.assertEqual(inst.procedure[0].date.as_json(), "2014-02-14")
        self.assertEqual(inst.procedure[0].procedureCodeableConcept.coding[0].code.value, FHIRCode("123001").value)
        self.assertEqual(inst.procedure[0].procedureCodeableConcept.coding[0].code.as_json(), "123001")
        self.assertEqual(inst.procedure[0].procedureCodeableConcept.coding[0].system.value, FHIRUri("http://hl7.org/fhir/sid/ex-icd-10-procedures").value)
        self.assertEqual(inst.procedure[0].procedureCodeableConcept.coding[0].system.as_json(), "http://hl7.org/fhir/sid/ex-icd-10-procedures")
        self.assertEqual(inst.procedure[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.procedure[0].sequence.as_json(), 1)
        self.assertEqual(inst.processNote[0].language.coding[0].code.value, FHIRCode("en-CA").value)
        self.assertEqual(inst.processNote[0].language.coding[0].code.as_json(), "en-CA")
        self.assertEqual(inst.processNote[0].language.coding[0].system.value, FHIRUri("urn:ietf:bcp:47").value)
        self.assertEqual(inst.processNote[0].language.coding[0].system.as_json(), "urn:ietf:bcp:47")
        self.assertEqual(inst.processNote[0].number.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.processNote[0].number.as_json(), 1)
        self.assertEqual(inst.processNote[0].text.value, FHIRString("Invalid claim").value)
        self.assertEqual(inst.processNote[0].text.as_json(), "Invalid claim")
        self.assertEqual(inst.processNote[0].type.value, FHIRCode("display").value)
        self.assertEqual(inst.processNote[0].type.as_json(), "display")
        self.assertEqual(inst.related[0].reference.system.value, FHIRUri("http://www.BenefitsInc.com/case-number").value)
        self.assertEqual(inst.related[0].reference.system.as_json(), "http://www.BenefitsInc.com/case-number")
        self.assertEqual(inst.related[0].reference.value.value, FHIRString("23-56Tu-XX-47-20150M14").value)
        self.assertEqual(inst.related[0].reference.value.as_json(), "23-56Tu-XX-47-20150M14")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.subType.coding[0].code.value, FHIRCode("emergency").value)
        self.assertEqual(inst.subType.coding[0].code.as_json(), "emergency")
        self.assertEqual(inst.subType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-claimsubtype").value)
        self.assertEqual(inst.subType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-claimsubtype")
        self.assertEqual(inst.supportingInfo[0].category.coding[0].code.value, FHIRCode("employmentimpacted").value)
        self.assertEqual(inst.supportingInfo[0].category.coding[0].code.as_json(), "employmentimpacted")
        self.assertEqual(inst.supportingInfo[0].category.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/claiminformationcategory").value)
        self.assertEqual(inst.supportingInfo[0].category.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/claiminformationcategory")
        self.assertEqual(inst.supportingInfo[0].sequence.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.supportingInfo[0].sequence.as_json(), 1)
        self.assertEqual(inst.supportingInfo[0].timingPeriod.end.value, FHIRDateTime("2014-02-28").value)
        self.assertEqual(inst.supportingInfo[0].timingPeriod.end.as_json(), "2014-02-28")
        self.assertEqual(inst.supportingInfo[0].timingPeriod.start.value, FHIRDateTime("2014-02-14").value)
        self.assertEqual(inst.supportingInfo[0].timingPeriod.start.as_json(), "2014-02-14")
        self.assertEqual(inst.supportingInfo[1].category.coding[0].code.value, FHIRCode("hospitalized").value)
        self.assertEqual(inst.supportingInfo[1].category.coding[0].code.as_json(), "hospitalized")
        self.assertEqual(inst.supportingInfo[1].category.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/claiminformationcategory").value)
        self.assertEqual(inst.supportingInfo[1].category.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/claiminformationcategory")
        self.assertEqual(inst.supportingInfo[1].sequence.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.supportingInfo[1].sequence.as_json(), 2)
        self.assertEqual(inst.supportingInfo[1].timingPeriod.end.value, FHIRDateTime("2014-02-16").value)
        self.assertEqual(inst.supportingInfo[1].timingPeriod.end.as_json(), "2014-02-16")
        self.assertEqual(inst.supportingInfo[1].timingPeriod.start.value, FHIRDateTime("2014-02-14").value)
        self.assertEqual(inst.supportingInfo[1].timingPeriod.start.as_json(), "2014-02-14")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.total[0].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.total[0].amount.currency.as_json(), "USD")
        self.assertEqual(inst.total[0].amount.value, 2478.57)
        self.assertEqual(inst.total[0].category.coding[0].code.value, FHIRCode("submitted").value)
        self.assertEqual(inst.total[0].category.coding[0].code.as_json(), "submitted")
        self.assertEqual(inst.total[1].amount.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.total[1].amount.currency.as_json(), "USD")
        self.assertEqual(inst.total[1].amount.value, 0.0)
        self.assertEqual(inst.total[1].category.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.total[1].category.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("oral").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "oral")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/claim-type").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/claim-type")
        self.assertEqual(inst.use.value, FHIRCode("claim").value)
        self.assertEqual(inst.use.as_json(), "claim")


from fhirclient.models.fhirdatatypes import FHIRPositiveInt, FHIRDateTime, FHIRString, FHIRUri, FHIRCode, FHIRDate