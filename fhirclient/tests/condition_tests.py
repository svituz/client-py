#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import condition

class ConditionTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Condition", js["resourceType"])
        return condition.Condition(js)

    def testCondition1(self):
        inst = self.instantiate_from('condition-example-f002-lung.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Condition instance')
        self.implCondition1(inst)

        js = inst.as_json()
        self.assertEqual("Condition", js["resourceType"])
        inst2 = condition.Condition(js)
        self.implCondition1(inst2)

    def implCondition1(self, inst):
        self.assertEqual(inst.bodySite[0].coding[0].code.value, FHIRCode("51185008").value)
        self.assertEqual(inst.bodySite[0].coding[0].code.as_json(), "51185008")
        self.assertEqual(inst.bodySite[0].coding[0].display.value, FHIRString("Thorax").value)
        self.assertEqual(inst.bodySite[0].coding[0].display.as_json(), "Thorax")
        self.assertEqual(inst.bodySite[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.bodySite[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("439401001").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "439401001")
        self.assertEqual(inst.category[0].coding[0].display.value, FHIRString("diagnosis").value)
        self.assertEqual(inst.category[0].coding[0].display.as_json(), "diagnosis")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.clinicalStatus.coding[0].code.value, FHIRCode("active").value)
        self.assertEqual(inst.clinicalStatus.coding[0].code.as_json(), "active")
        self.assertEqual(inst.clinicalStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-clinical").value)
        self.assertEqual(inst.clinicalStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-clinical")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("254637007").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "254637007")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("NSCLC - Non-small cell lung cancer").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "NSCLC - Non-small cell lung cancer")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.evidence[0].code[0].coding[0].code.value, FHIRCode("169069000").value)
        self.assertEqual(inst.evidence[0].code[0].coding[0].code.as_json(), "169069000")
        self.assertEqual(inst.evidence[0].code[0].coding[0].display.value, FHIRString("CT of thorax").value)
        self.assertEqual(inst.evidence[0].code[0].coding[0].display.as_json(), "CT of thorax")
        self.assertEqual(inst.evidence[0].code[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.evidence[0].code[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.id.value, FHIRString("f002").value)
        self.assertEqual(inst.id.as_json(), "f002")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.onsetDateTime.value, FHIRDateTime("2011-05-05").value)
        self.assertEqual(inst.onsetDateTime.as_json(), "2011-05-05")
        self.assertEqual(inst.recordedDate.value, FHIRDateTime("2012-06-03").value)
        self.assertEqual(inst.recordedDate.as_json(), "2012-06-03")
        self.assertEqual(inst.severity.coding[0].code.value, FHIRCode("24484000").value)
        self.assertEqual(inst.severity.coding[0].code.as_json(), "24484000")
        self.assertEqual(inst.severity.coding[0].display.value, FHIRString("Severe").value)
        self.assertEqual(inst.severity.coding[0].display.as_json(), "Severe")
        self.assertEqual(inst.severity.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.severity.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.stage[0].summary.coding[0].code.value, FHIRCode("258219007").value)
        self.assertEqual(inst.stage[0].summary.coding[0].code.as_json(), "258219007")
        self.assertEqual(inst.stage[0].summary.coding[0].display.value, FHIRString("stage II").value)
        self.assertEqual(inst.stage[0].summary.coding[0].display.as_json(), "stage II")
        self.assertEqual(inst.stage[0].summary.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.stage[0].summary.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.stage[0].type.coding[0].code.value, FHIRCode("260998006").value)
        self.assertEqual(inst.stage[0].type.coding[0].code.as_json(), "260998006")
        self.assertEqual(inst.stage[0].type.coding[0].display.value, FHIRString("Clinical staging (qualifier value)").value)
        self.assertEqual(inst.stage[0].type.coding[0].display.as_json(), "Clinical staging (qualifier value)")
        self.assertEqual(inst.stage[0].type.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.stage[0].type.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.verificationStatus.coding[0].code.value, FHIRCode("confirmed").value)
        self.assertEqual(inst.verificationStatus.coding[0].code.as_json(), "confirmed")
        self.assertEqual(inst.verificationStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-ver-status").value)
        self.assertEqual(inst.verificationStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-ver-status")

    def testCondition2(self):
        inst = self.instantiate_from('condition-example2.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Condition instance')
        self.implCondition2(inst)

        js = inst.as_json()
        self.assertEqual("Condition", js["resourceType"])
        inst2 = condition.Condition(js)
        self.implCondition2(inst2)

    def implCondition2(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("problem-list-item").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "problem-list-item")
        self.assertEqual(inst.category[0].coding[0].display.value, FHIRString("Problem List Item").value)
        self.assertEqual(inst.category[0].coding[0].display.as_json(), "Problem List Item")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-category").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-category")
        self.assertEqual(inst.clinicalStatus.coding[0].code.value, FHIRCode("active").value)
        self.assertEqual(inst.clinicalStatus.coding[0].code.as_json(), "active")
        self.assertEqual(inst.clinicalStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-clinical").value)
        self.assertEqual(inst.clinicalStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-clinical")
        self.assertEqual(inst.code.text.value, FHIRString("Asthma").value)
        self.assertEqual(inst.code.text.as_json(), "Asthma")
        self.assertEqual(inst.id.value, FHIRString("example2").value)
        self.assertEqual(inst.id.as_json(), "example2")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.onsetString.value, FHIRString("approximately November 2012").value)
        self.assertEqual(inst.onsetString.as_json(), "approximately November 2012")
        self.assertEqual(inst.severity.coding[0].code.value, FHIRCode("255604002").value)
        self.assertEqual(inst.severity.coding[0].code.as_json(), "255604002")
        self.assertEqual(inst.severity.coding[0].display.value, FHIRString("Mild").value)
        self.assertEqual(inst.severity.coding[0].display.as_json(), "Mild")
        self.assertEqual(inst.severity.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.severity.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Mild Asthma (Date: 12-Nov 2012)</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Mild Asthma (Date: 12-Nov 2012)</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.verificationStatus.coding[0].code.value, FHIRCode("confirmed").value)
        self.assertEqual(inst.verificationStatus.coding[0].code.as_json(), "confirmed")
        self.assertEqual(inst.verificationStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-ver-status").value)
        self.assertEqual(inst.verificationStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-ver-status")

    def testCondition3(self):
        inst = self.instantiate_from('condition-example-f201-fever.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Condition instance')
        self.implCondition3(inst)

        js = inst.as_json()
        self.assertEqual("Condition", js["resourceType"])
        inst2 = condition.Condition(js)
        self.implCondition3(inst2)

    def implCondition3(self, inst):
        self.assertEqual(inst.abatementString.value, FHIRString("around April 9, 2013").value)
        self.assertEqual(inst.abatementString.as_json(), "around April 9, 2013")
        self.assertEqual(inst.bodySite[0].coding[0].code.value, FHIRCode("38266002").value)
        self.assertEqual(inst.bodySite[0].coding[0].code.as_json(), "38266002")
        self.assertEqual(inst.bodySite[0].coding[0].display.value, FHIRString("Entire body as a whole").value)
        self.assertEqual(inst.bodySite[0].coding[0].display.as_json(), "Entire body as a whole")
        self.assertEqual(inst.bodySite[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.bodySite[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("55607006").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "55607006")
        self.assertEqual(inst.category[0].coding[0].display.value, FHIRString("Problem").value)
        self.assertEqual(inst.category[0].coding[0].display.as_json(), "Problem")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.category[0].coding[1].code.value, FHIRCode("problem-list-item").value)
        self.assertEqual(inst.category[0].coding[1].code.as_json(), "problem-list-item")
        self.assertEqual(inst.category[0].coding[1].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-category").value)
        self.assertEqual(inst.category[0].coding[1].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-category")
        self.assertEqual(inst.clinicalStatus.coding[0].code.value, FHIRCode("resolved").value)
        self.assertEqual(inst.clinicalStatus.coding[0].code.as_json(), "resolved")
        self.assertEqual(inst.clinicalStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-clinical").value)
        self.assertEqual(inst.clinicalStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-clinical")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("386661006").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "386661006")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Fever").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Fever")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.evidence[0].code[0].coding[0].code.value, FHIRCode("258710007").value)
        self.assertEqual(inst.evidence[0].code[0].coding[0].code.as_json(), "258710007")
        self.assertEqual(inst.evidence[0].code[0].coding[0].display.value, FHIRString("degrees C").value)
        self.assertEqual(inst.evidence[0].code[0].coding[0].display.as_json(), "degrees C")
        self.assertEqual(inst.evidence[0].code[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.evidence[0].code[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.id.value, FHIRString("f201").value)
        self.assertEqual(inst.id.as_json(), "f201")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("12345").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "12345")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.onsetDateTime.value, FHIRDateTime("2013-04-02").value)
        self.assertEqual(inst.onsetDateTime.as_json(), "2013-04-02")
        self.assertEqual(inst.recordedDate.value, FHIRDateTime("2013-04-04").value)
        self.assertEqual(inst.recordedDate.as_json(), "2013-04-04")
        self.assertEqual(inst.severity.coding[0].code.value, FHIRCode("255604002").value)
        self.assertEqual(inst.severity.coding[0].code.as_json(), "255604002")
        self.assertEqual(inst.severity.coding[0].display.value, FHIRString("Mild").value)
        self.assertEqual(inst.severity.coding[0].display.as_json(), "Mild")
        self.assertEqual(inst.severity.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.severity.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.verificationStatus.coding[0].code.value, FHIRCode("confirmed").value)
        self.assertEqual(inst.verificationStatus.coding[0].code.as_json(), "confirmed")
        self.assertEqual(inst.verificationStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-ver-status").value)
        self.assertEqual(inst.verificationStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-ver-status")

    def testCondition4(self):
        inst = self.instantiate_from('condition-example-f003-abscess.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Condition instance')
        self.implCondition4(inst)

        js = inst.as_json()
        self.assertEqual("Condition", js["resourceType"])
        inst2 = condition.Condition(js)
        self.implCondition4(inst2)

    def implCondition4(self, inst):
        self.assertEqual(inst.bodySite[0].coding[0].code.value, FHIRCode("280193007").value)
        self.assertEqual(inst.bodySite[0].coding[0].code.as_json(), "280193007")
        self.assertEqual(inst.bodySite[0].coding[0].display.value, FHIRString("Entire retropharyngeal area").value)
        self.assertEqual(inst.bodySite[0].coding[0].display.as_json(), "Entire retropharyngeal area")
        self.assertEqual(inst.bodySite[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.bodySite[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("439401001").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "439401001")
        self.assertEqual(inst.category[0].coding[0].display.value, FHIRString("diagnosis").value)
        self.assertEqual(inst.category[0].coding[0].display.as_json(), "diagnosis")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.clinicalStatus.coding[0].code.value, FHIRCode("active").value)
        self.assertEqual(inst.clinicalStatus.coding[0].code.as_json(), "active")
        self.assertEqual(inst.clinicalStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-clinical").value)
        self.assertEqual(inst.clinicalStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-clinical")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("18099001").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "18099001")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Retropharyngeal abscess").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Retropharyngeal abscess")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.evidence[0].code[0].coding[0].code.value, FHIRCode("169068008").value)
        self.assertEqual(inst.evidence[0].code[0].coding[0].code.as_json(), "169068008")
        self.assertEqual(inst.evidence[0].code[0].coding[0].display.value, FHIRString("CT of neck").value)
        self.assertEqual(inst.evidence[0].code[0].coding[0].display.as_json(), "CT of neck")
        self.assertEqual(inst.evidence[0].code[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.evidence[0].code[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.id.value, FHIRString("f003").value)
        self.assertEqual(inst.id.as_json(), "f003")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.onsetDateTime.value, FHIRDateTime("2012-02-27").value)
        self.assertEqual(inst.onsetDateTime.as_json(), "2012-02-27")
        self.assertEqual(inst.recordedDate.value, FHIRDateTime("2012-02-20").value)
        self.assertEqual(inst.recordedDate.as_json(), "2012-02-20")
        self.assertEqual(inst.severity.coding[0].code.value, FHIRCode("371923003").value)
        self.assertEqual(inst.severity.coding[0].code.as_json(), "371923003")
        self.assertEqual(inst.severity.coding[0].display.value, FHIRString("Mild to moderate").value)
        self.assertEqual(inst.severity.coding[0].display.as_json(), "Mild to moderate")
        self.assertEqual(inst.severity.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.severity.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.verificationStatus.coding[0].code.value, FHIRCode("confirmed").value)
        self.assertEqual(inst.verificationStatus.coding[0].code.as_json(), "confirmed")
        self.assertEqual(inst.verificationStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-ver-status").value)
        self.assertEqual(inst.verificationStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-ver-status")

    def testCondition5(self):
        inst = self.instantiate_from('condition-example-f204-renal.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Condition instance')
        self.implCondition5(inst)

        js = inst.as_json()
        self.assertEqual("Condition", js["resourceType"])
        inst2 = condition.Condition(js)
        self.implCondition5(inst2)

    def implCondition5(self, inst):
        self.assertEqual(inst.abatementDateTime.value, FHIRDateTime("2013-03-20").value)
        self.assertEqual(inst.abatementDateTime.as_json(), "2013-03-20")
        self.assertEqual(inst.bodySite[0].coding[0].code.value, FHIRCode("181414000").value)
        self.assertEqual(inst.bodySite[0].coding[0].code.as_json(), "181414000")
        self.assertEqual(inst.bodySite[0].coding[0].display.value, FHIRString("Kidney").value)
        self.assertEqual(inst.bodySite[0].coding[0].display.as_json(), "Kidney")
        self.assertEqual(inst.bodySite[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.bodySite[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("55607006").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "55607006")
        self.assertEqual(inst.category[0].coding[0].display.value, FHIRString("Problem").value)
        self.assertEqual(inst.category[0].coding[0].display.as_json(), "Problem")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.category[0].coding[1].code.value, FHIRCode("problem-list-item").value)
        self.assertEqual(inst.category[0].coding[1].code.as_json(), "problem-list-item")
        self.assertEqual(inst.category[0].coding[1].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-category").value)
        self.assertEqual(inst.category[0].coding[1].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-category")
        self.assertEqual(inst.clinicalStatus.coding[0].code.value, FHIRCode("inactive").value)
        self.assertEqual(inst.clinicalStatus.coding[0].code.as_json(), "inactive")
        self.assertEqual(inst.clinicalStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-clinical").value)
        self.assertEqual(inst.clinicalStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-clinical")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("36225005").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "36225005")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Acute renal insufficiency specified as due to procedure").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Acute renal insufficiency specified as due to procedure")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.id.value, FHIRString("f204").value)
        self.assertEqual(inst.id.as_json(), "f204")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.note[0].text.value, FHIRMarkdown("The patient is anuric.").value)
        self.assertEqual(inst.note[0].text.as_json(), "The patient is anuric.")
        self.assertEqual(inst.onsetDateTime.value, FHIRDateTime("2013-03-11").value)
        self.assertEqual(inst.onsetDateTime.as_json(), "2013-03-11")
        self.assertEqual(inst.recordedDate.value, FHIRDateTime("2013-03-11").value)
        self.assertEqual(inst.recordedDate.as_json(), "2013-03-11")
        self.assertEqual(inst.severity.coding[0].code.value, FHIRCode("24484000").value)
        self.assertEqual(inst.severity.coding[0].code.as_json(), "24484000")
        self.assertEqual(inst.severity.coding[0].display.value, FHIRString("Severe").value)
        self.assertEqual(inst.severity.coding[0].display.as_json(), "Severe")
        self.assertEqual(inst.severity.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.severity.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.stage[0].summary.coding[0].code.value, FHIRCode("14803004").value)
        self.assertEqual(inst.stage[0].summary.coding[0].code.as_json(), "14803004")
        self.assertEqual(inst.stage[0].summary.coding[0].display.value, FHIRString("Temporary").value)
        self.assertEqual(inst.stage[0].summary.coding[0].display.as_json(), "Temporary")
        self.assertEqual(inst.stage[0].summary.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.stage[0].summary.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.verificationStatus.coding[0].code.value, FHIRCode("differential").value)
        self.assertEqual(inst.verificationStatus.coding[0].code.as_json(), "differential")
        self.assertEqual(inst.verificationStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-ver-status").value)
        self.assertEqual(inst.verificationStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-ver-status")

    def testCondition6(self):
        inst = self.instantiate_from('condition-example-f205-infection.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Condition instance')
        self.implCondition6(inst)

        js = inst.as_json()
        self.assertEqual("Condition", js["resourceType"])
        inst2 = condition.Condition(js)
        self.implCondition6(inst2)

    def implCondition6(self, inst):
        self.assertEqual(inst.clinicalStatus.coding[0].code.value, FHIRCode("active").value)
        self.assertEqual(inst.clinicalStatus.coding[0].code.as_json(), "active")
        self.assertEqual(inst.clinicalStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-clinical").value)
        self.assertEqual(inst.clinicalStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-clinical")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("87628006").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "87628006")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Bacterial infectious disease").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Bacterial infectious disease")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.id.value, FHIRString("f205").value)
        self.assertEqual(inst.id.as_json(), "f205")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.recordedDate.value, FHIRDateTime("2013-04-04").value)
        self.assertEqual(inst.recordedDate.as_json(), "2013-04-04")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.verificationStatus.coding[0].code.value, FHIRCode("differential").value)
        self.assertEqual(inst.verificationStatus.coding[0].code.as_json(), "differential")
        self.assertEqual(inst.verificationStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-ver-status").value)
        self.assertEqual(inst.verificationStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-ver-status")

    def testCondition7(self):
        inst = self.instantiate_from('condition-example-f203-sepsis.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Condition instance')
        self.implCondition7(inst)

        js = inst.as_json()
        self.assertEqual("Condition", js["resourceType"])
        inst2 = condition.Condition(js)
        self.implCondition7(inst2)

    def implCondition7(self, inst):
        self.assertEqual(inst.bodySite[0].coding[0].code.value, FHIRCode("281158006").value)
        self.assertEqual(inst.bodySite[0].coding[0].code.as_json(), "281158006")
        self.assertEqual(inst.bodySite[0].coding[0].display.value, FHIRString("Pulmonary vascular structure").value)
        self.assertEqual(inst.bodySite[0].coding[0].display.as_json(), "Pulmonary vascular structure")
        self.assertEqual(inst.bodySite[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.bodySite[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("55607006").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "55607006")
        self.assertEqual(inst.category[0].coding[0].display.value, FHIRString("Problem").value)
        self.assertEqual(inst.category[0].coding[0].display.as_json(), "Problem")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.category[0].coding[1].code.value, FHIRCode("problem-list-item").value)
        self.assertEqual(inst.category[0].coding[1].code.as_json(), "problem-list-item")
        self.assertEqual(inst.category[0].coding[1].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-category").value)
        self.assertEqual(inst.category[0].coding[1].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-category")
        self.assertEqual(inst.clinicalStatus.coding[0].code.value, FHIRCode("active").value)
        self.assertEqual(inst.clinicalStatus.coding[0].code.as_json(), "active")
        self.assertEqual(inst.clinicalStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-clinical").value)
        self.assertEqual(inst.clinicalStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-clinical")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("10001005").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "10001005")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Bacterial sepsis").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Bacterial sepsis")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.id.value, FHIRString("f203").value)
        self.assertEqual(inst.id.as_json(), "f203")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.onsetDateTime.value, FHIRDateTime("2013-03-08").value)
        self.assertEqual(inst.onsetDateTime.as_json(), "2013-03-08")
        self.assertEqual(inst.recordedDate.value, FHIRDateTime("2013-03-11").value)
        self.assertEqual(inst.recordedDate.as_json(), "2013-03-11")
        self.assertEqual(inst.severity.coding[0].code.value, FHIRCode("371924009").value)
        self.assertEqual(inst.severity.coding[0].code.as_json(), "371924009")
        self.assertEqual(inst.severity.coding[0].display.value, FHIRString("Moderate to severe").value)
        self.assertEqual(inst.severity.coding[0].display.as_json(), "Moderate to severe")
        self.assertEqual(inst.severity.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.severity.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.verificationStatus.coding[0].code.value, FHIRCode("confirmed").value)
        self.assertEqual(inst.verificationStatus.coding[0].code.as_json(), "confirmed")
        self.assertEqual(inst.verificationStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-ver-status").value)
        self.assertEqual(inst.verificationStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-ver-status")

    def testCondition8(self):
        inst = self.instantiate_from('condition-example-f001-heart.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Condition instance')
        self.implCondition8(inst)

        js = inst.as_json()
        self.assertEqual("Condition", js["resourceType"])
        inst2 = condition.Condition(js)
        self.implCondition8(inst2)

    def implCondition8(self, inst):
        self.assertEqual(inst.bodySite[0].coding[0].code.value, FHIRCode("40768004").value)
        self.assertEqual(inst.bodySite[0].coding[0].code.as_json(), "40768004")
        self.assertEqual(inst.bodySite[0].coding[0].display.value, FHIRString("Left thorax").value)
        self.assertEqual(inst.bodySite[0].coding[0].display.as_json(), "Left thorax")
        self.assertEqual(inst.bodySite[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.bodySite[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.bodySite[0].text.value, FHIRString("heart structure").value)
        self.assertEqual(inst.bodySite[0].text.as_json(), "heart structure")
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("439401001").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "439401001")
        self.assertEqual(inst.category[0].coding[0].display.value, FHIRString("diagnosis").value)
        self.assertEqual(inst.category[0].coding[0].display.as_json(), "diagnosis")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.clinicalStatus.coding[0].code.value, FHIRCode("active").value)
        self.assertEqual(inst.clinicalStatus.coding[0].code.as_json(), "active")
        self.assertEqual(inst.clinicalStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-clinical").value)
        self.assertEqual(inst.clinicalStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-clinical")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("368009").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "368009")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Heart valve disorder").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Heart valve disorder")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.evidence[0].code[0].coding[0].code.value, FHIRCode("426396005").value)
        self.assertEqual(inst.evidence[0].code[0].coding[0].code.as_json(), "426396005")
        self.assertEqual(inst.evidence[0].code[0].coding[0].display.value, FHIRString("Cardiac chest pain").value)
        self.assertEqual(inst.evidence[0].code[0].coding[0].display.as_json(), "Cardiac chest pain")
        self.assertEqual(inst.evidence[0].code[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.evidence[0].code[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.id.value, FHIRString("f001").value)
        self.assertEqual(inst.id.as_json(), "f001")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.onsetDateTime.value, FHIRDateTime("2011-08-05").value)
        self.assertEqual(inst.onsetDateTime.as_json(), "2011-08-05")
        self.assertEqual(inst.recordedDate.value, FHIRDateTime("2011-10-05").value)
        self.assertEqual(inst.recordedDate.as_json(), "2011-10-05")
        self.assertEqual(inst.severity.coding[0].code.value, FHIRCode("6736007").value)
        self.assertEqual(inst.severity.coding[0].code.as_json(), "6736007")
        self.assertEqual(inst.severity.coding[0].display.value, FHIRString("Moderate").value)
        self.assertEqual(inst.severity.coding[0].display.as_json(), "Moderate")
        self.assertEqual(inst.severity.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.severity.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.verificationStatus.coding[0].code.value, FHIRCode("confirmed").value)
        self.assertEqual(inst.verificationStatus.coding[0].code.as_json(), "confirmed")
        self.assertEqual(inst.verificationStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-ver-status").value)
        self.assertEqual(inst.verificationStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-ver-status")

    def testCondition9(self):
        inst = self.instantiate_from('condition-example-f202-malignancy.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Condition instance')
        self.implCondition9(inst)

        js = inst.as_json()
        self.assertEqual("Condition", js["resourceType"])
        inst2 = condition.Condition(js)
        self.implCondition9(inst2)

    def implCondition9(self, inst):
        self.assertEqual(inst.abatementAge.code.value, FHIRCode("a").value)
        self.assertEqual(inst.abatementAge.code.as_json(), "a")
        self.assertEqual(inst.abatementAge.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.abatementAge.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.abatementAge.unit.value, FHIRString("years").value)
        self.assertEqual(inst.abatementAge.unit.as_json(), "years")
        self.assertEqual(inst.abatementAge.value, 54)
        self.assertEqual(inst.bodySite[0].coding[0].code.value, FHIRCode("361355005").value)
        self.assertEqual(inst.bodySite[0].coding[0].code.as_json(), "361355005")
        self.assertEqual(inst.bodySite[0].coding[0].display.value, FHIRString("Entire head and neck").value)
        self.assertEqual(inst.bodySite[0].coding[0].display.as_json(), "Entire head and neck")
        self.assertEqual(inst.bodySite[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.bodySite[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("encounter-diagnosis").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "encounter-diagnosis")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-category").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-category")
        self.assertEqual(inst.clinicalStatus.coding[0].code.value, FHIRCode("resolved").value)
        self.assertEqual(inst.clinicalStatus.coding[0].code.as_json(), "resolved")
        self.assertEqual(inst.clinicalStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-clinical").value)
        self.assertEqual(inst.clinicalStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-clinical")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("363346000").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "363346000")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Malignant neoplastic disease").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Malignant neoplastic disease")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.id.value, FHIRString("f202").value)
        self.assertEqual(inst.id.as_json(), "f202")
        self.assertEqual(inst.meta.security[0].code.value, FHIRCode("TBOO").value)
        self.assertEqual(inst.meta.security[0].code.as_json(), "TBOO")
        self.assertEqual(inst.meta.security[0].display.value, FHIRString("taboo").value)
        self.assertEqual(inst.meta.security[0].display.as_json(), "taboo")
        self.assertEqual(inst.meta.security[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.meta.security[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.onsetAge.code.value, FHIRCode("a").value)
        self.assertEqual(inst.onsetAge.code.as_json(), "a")
        self.assertEqual(inst.onsetAge.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.onsetAge.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.onsetAge.unit.value, FHIRString("years").value)
        self.assertEqual(inst.onsetAge.unit.as_json(), "years")
        self.assertEqual(inst.onsetAge.value, 52)
        self.assertEqual(inst.recordedDate.value, FHIRDateTime("2012-12-01").value)
        self.assertEqual(inst.recordedDate.as_json(), "2012-12-01")
        self.assertEqual(inst.severity.coding[0].code.value, FHIRCode("24484000").value)
        self.assertEqual(inst.severity.coding[0].code.as_json(), "24484000")
        self.assertEqual(inst.severity.coding[0].display.value, FHIRString("Severe").value)
        self.assertEqual(inst.severity.coding[0].display.as_json(), "Severe")
        self.assertEqual(inst.severity.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.severity.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.verificationStatus.coding[0].code.value, FHIRCode("confirmed").value)
        self.assertEqual(inst.verificationStatus.coding[0].code.as_json(), "confirmed")
        self.assertEqual(inst.verificationStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-ver-status").value)
        self.assertEqual(inst.verificationStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-ver-status")

    def testCondition10(self):
        inst = self.instantiate_from('condition-example-stroke.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Condition instance')
        self.implCondition10(inst)

        js = inst.as_json()
        self.assertEqual("Condition", js["resourceType"])
        inst2 = condition.Condition(js)
        self.implCondition10(inst2)

    def implCondition10(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("encounter-diagnosis").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "encounter-diagnosis")
        self.assertEqual(inst.category[0].coding[0].display.value, FHIRString("Encounter Diagnosis").value)
        self.assertEqual(inst.category[0].coding[0].display.as_json(), "Encounter Diagnosis")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-category").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-category")
        self.assertEqual(inst.clinicalStatus.coding[0].code.value, FHIRCode("active").value)
        self.assertEqual(inst.clinicalStatus.coding[0].code.as_json(), "active")
        self.assertEqual(inst.clinicalStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-clinical").value)
        self.assertEqual(inst.clinicalStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-clinical")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("422504002").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "422504002")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Ischemic stroke (disorder)").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Ischemic stroke (disorder)")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.text.value, FHIRString("Stroke").value)
        self.assertEqual(inst.code.text.as_json(), "Stroke")
        self.assertEqual(inst.id.value, FHIRString("stroke").value)
        self.assertEqual(inst.id.as_json(), "stroke")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.onsetDateTime.value, FHIRDateTime("2010-07-18").value)
        self.assertEqual(inst.onsetDateTime.as_json(), "2010-07-18")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Ischemic stroke, July 18, 2010</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Ischemic stroke, July 18, 2010</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.verificationStatus.coding[0].code.value, FHIRCode("confirmed").value)
        self.assertEqual(inst.verificationStatus.coding[0].code.as_json(), "confirmed")
        self.assertEqual(inst.verificationStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/condition-ver-status").value)
        self.assertEqual(inst.verificationStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/condition-ver-status")


from fhirclient.models.fhirdatatypes import FHIRCode, FHIRString, FHIRUri, FHIRDateTime, FHIRMarkdown