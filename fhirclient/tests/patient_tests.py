#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import patient

class PatientTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Patient", js["resourceType"])
        return patient.Patient(js)

    def testPatient1(self):
        inst = self.instantiate_from('patient-example-infant-twin-1.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Patient instance')
        self.implPatient1(inst)

        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient1(inst2)

    def implPatient1(self, inst):
        self.assertEqual(inst.birthDate.value, FHIRDate("2017-05-15").value)
        self.assertEqual(inst.birthDate.as_json(), "2017-05-15")
        self.assertEqual(inst.birthDate.date, FHIRDate('2017-05-15').date)
        self.assertEqual(inst.contact[0].name.family.value, FHIRString("Organa").value)
        self.assertEqual(inst.contact[0].name.family.as_json(), "Organa")
        self.assertEqual(inst.contact[0].name.given[0].value, FHIRString("Leia").value)
        self.assertEqual(inst.contact[0].name.given[0].as_json(), "Leia")
        self.assertEqual(inst.contact[0].name.use.value, FHIRCode("maiden").value)
        self.assertEqual(inst.contact[0].name.use.as_json(), "maiden")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code.value, FHIRCode("72705000").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code.as_json(), "72705000")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].display.value, FHIRString("Mother").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].display.as_json(), "Mother")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.contact[0].relationship[0].coding[1].code.value, FHIRCode("N").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[1].code.as_json(), "N")
        self.assertEqual(inst.contact[0].relationship[0].coding[1].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0131").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[1].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0131")
        self.assertEqual(inst.contact[0].relationship[0].coding[2].code.value, FHIRCode("MTH").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[2].code.as_json(), "MTH")
        self.assertEqual(inst.contact[0].relationship[0].coding[2].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-RoleCode").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[2].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-RoleCode")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.contact[0].telecom[0].use.value, FHIRCode("mobile").value)
        self.assertEqual(inst.contact[0].telecom[0].use.as_json(), "mobile")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("+31201234567").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "+31201234567")
        self.assertEqual(inst.extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName").value)
        self.assertEqual(inst.extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName")
        self.assertEqual(inst.extension[0].valueString.value, FHIRString("Organa").value)
        self.assertEqual(inst.extension[0].valueString.as_json(), "Organa")
        self.assertEqual(inst.gender.value, FHIRCode("female").value)
        self.assertEqual(inst.gender.as_json(), "female")
        self.assertEqual(inst.id.value, FHIRString("infant-twin-1").value)
        self.assertEqual(inst.id.as_json(), "infant-twin-1")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://coruscanthealth.org/main-hospital/patient-identifier").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://coruscanthealth.org/main-hospital/patient-identifier")
        self.assertEqual(inst.identifier[0].type.coding[0].code.value, FHIRCode("MR").value)
        self.assertEqual(inst.identifier[0].type.coding[0].code.as_json(), "MR")
        self.assertEqual(inst.identifier[0].type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0203").value)
        self.assertEqual(inst.identifier[0].type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0203")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("MRN7465737865").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "MRN7465737865")
        self.assertEqual(inst.identifier[1].system.value, FHIRUri("http://new-republic.gov/galactic-citizen-identifier").value)
        self.assertEqual(inst.identifier[1].system.as_json(), "http://new-republic.gov/galactic-citizen-identifier")
        self.assertEqual(inst.identifier[1].value.value, FHIRString("7465737865").value)
        self.assertEqual(inst.identifier[1].value.as_json(), "7465737865")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.multipleBirthInteger, 1)
        self.assertEqual(inst.name[0].family.value, FHIRString("Solo").value)
        self.assertEqual(inst.name[0].family.as_json(), "Solo")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Jaina").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Jaina")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPatient2(self):
        inst = self.instantiate_from('patient-example-xds.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Patient instance')
        self.implPatient2(inst)

        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient2(inst2)

    def implPatient2(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].city.value, FHIRString("Metropolis").value)
        self.assertEqual(inst.address[0].city.as_json(), "Metropolis")
        self.assertEqual(inst.address[0].country.value, FHIRString("USA").value)
        self.assertEqual(inst.address[0].country.as_json(), "USA")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("100 Main St").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "100 Main St")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("44130").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "44130")
        self.assertEqual(inst.address[0].state.value, FHIRString("Il").value)
        self.assertEqual(inst.address[0].state.as_json(), "Il")
        self.assertEqual(inst.birthDate.value, FHIRDate("1956-05-27").value)
        self.assertEqual(inst.birthDate.as_json(), "1956-05-27")
        self.assertEqual(inst.birthDate.date, FHIRDate('1956-05-27').date)
        self.assertEqual(inst.gender.value, FHIRCode("male").value)
        self.assertEqual(inst.gender.as_json(), "male")
        self.assertEqual(inst.id.value, FHIRString("xds").value)
        self.assertEqual(inst.id.as_json(), "xds")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:1.2.3.4.5").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:1.2.3.4.5")
        self.assertEqual(inst.identifier[0].type.coding[0].code.value, FHIRCode("MR").value)
        self.assertEqual(inst.identifier[0].type.coding[0].code.as_json(), "MR")
        self.assertEqual(inst.identifier[0].type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0203").value)
        self.assertEqual(inst.identifier[0].type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0203")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "usual")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("89765a87b").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "89765a87b")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Doe").value)
        self.assertEqual(inst.name[0].family.as_json(), "Doe")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("John").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "John")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPatient3(self):
        inst = self.instantiate_from('patient-example-chinese.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Patient instance')
        self.implPatient3(inst)

        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient3(inst2)

    def implPatient3(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].city.value, FHIRString("上海市").value)
        self.assertEqual(inst.address[0].city.as_json(), "上海市")
        self.assertEqual(inst.address[0].district.value, FHIRString("黄埔区").value)
        self.assertEqual(inst.address[0].district.as_json(), "黄埔区")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("马当路190号").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "马当路190号")
        self.assertEqual(inst.address[0].period.start.value, FHIRDateTime("1974-12-25").value)
        self.assertEqual(inst.address[0].period.start.as_json(), "1974-12-25")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("200000").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "200000")
        self.assertEqual(inst.address[0].type.value, FHIRCode("both").value)
        self.assertEqual(inst.address[0].type.as_json(), "both")
        self.assertEqual(inst.address[0].use.value, FHIRCode("home").value)
        self.assertEqual(inst.address[0].use.as_json(), "home")
        self.assertEqual(inst.birthDate.value, FHIRDate("1974-12-25").value)
        self.assertEqual(inst.birthDate.as_json(), "1974-12-25")
        self.assertEqual(inst.birthDate.date, FHIRDate('1974-12-25').date)
        self.assertFalse(inst.deceasedBoolean)
        self.assertEqual(inst.gender.value, FHIRCode("male").value)
        self.assertEqual(inst.gender.as_json(), "male")
        self.assertEqual(inst.id.value, FHIRString("ch-example").value)
        self.assertEqual(inst.id.as_json(), "ch-example")
        self.assertEqual(inst.identifier[0].period.start.value, FHIRDateTime("2001-05-06").value)
        self.assertEqual(inst.identifier[0].period.start.as_json(), "2001-05-06")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:1.2.36.146.595.217.0.1").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:1.2.36.146.595.217.0.1")
        self.assertEqual(inst.identifier[0].type.coding[0].code.value, FHIRCode("MR").value)
        self.assertEqual(inst.identifier[0].type.coding[0].code.as_json(), "MR")
        self.assertEqual(inst.identifier[0].type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0203").value)
        self.assertEqual(inst.identifier[0].type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0203")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "usual")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("3112219680806371X").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "3112219680806371X")
        self.assertEqual(inst.meta.lastUpdated.value, FHIRInstant("2016-05-16T00:55:52Z").value)
        self.assertEqual(inst.meta.lastUpdated.as_json(), "2016-05-16T00:55:52Z")
        self.assertEqual(inst.meta.lastUpdated.date, FHIRInstant('2016-05-16T00:55:52Z').date)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.meta.versionId.value, FHIRId("1").value)
        self.assertEqual(inst.meta.versionId.as_json(), "1")
        self.assertEqual(inst.name[0].text.value, FHIRString("张无忌").value)
        self.assertEqual(inst.name[0].text.as_json(), "张无忌")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("home").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "home")
        self.assertEqual(inst.telecom[1].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[1].system.as_json(), "phone")
        self.assertEqual(inst.telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[1].use.as_json(), "work")
        self.assertEqual(inst.telecom[1].value.value, FHIRString("18337177888").value)
        self.assertEqual(inst.telecom[1].value.as_json(), "18337177888")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPatient4(self):
        inst = self.instantiate_from('patient-example-xcda.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Patient instance')
        self.implPatient4(inst)

        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient4(inst2)

    def implPatient4(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.birthDate.value, FHIRDate("1932-09-24").value)
        self.assertEqual(inst.birthDate.as_json(), "1932-09-24")
        self.assertEqual(inst.birthDate.date, FHIRDate('1932-09-24').date)
        self.assertEqual(inst.gender.value, FHIRCode("male").value)
        self.assertEqual(inst.gender.as_json(), "male")
        self.assertEqual(inst.id.value, FHIRString("xcda").value)
        self.assertEqual(inst.id.as_json(), "xcda")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:2.16.840.1.113883.19.5").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:2.16.840.1.113883.19.5")
        self.assertEqual(inst.identifier[0].type.coding[0].code.value, FHIRCode("MR").value)
        self.assertEqual(inst.identifier[0].type.coding[0].code.as_json(), "MR")
        self.assertEqual(inst.identifier[0].type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0203").value)
        self.assertEqual(inst.identifier[0].type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0203")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "usual")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("12345").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "12345")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Levin").value)
        self.assertEqual(inst.name[0].family.as_json(), "Levin")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Henry").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Henry")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPatient5(self):
        inst = self.instantiate_from('patient-example-infant-fetal.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Patient instance')
        self.implPatient5(inst)

        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient5(inst2)

    def implPatient5(self, inst):
        self.assertEqual(inst.contact[0].name.family.value, FHIRString("Organa").value)
        self.assertEqual(inst.contact[0].name.family.as_json(), "Organa")
        self.assertEqual(inst.contact[0].name.given[0].value, FHIRString("Leia").value)
        self.assertEqual(inst.contact[0].name.given[0].as_json(), "Leia")
        self.assertEqual(inst.contact[0].name.use.value, FHIRCode("maiden").value)
        self.assertEqual(inst.contact[0].name.use.as_json(), "maiden")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code.value, FHIRCode("72705000").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code.as_json(), "72705000")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].display.value, FHIRString("Mother").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].display.as_json(), "Mother")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.contact[0].relationship[0].coding[1].code.value, FHIRCode("N").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[1].code.as_json(), "N")
        self.assertEqual(inst.contact[0].relationship[0].coding[1].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0131").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[1].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0131")
        self.assertEqual(inst.contact[0].relationship[0].coding[2].code.value, FHIRCode("MTH").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[2].code.as_json(), "MTH")
        self.assertEqual(inst.contact[0].relationship[0].coding[2].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-RoleCode").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[2].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-RoleCode")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.contact[0].telecom[0].use.value, FHIRCode("mobile").value)
        self.assertEqual(inst.contact[0].telecom[0].use.as_json(), "mobile")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("+31201234567").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "+31201234567")
        self.assertEqual(inst.extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName").value)
        self.assertEqual(inst.extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName")
        self.assertEqual(inst.extension[0].valueString.value, FHIRString("Organa").value)
        self.assertEqual(inst.extension[0].valueString.as_json(), "Organa")
        self.assertEqual(inst.gender.value, FHIRCode("male").value)
        self.assertEqual(inst.gender.as_json(), "male")
        self.assertEqual(inst.id.value, FHIRString("infant-fetal").value)
        self.assertEqual(inst.id.as_json(), "infant-fetal")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://coruscanthealth.org/main-hospital/patient-identifier").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://coruscanthealth.org/main-hospital/patient-identifier")
        self.assertEqual(inst.identifier[0].type.coding[0].code.value, FHIRCode("MR").value)
        self.assertEqual(inst.identifier[0].type.coding[0].code.as_json(), "MR")
        self.assertEqual(inst.identifier[0].type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0203").value)
        self.assertEqual(inst.identifier[0].type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0203")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("MRN657865757378").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "MRN657865757378")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPatient6(self):
        inst = self.instantiate_from('patient-example-a.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Patient instance')
        self.implPatient6(inst)

        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient6(inst2)

    def implPatient6(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code.value, FHIRCode("E").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code.as_json(), "E")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0131").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0131")
        self.assertEqual(inst.gender.value, FHIRCode("male").value)
        self.assertEqual(inst.gender.as_json(), "male")
        self.assertEqual(inst.id.value, FHIRString("pat1").value)
        self.assertEqual(inst.id.as_json(), "pat1")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:0.1.2.3.4.5.6.7").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:0.1.2.3.4.5.6.7")
        self.assertEqual(inst.identifier[0].type.coding[0].code.value, FHIRCode("MR").value)
        self.assertEqual(inst.identifier[0].type.coding[0].code.as_json(), "MR")
        self.assertEqual(inst.identifier[0].type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0203").value)
        self.assertEqual(inst.identifier[0].type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0203")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "usual")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("654321").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "654321")
        self.assertEqual(inst.link[0].type.value, FHIRCode("seealso").value)
        self.assertEqual(inst.link[0].type.as_json(), "seealso")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Donald").value)
        self.assertEqual(inst.name[0].family.as_json(), "Donald")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Duck").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Duck")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.photo[0].contentType.value, FHIRCode("image/gif").value)
        self.assertEqual(inst.photo[0].contentType.as_json(), "image/gif")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPatient7(self):
        inst = self.instantiate_from('patient-example-d.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Patient instance')
        self.implPatient7(inst)

        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient7(inst2)

    def implPatient7(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.birthDate.value, FHIRDate("1982-08-02").value)
        self.assertEqual(inst.birthDate.as_json(), "1982-08-02")
        self.assertEqual(inst.birthDate.date, FHIRDate('1982-08-02').date)
        self.assertTrue(inst.deceasedBoolean)
        self.assertEqual(inst.gender.value, FHIRCode("female").value)
        self.assertEqual(inst.gender.as_json(), "female")
        self.assertEqual(inst.id.value, FHIRString("pat4").value)
        self.assertEqual(inst.id.as_json(), "pat4")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:0.1.2.3.4.5.6.7").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:0.1.2.3.4.5.6.7")
        self.assertEqual(inst.identifier[0].type.coding[0].code.value, FHIRCode("MR").value)
        self.assertEqual(inst.identifier[0].type.coding[0].code.as_json(), "MR")
        self.assertEqual(inst.identifier[0].type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0203").value)
        self.assertEqual(inst.identifier[0].type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0203")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "usual")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("123458").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "123458")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Notsowell").value)
        self.assertEqual(inst.name[0].family.as_json(), "Notsowell")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Sandy").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Sandy")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPatient8(self):
        inst = self.instantiate_from('patient-example-f201-roel.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Patient instance')
        self.implPatient8(inst)

        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient8(inst2)

    def implPatient8(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].city.value, FHIRString("Amsterdam").value)
        self.assertEqual(inst.address[0].city.as_json(), "Amsterdam")
        self.assertEqual(inst.address[0].country.value, FHIRString("NLD").value)
        self.assertEqual(inst.address[0].country.as_json(), "NLD")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("Bos en Lommerplein 280").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "Bos en Lommerplein 280")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("1055RW").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "1055RW")
        self.assertEqual(inst.address[0].use.value, FHIRCode("home").value)
        self.assertEqual(inst.address[0].use.as_json(), "home")
        self.assertEqual(inst.birthDate.value, FHIRDate("1960-03-13").value)
        self.assertEqual(inst.birthDate.as_json(), "1960-03-13")
        self.assertEqual(inst.birthDate.date, FHIRDate('1960-03-13').date)
        self.assertEqual(inst.communication[0].language.coding[0].code.value, FHIRCode("nl-NL").value)
        self.assertEqual(inst.communication[0].language.coding[0].code.as_json(), "nl-NL")
        self.assertEqual(inst.communication[0].language.coding[0].display.value, FHIRString("Dutch").value)
        self.assertEqual(inst.communication[0].language.coding[0].display.as_json(), "Dutch")
        self.assertEqual(inst.communication[0].language.coding[0].system.value, FHIRUri("urn:ietf:bcp:47").value)
        self.assertEqual(inst.communication[0].language.coding[0].system.as_json(), "urn:ietf:bcp:47")
        self.assertTrue(inst.communication[0].preferred)
        self.assertEqual(inst.contact[0].name.text.value, FHIRString("Ariadne Bor-Jansma").value)
        self.assertEqual(inst.contact[0].name.text.as_json(), "Ariadne Bor-Jansma")
        self.assertEqual(inst.contact[0].name.use.value, FHIRCode("usual").value)
        self.assertEqual(inst.contact[0].name.use.as_json(), "usual")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code.value, FHIRCode("127850001").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code.as_json(), "127850001")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].display.value, FHIRString("Wife").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].display.as_json(), "Wife")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.contact[0].relationship[0].coding[1].code.value, FHIRCode("N").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[1].code.as_json(), "N")
        self.assertEqual(inst.contact[0].relationship[0].coding[1].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0131").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[1].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0131")
        self.assertEqual(inst.contact[0].relationship[0].coding[2].code.value, FHIRCode("WIFE").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[2].code.as_json(), "WIFE")
        self.assertEqual(inst.contact[0].relationship[0].coding[2].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-RoleCode").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[2].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-RoleCode")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.contact[0].telecom[0].use.value, FHIRCode("home").value)
        self.assertEqual(inst.contact[0].telecom[0].use.as_json(), "home")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("+31201234567").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "+31201234567")
        self.assertFalse(inst.deceasedBoolean)
        self.assertEqual(inst.gender.value, FHIRCode("male").value)
        self.assertEqual(inst.gender.as_json(), "male")
        self.assertEqual(inst.id.value, FHIRString("f201").value)
        self.assertEqual(inst.id.as_json(), "f201")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:2.16.840.1.113883.2.4.6.3").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:2.16.840.1.113883.2.4.6.3")
        self.assertEqual(inst.identifier[0].type.text.value, FHIRString("BSN").value)
        self.assertEqual(inst.identifier[0].type.text.as_json(), "BSN")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("123456789").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "123456789")
        self.assertEqual(inst.identifier[1].system.value, FHIRUri("urn:oid:2.16.840.1.113883.2.4.6.3").value)
        self.assertEqual(inst.identifier[1].system.as_json(), "urn:oid:2.16.840.1.113883.2.4.6.3")
        self.assertEqual(inst.identifier[1].type.text.value, FHIRString("BSN").value)
        self.assertEqual(inst.identifier[1].type.text.as_json(), "BSN")
        self.assertEqual(inst.identifier[1].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[1].use.as_json(), "official")
        self.assertEqual(inst.identifier[1].value.value, FHIRString("123456789").value)
        self.assertEqual(inst.identifier[1].value.as_json(), "123456789")
        self.assertEqual(inst.maritalStatus.coding[0].code.value, FHIRCode("36629006").value)
        self.assertEqual(inst.maritalStatus.coding[0].code.as_json(), "36629006")
        self.assertEqual(inst.maritalStatus.coding[0].display.value, FHIRString("Legally married").value)
        self.assertEqual(inst.maritalStatus.coding[0].display.as_json(), "Legally married")
        self.assertEqual(inst.maritalStatus.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.maritalStatus.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.maritalStatus.coding[1].code.value, FHIRCode("M").value)
        self.assertEqual(inst.maritalStatus.coding[1].code.as_json(), "M")
        self.assertEqual(inst.maritalStatus.coding[1].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-MaritalStatus").value)
        self.assertEqual(inst.maritalStatus.coding[1].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertFalse(inst.multipleBirthBoolean)
        self.assertEqual(inst.name[0].family.value, FHIRString("Bor").value)
        self.assertEqual(inst.name[0].family.as_json(), "Bor")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Roelof Olaf").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Roelof Olaf")
        self.assertEqual(inst.name[0].prefix[0].value, FHIRString("Drs.").value)
        self.assertEqual(inst.name[0].prefix[0].as_json(), "Drs.")
        self.assertEqual(inst.name[0].suffix[0].value, FHIRString("PDEng.").value)
        self.assertEqual(inst.name[0].suffix[0].as_json(), "PDEng.")
        self.assertEqual(inst.name[0].text.value, FHIRString("Roel").value)
        self.assertEqual(inst.name[0].text.as_json(), "Roel")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.photo[0].contentType.value, FHIRCode("image/jpeg").value)
        self.assertEqual(inst.photo[0].contentType.as_json(), "image/jpeg")
        self.assertEqual(inst.photo[0].url.value, FHIRUrl("Binary/f006").value)
        self.assertEqual(inst.photo[0].url.as_json(), "Binary/f006")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("mobile").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "mobile")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("+31612345678").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "+31612345678")
        self.assertEqual(inst.telecom[1].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[1].system.as_json(), "phone")
        self.assertEqual(inst.telecom[1].use.value, FHIRCode("home").value)
        self.assertEqual(inst.telecom[1].use.as_json(), "home")
        self.assertEqual(inst.telecom[1].value.value, FHIRString("+31201234567").value)
        self.assertEqual(inst.telecom[1].value.as_json(), "+31201234567")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPatient9(self):
        inst = self.instantiate_from('patient-example-f001-pieter.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Patient instance')
        self.implPatient9(inst)

        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient9(inst2)

    def implPatient9(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].city.value, FHIRString("Amsterdam").value)
        self.assertEqual(inst.address[0].city.as_json(), "Amsterdam")
        self.assertEqual(inst.address[0].country.value, FHIRString("NLD").value)
        self.assertEqual(inst.address[0].country.as_json(), "NLD")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("Van Egmondkade 23").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "Van Egmondkade 23")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("1024 RJ").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "1024 RJ")
        self.assertEqual(inst.address[0].use.value, FHIRCode("home").value)
        self.assertEqual(inst.address[0].use.as_json(), "home")
        self.assertEqual(inst.birthDate.value, FHIRDate("1944-11-17").value)
        self.assertEqual(inst.birthDate.as_json(), "1944-11-17")
        self.assertEqual(inst.birthDate.date, FHIRDate('1944-11-17').date)
        self.assertEqual(inst.communication[0].language.coding[0].code.value, FHIRCode("nl").value)
        self.assertEqual(inst.communication[0].language.coding[0].code.as_json(), "nl")
        self.assertEqual(inst.communication[0].language.coding[0].display.value, FHIRString("Dutch").value)
        self.assertEqual(inst.communication[0].language.coding[0].display.as_json(), "Dutch")
        self.assertEqual(inst.communication[0].language.coding[0].system.value, FHIRUri("urn:ietf:bcp:47").value)
        self.assertEqual(inst.communication[0].language.coding[0].system.as_json(), "urn:ietf:bcp:47")
        self.assertEqual(inst.communication[0].language.text.value, FHIRString("Nederlands").value)
        self.assertEqual(inst.communication[0].language.text.as_json(), "Nederlands")
        self.assertTrue(inst.communication[0].preferred)
        self.assertEqual(inst.contact[0].name.family.value, FHIRString("Abels").value)
        self.assertEqual(inst.contact[0].name.family.as_json(), "Abels")
        self.assertEqual(inst.contact[0].name.given[0].value, FHIRString("Sarah").value)
        self.assertEqual(inst.contact[0].name.given[0].as_json(), "Sarah")
        self.assertEqual(inst.contact[0].name.use.value, FHIRCode("usual").value)
        self.assertEqual(inst.contact[0].name.use.as_json(), "usual")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code.value, FHIRCode("C").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code.as_json(), "C")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0131").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0131")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.contact[0].telecom[0].use.value, FHIRCode("mobile").value)
        self.assertEqual(inst.contact[0].telecom[0].use.as_json(), "mobile")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("0690383372").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "0690383372")
        self.assertFalse(inst.deceasedBoolean)
        self.assertEqual(inst.gender.value, FHIRCode("male").value)
        self.assertEqual(inst.gender.as_json(), "male")
        self.assertEqual(inst.id.value, FHIRString("f001").value)
        self.assertEqual(inst.id.as_json(), "f001")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:2.16.840.1.113883.2.4.6.3").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:2.16.840.1.113883.2.4.6.3")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "usual")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("738472983").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "738472983")
        self.assertEqual(inst.identifier[1].system.value, FHIRUri("urn:oid:2.16.840.1.113883.2.4.6.3").value)
        self.assertEqual(inst.identifier[1].system.as_json(), "urn:oid:2.16.840.1.113883.2.4.6.3")
        self.assertEqual(inst.identifier[1].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[1].use.as_json(), "usual")
        self.assertEqual(inst.maritalStatus.coding[0].code.value, FHIRCode("M").value)
        self.assertEqual(inst.maritalStatus.coding[0].code.as_json(), "M")
        self.assertEqual(inst.maritalStatus.coding[0].display.value, FHIRString("Married").value)
        self.assertEqual(inst.maritalStatus.coding[0].display.as_json(), "Married")
        self.assertEqual(inst.maritalStatus.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-MaritalStatus").value)
        self.assertEqual(inst.maritalStatus.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus")
        self.assertEqual(inst.maritalStatus.text.value, FHIRString("Getrouwd").value)
        self.assertEqual(inst.maritalStatus.text.as_json(), "Getrouwd")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertTrue(inst.multipleBirthBoolean)
        self.assertEqual(inst.name[0].family.value, FHIRString("van de Heuvel").value)
        self.assertEqual(inst.name[0].family.as_json(), "van de Heuvel")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Pieter").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Pieter")
        self.assertEqual(inst.name[0].suffix[0].value, FHIRString("MSc").value)
        self.assertEqual(inst.name[0].suffix[0].as_json(), "MSc")
        self.assertEqual(inst.name[0].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.name[0].use.as_json(), "usual")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("mobile").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "mobile")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("0648352638").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "0648352638")
        self.assertEqual(inst.telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.telecom[1].system.as_json(), "email")
        self.assertEqual(inst.telecom[1].use.value, FHIRCode("home").value)
        self.assertEqual(inst.telecom[1].use.as_json(), "home")
        self.assertEqual(inst.telecom[1].value.value, FHIRString("p.heuvel@gmail.com").value)
        self.assertEqual(inst.telecom[1].value.as_json(), "p.heuvel@gmail.com")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPatient10(self):
        inst = self.instantiate_from('patient-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Patient instance')
        self.implPatient10(inst)

        js = inst.as_json()
        self.assertEqual("Patient", js["resourceType"])
        inst2 = patient.Patient(js)
        self.implPatient10(inst2)

    def implPatient10(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].city.value, FHIRString("PleasantVille").value)
        self.assertEqual(inst.address[0].city.as_json(), "PleasantVille")
        self.assertEqual(inst.address[0].district.value, FHIRString("Rainbow").value)
        self.assertEqual(inst.address[0].district.as_json(), "Rainbow")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("534 Erewhon St").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "534 Erewhon St")
        self.assertEqual(inst.address[0].period.start.value, FHIRDateTime("1974-12-25").value)
        self.assertEqual(inst.address[0].period.start.as_json(), "1974-12-25")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("3999").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "3999")
        self.assertEqual(inst.address[0].state.value, FHIRString("Vic").value)
        self.assertEqual(inst.address[0].state.as_json(), "Vic")
        self.assertEqual(inst.address[0].text.value, FHIRString("534 Erewhon St PeasantVille, Rainbow, Vic  3999").value)
        self.assertEqual(inst.address[0].text.as_json(), "534 Erewhon St PeasantVille, Rainbow, Vic  3999")
        self.assertEqual(inst.address[0].type.value, FHIRCode("both").value)
        self.assertEqual(inst.address[0].type.as_json(), "both")
        self.assertEqual(inst.address[0].use.value, FHIRCode("home").value)
        self.assertEqual(inst.address[0].use.as_json(), "home")
        self.assertEqual(inst.birthDate.value, FHIRDate("1974-12-25").value)
        self.assertEqual(inst.birthDate.as_json(), "1974-12-25")
        self.assertEqual(inst.birthDate.date, FHIRDate('1974-12-25').date)
        self.assertEqual(inst.contact[0].address.city.value, FHIRString("PleasantVille").value)
        self.assertEqual(inst.contact[0].address.city.as_json(), "PleasantVille")
        self.assertEqual(inst.contact[0].address.district.value, FHIRString("Rainbow").value)
        self.assertEqual(inst.contact[0].address.district.as_json(), "Rainbow")
        self.assertEqual(inst.contact[0].address.line[0].value, FHIRString("534 Erewhon St").value)
        self.assertEqual(inst.contact[0].address.line[0].as_json(), "534 Erewhon St")
        self.assertEqual(inst.contact[0].address.period.start.value, FHIRDateTime("1974-12-25").value)
        self.assertEqual(inst.contact[0].address.period.start.as_json(), "1974-12-25")
        self.assertEqual(inst.contact[0].address.postalCode.value, FHIRString("3999").value)
        self.assertEqual(inst.contact[0].address.postalCode.as_json(), "3999")
        self.assertEqual(inst.contact[0].address.state.value, FHIRString("Vic").value)
        self.assertEqual(inst.contact[0].address.state.as_json(), "Vic")
        self.assertEqual(inst.contact[0].address.type.value, FHIRCode("both").value)
        self.assertEqual(inst.contact[0].address.type.as_json(), "both")
        self.assertEqual(inst.contact[0].address.use.value, FHIRCode("home").value)
        self.assertEqual(inst.contact[0].address.use.as_json(), "home")
        self.assertEqual(inst.contact[0].gender.value, FHIRCode("female").value)
        self.assertEqual(inst.contact[0].gender.as_json(), "female")
        self.assertEqual(inst.contact[0].name.family.value, FHIRString("du Marché").value)
        self.assertEqual(inst.contact[0].name.family.as_json(), "du Marché")
        self.assertEqual(inst.contact[0].name.given[0].value, FHIRString("Bénédicte").value)
        self.assertEqual(inst.contact[0].name.given[0].as_json(), "Bénédicte")
        self.assertEqual(inst.contact[0].period.start.value, FHIRDateTime("2012").value)
        self.assertEqual(inst.contact[0].period.start.as_json(), "2012")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code.value, FHIRCode("N").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].code.as_json(), "N")
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0131").value)
        self.assertEqual(inst.contact[0].relationship[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0131")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("+33 (237) 998327").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "+33 (237) 998327")
        self.assertFalse(inst.deceasedBoolean)
        self.assertEqual(inst.gender.value, FHIRCode("male").value)
        self.assertEqual(inst.gender.as_json(), "male")
        self.assertEqual(inst.id.value, FHIRString("example").value)
        self.assertEqual(inst.id.as_json(), "example")
        self.assertEqual(inst.identifier[0].period.start.value, FHIRDateTime("2001-05-06").value)
        self.assertEqual(inst.identifier[0].period.start.as_json(), "2001-05-06")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:1.2.36.146.595.217.0.1").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:1.2.36.146.595.217.0.1")
        self.assertEqual(inst.identifier[0].type.coding[0].code.value, FHIRCode("MR").value)
        self.assertEqual(inst.identifier[0].type.coding[0].code.as_json(), "MR")
        self.assertEqual(inst.identifier[0].type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0203").value)
        self.assertEqual(inst.identifier[0].type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0203")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "usual")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("12345").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "12345")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Chalmers").value)
        self.assertEqual(inst.name[0].family.as_json(), "Chalmers")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Peter").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Peter")
        self.assertEqual(inst.name[0].given[1].value, FHIRString("James").value)
        self.assertEqual(inst.name[0].given[1].as_json(), "James")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.name[1].given[0].value, FHIRString("Jim").value)
        self.assertEqual(inst.name[1].given[0].as_json(), "Jim")
        self.assertEqual(inst.name[1].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.name[1].use.as_json(), "usual")
        self.assertEqual(inst.name[2].family.value, FHIRString("Windsor").value)
        self.assertEqual(inst.name[2].family.as_json(), "Windsor")
        self.assertEqual(inst.name[2].given[0].value, FHIRString("Peter").value)
        self.assertEqual(inst.name[2].given[0].as_json(), "Peter")
        self.assertEqual(inst.name[2].given[1].value, FHIRString("James").value)
        self.assertEqual(inst.name[2].given[1].as_json(), "James")
        self.assertEqual(inst.name[2].period.end.value, FHIRDateTime("2002").value)
        self.assertEqual(inst.name[2].period.end.as_json(), "2002")
        self.assertEqual(inst.name[2].use.value, FHIRCode("maiden").value)
        self.assertEqual(inst.name[2].use.as_json(), "maiden")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("home").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "home")
        self.assertEqual(inst.telecom[1].rank.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.telecom[1].rank.as_json(), 1)
        self.assertEqual(inst.telecom[1].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[1].system.as_json(), "phone")
        self.assertEqual(inst.telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[1].use.as_json(), "work")
        self.assertEqual(inst.telecom[1].value.value, FHIRString("(03) 5555 6473").value)
        self.assertEqual(inst.telecom[1].value.as_json(), "(03) 5555 6473")
        self.assertEqual(inst.telecom[2].rank.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.telecom[2].rank.as_json(), 2)
        self.assertEqual(inst.telecom[2].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[2].system.as_json(), "phone")
        self.assertEqual(inst.telecom[2].use.value, FHIRCode("mobile").value)
        self.assertEqual(inst.telecom[2].use.as_json(), "mobile")
        self.assertEqual(inst.telecom[2].value.value, FHIRString("(03) 3410 5613").value)
        self.assertEqual(inst.telecom[2].value.as_json(), "(03) 3410 5613")
        self.assertEqual(inst.telecom[3].period.end.value, FHIRDateTime("2014").value)
        self.assertEqual(inst.telecom[3].period.end.as_json(), "2014")
        self.assertEqual(inst.telecom[3].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[3].system.as_json(), "phone")
        self.assertEqual(inst.telecom[3].use.value, FHIRCode("old").value)
        self.assertEqual(inst.telecom[3].use.as_json(), "old")
        self.assertEqual(inst.telecom[3].value.value, FHIRString("(03) 5555 8834").value)
        self.assertEqual(inst.telecom[3].value.as_json(), "(03) 5555 8834")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")


from fhirclient.models.fhirdatatypes import FHIRDate, FHIRString, FHIRCode, FHIRUri, FHIRDateTime, FHIRInstant, FHIRId, FHIRUrl, FHIRPositiveInt