#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import practitioner

class PractitionerTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Practitioner", js["resourceType"])
        return practitioner.Practitioner(js)

    def testPractitioner1(self):
        inst = self.instantiate_from('practitioner-example-f007-sh.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Practitioner instance')
        self.implPractitioner1(inst)

        js = inst.as_json()
        self.assertEqual("Practitioner", js["resourceType"])
        inst2 = practitioner.Practitioner(js)
        self.implPractitioner1(inst2)

    def implPractitioner1(self, inst):
        self.assertEqual(inst.address[0].city.value, FHIRString("Den Burg").value)
        self.assertEqual(inst.address[0].city.as_json(), "Den Burg")
        self.assertEqual(inst.address[0].country.value, FHIRString("NLD").value)
        self.assertEqual(inst.address[0].country.as_json(), "NLD")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("Galapagosweg 91").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "Galapagosweg 91")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("9105 PZ").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "9105 PZ")
        self.assertEqual(inst.address[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.address[0].use.as_json(), "work")
        self.assertEqual(inst.birthDate.value, FHIRDate("1971-11-07").value)
        self.assertEqual(inst.birthDate.as_json(), "1971-11-07")
        self.assertEqual(inst.birthDate.date, FHIRDate('1971-11-07').date)
        self.assertEqual(inst.gender.value, FHIRCode("female").value)
        self.assertEqual(inst.gender.as_json(), "female")
        self.assertEqual(inst.id.value, FHIRString("f007").value)
        self.assertEqual(inst.id.as_json(), "f007")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:2.16.528.1.1007.3.1").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:2.16.528.1.1007.3.1")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("874635264").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "874635264")
        self.assertEqual(inst.identifier[1].system.value, FHIRUri("urn:oid:2.16.840.1.113883.2.4.6.3").value)
        self.assertEqual(inst.identifier[1].system.as_json(), "urn:oid:2.16.840.1.113883.2.4.6.3")
        self.assertEqual(inst.identifier[1].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[1].use.as_json(), "usual")
        self.assertEqual(inst.identifier[1].value.value, FHIRString("567IUI51C154").value)
        self.assertEqual(inst.identifier[1].value.as_json(), "567IUI51C154")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Heps").value)
        self.assertEqual(inst.name[0].family.as_json(), "Heps")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Simone").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Simone")
        self.assertEqual(inst.name[0].suffix[0].value, FHIRString("MD").value)
        self.assertEqual(inst.name[0].suffix[0].as_json(), "MD")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "work")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("020556936").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "020556936")
        self.assertEqual(inst.telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.telecom[1].system.as_json(), "email")
        self.assertEqual(inst.telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[1].use.as_json(), "work")
        self.assertEqual(inst.telecom[1].value.value, FHIRString("S.M.Heps@bmc.nl").value)
        self.assertEqual(inst.telecom[1].value.as_json(), "S.M.Heps@bmc.nl")
        self.assertEqual(inst.telecom[2].system.value, FHIRCode("fax").value)
        self.assertEqual(inst.telecom[2].system.as_json(), "fax")
        self.assertEqual(inst.telecom[2].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[2].use.as_json(), "work")
        self.assertEqual(inst.telecom[2].value.value, FHIRString("0205669283").value)
        self.assertEqual(inst.telecom[2].value.as_json(), "0205669283")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPractitioner2(self):
        inst = self.instantiate_from('practitioner-example-f002-pv.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Practitioner instance')
        self.implPractitioner2(inst)

        js = inst.as_json()
        self.assertEqual("Practitioner", js["resourceType"])
        inst2 = practitioner.Practitioner(js)
        self.implPractitioner2(inst2)

    def implPractitioner2(self, inst):
        self.assertEqual(inst.address[0].city.value, FHIRString("Den Burg").value)
        self.assertEqual(inst.address[0].city.as_json(), "Den Burg")
        self.assertEqual(inst.address[0].country.value, FHIRString("NLD").value)
        self.assertEqual(inst.address[0].country.as_json(), "NLD")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("Galapagosweg 91").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "Galapagosweg 91")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("9105 PZ").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "9105 PZ")
        self.assertEqual(inst.address[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.address[0].use.as_json(), "work")
        self.assertEqual(inst.birthDate.value, FHIRDate("1979-04-29").value)
        self.assertEqual(inst.birthDate.as_json(), "1979-04-29")
        self.assertEqual(inst.birthDate.date, FHIRDate('1979-04-29').date)
        self.assertEqual(inst.gender.value, FHIRCode("male").value)
        self.assertEqual(inst.gender.as_json(), "male")
        self.assertEqual(inst.id.value, FHIRString("f002").value)
        self.assertEqual(inst.id.as_json(), "f002")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:2.16.528.1.1007.3.1").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:2.16.528.1.1007.3.1")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("730291637").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "730291637")
        self.assertEqual(inst.identifier[1].system.value, FHIRUri("urn:oid:2.16.840.1.113883.2.4.6.3").value)
        self.assertEqual(inst.identifier[1].system.as_json(), "urn:oid:2.16.840.1.113883.2.4.6.3")
        self.assertEqual(inst.identifier[1].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[1].use.as_json(), "usual")
        self.assertEqual(inst.identifier[1].value.value, FHIRString("174BIP3JH438").value)
        self.assertEqual(inst.identifier[1].value.as_json(), "174BIP3JH438")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Voigt").value)
        self.assertEqual(inst.name[0].family.as_json(), "Voigt")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Pieter").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Pieter")
        self.assertEqual(inst.name[0].suffix[0].value, FHIRString("MD").value)
        self.assertEqual(inst.name[0].suffix[0].as_json(), "MD")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "work")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("0205569336").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "0205569336")
        self.assertEqual(inst.telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.telecom[1].system.as_json(), "email")
        self.assertEqual(inst.telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[1].use.as_json(), "work")
        self.assertEqual(inst.telecom[1].value.value, FHIRString("p.voigt@bmc.nl").value)
        self.assertEqual(inst.telecom[1].value.as_json(), "p.voigt@bmc.nl")
        self.assertEqual(inst.telecom[2].system.value, FHIRCode("fax").value)
        self.assertEqual(inst.telecom[2].system.as_json(), "fax")
        self.assertEqual(inst.telecom[2].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[2].use.as_json(), "work")
        self.assertEqual(inst.telecom[2].value.value, FHIRString("0205669382").value)
        self.assertEqual(inst.telecom[2].value.as_json(), "0205669382")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPractitioner3(self):
        inst = self.instantiate_from('practitioner-example-f003-mv.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Practitioner instance')
        self.implPractitioner3(inst)

        js = inst.as_json()
        self.assertEqual("Practitioner", js["resourceType"])
        inst2 = practitioner.Practitioner(js)
        self.implPractitioner3(inst2)

    def implPractitioner3(self, inst):
        self.assertEqual(inst.address[0].city.value, FHIRString("Amsterdam").value)
        self.assertEqual(inst.address[0].city.as_json(), "Amsterdam")
        self.assertEqual(inst.address[0].country.value, FHIRString("NLD").value)
        self.assertEqual(inst.address[0].country.as_json(), "NLD")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("Galapagosweg 91").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "Galapagosweg 91")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("1105 AZ").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "1105 AZ")
        self.assertEqual(inst.address[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.address[0].use.as_json(), "work")
        self.assertEqual(inst.birthDate.value, FHIRDate("1963-07-01").value)
        self.assertEqual(inst.birthDate.as_json(), "1963-07-01")
        self.assertEqual(inst.birthDate.date, FHIRDate('1963-07-01').date)
        self.assertEqual(inst.communication[0].coding[0].code.value, FHIRCode("nl").value)
        self.assertEqual(inst.communication[0].coding[0].code.as_json(), "nl")
        self.assertEqual(inst.communication[0].coding[0].display.value, FHIRString("Dutch").value)
        self.assertEqual(inst.communication[0].coding[0].display.as_json(), "Dutch")
        self.assertEqual(inst.communication[0].coding[0].system.value, FHIRUri("urn:ietf:bcp:47").value)
        self.assertEqual(inst.communication[0].coding[0].system.as_json(), "urn:ietf:bcp:47")
        self.assertEqual(inst.gender.value, FHIRCode("male").value)
        self.assertEqual(inst.gender.as_json(), "male")
        self.assertEqual(inst.id.value, FHIRString("f003").value)
        self.assertEqual(inst.id.as_json(), "f003")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:2.16.528.1.1007.3.1").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:2.16.528.1.1007.3.1")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("846100293").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "846100293")
        self.assertEqual(inst.identifier[1].system.value, FHIRUri("urn:oid:2.16.840.1.113883.2.4.6.3").value)
        self.assertEqual(inst.identifier[1].system.as_json(), "urn:oid:2.16.840.1.113883.2.4.6.3")
        self.assertEqual(inst.identifier[1].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[1].use.as_json(), "usual")
        self.assertEqual(inst.identifier[1].value.value, FHIRString("243HID3RT938").value)
        self.assertEqual(inst.identifier[1].value.as_json(), "243HID3RT938")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Versteegh").value)
        self.assertEqual(inst.name[0].family.as_json(), "Versteegh")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Marc").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Marc")
        self.assertEqual(inst.name[0].suffix[0].value, FHIRString("MD").value)
        self.assertEqual(inst.name[0].suffix[0].as_json(), "MD")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "work")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("0205562431").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "0205562431")
        self.assertEqual(inst.telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.telecom[1].system.as_json(), "email")
        self.assertEqual(inst.telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[1].use.as_json(), "work")
        self.assertEqual(inst.telecom[1].value.value, FHIRString("m.versteegh@bmc.nl").value)
        self.assertEqual(inst.telecom[1].value.as_json(), "m.versteegh@bmc.nl")
        self.assertEqual(inst.telecom[2].system.value, FHIRCode("fax").value)
        self.assertEqual(inst.telecom[2].system.as_json(), "fax")
        self.assertEqual(inst.telecom[2].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[2].use.as_json(), "work")
        self.assertEqual(inst.telecom[2].value.value, FHIRString("0205662948").value)
        self.assertEqual(inst.telecom[2].value.as_json(), "0205662948")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPractitioner4(self):
        inst = self.instantiate_from('practitioner-example-xcda-author.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Practitioner instance')
        self.implPractitioner4(inst)

        js = inst.as_json()
        self.assertEqual("Practitioner", js["resourceType"])
        inst2 = practitioner.Practitioner(js)
        self.implPractitioner4(inst2)

    def implPractitioner4(self, inst):
        self.assertEqual(inst.id.value, FHIRString("xcda-author").value)
        self.assertEqual(inst.id.as_json(), "xcda-author")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Hippocrates").value)
        self.assertEqual(inst.name[0].family.as_json(), "Hippocrates")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Harold").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Harold")
        self.assertEqual(inst.name[0].suffix[0].value, FHIRString("MD").value)
        self.assertEqual(inst.name[0].suffix[0].as_json(), "MD")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPractitioner5(self):
        inst = self.instantiate_from('practitioner-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Practitioner instance')
        self.implPractitioner5(inst)

        js = inst.as_json()
        self.assertEqual("Practitioner", js["resourceType"])
        inst2 = practitioner.Practitioner(js)
        self.implPractitioner5(inst2)

    def implPractitioner5(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].city.value, FHIRString("PleasantVille").value)
        self.assertEqual(inst.address[0].city.as_json(), "PleasantVille")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("534 Erewhon St").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "534 Erewhon St")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("3999").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "3999")
        self.assertEqual(inst.address[0].state.value, FHIRString("Vic").value)
        self.assertEqual(inst.address[0].state.as_json(), "Vic")
        self.assertEqual(inst.address[0].use.value, FHIRCode("home").value)
        self.assertEqual(inst.address[0].use.as_json(), "home")
        self.assertEqual(inst.id.value, FHIRString("example").value)
        self.assertEqual(inst.id.as_json(), "example")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.acme.org/practitioners").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.acme.org/practitioners")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("23").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "23")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Careful").value)
        self.assertEqual(inst.name[0].family.as_json(), "Careful")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Adam").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Adam")
        self.assertEqual(inst.name[0].prefix[0].value, FHIRString("Dr").value)
        self.assertEqual(inst.name[0].prefix[0].as_json(), "Dr")
        self.assertEqual(inst.qualification[0].code.coding[0].code.value, FHIRCode("BS").value)
        self.assertEqual(inst.qualification[0].code.coding[0].code.as_json(), "BS")
        self.assertEqual(inst.qualification[0].code.coding[0].display.value, FHIRString("Bachelor of Science").value)
        self.assertEqual(inst.qualification[0].code.coding[0].display.as_json(), "Bachelor of Science")
        self.assertEqual(inst.qualification[0].code.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0360/2.7").value)
        self.assertEqual(inst.qualification[0].code.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0360/2.7")
        self.assertEqual(inst.qualification[0].code.text.value, FHIRString("Bachelor of Science").value)
        self.assertEqual(inst.qualification[0].code.text.as_json(), "Bachelor of Science")
        self.assertEqual(inst.qualification[0].identifier[0].system.value, FHIRUri("http://example.org/UniversityIdentifier").value)
        self.assertEqual(inst.qualification[0].identifier[0].system.as_json(), "http://example.org/UniversityIdentifier")
        self.assertEqual(inst.qualification[0].identifier[0].value.value, FHIRString("12345").value)
        self.assertEqual(inst.qualification[0].identifier[0].value.as_json(), "12345")
        self.assertEqual(inst.qualification[0].period.start.value, FHIRDateTime("1995").value)
        self.assertEqual(inst.qualification[0].period.start.as_json(), "1995")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPractitioner6(self):
        inst = self.instantiate_from('practitioner-example-f204-ce.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Practitioner instance')
        self.implPractitioner6(inst)

        js = inst.as_json()
        self.assertEqual("Practitioner", js["resourceType"])
        inst2 = practitioner.Practitioner(js)
        self.implPractitioner6(inst2)

    def implPractitioner6(self, inst):
        self.assertEqual(inst.address[0].city.value, FHIRString("Den helder").value)
        self.assertEqual(inst.address[0].city.as_json(), "Den helder")
        self.assertEqual(inst.address[0].country.value, FHIRString("NLD").value)
        self.assertEqual(inst.address[0].country.as_json(), "NLD")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("Walvisbaai 3").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "Walvisbaai 3")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("2333ZA").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "2333ZA")
        self.assertEqual(inst.address[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.address[0].use.as_json(), "work")
        self.assertEqual(inst.birthDate.value, FHIRDate("1967-11-05").value)
        self.assertEqual(inst.birthDate.as_json(), "1967-11-05")
        self.assertEqual(inst.birthDate.date, FHIRDate('1967-11-05').date)
        self.assertEqual(inst.gender.value, FHIRCode("female").value)
        self.assertEqual(inst.gender.as_json(), "female")
        self.assertEqual(inst.id.value, FHIRString("f204").value)
        self.assertEqual(inst.id.as_json(), "f204")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:2.16.528.1.1007.3.1").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:2.16.528.1.1007.3.1")
        self.assertEqual(inst.identifier[0].type.text.value, FHIRString("UZI-nummer").value)
        self.assertEqual(inst.identifier[0].type.text.as_json(), "UZI-nummer")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("12345678904").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "12345678904")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].text.value, FHIRString("Carla Espinosa").value)
        self.assertEqual(inst.name[0].text.as_json(), "Carla Espinosa")
        self.assertEqual(inst.name[0].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.name[0].use.as_json(), "usual")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "work")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("+31715262169").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "+31715262169")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPractitioner7(self):
        inst = self.instantiate_from('practitioner-example-f001-evdb.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Practitioner instance')
        self.implPractitioner7(inst)

        js = inst.as_json()
        self.assertEqual("Practitioner", js["resourceType"])
        inst2 = practitioner.Practitioner(js)
        self.implPractitioner7(inst2)

    def implPractitioner7(self, inst):
        self.assertEqual(inst.address[0].city.value, FHIRString("Den Burg").value)
        self.assertEqual(inst.address[0].city.as_json(), "Den Burg")
        self.assertEqual(inst.address[0].country.value, FHIRString("NLD").value)
        self.assertEqual(inst.address[0].country.as_json(), "NLD")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("Galapagosweg 91").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "Galapagosweg 91")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("9105 PZ").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "9105 PZ")
        self.assertEqual(inst.address[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.address[0].use.as_json(), "work")
        self.assertEqual(inst.birthDate.value, FHIRDate("1975-12-07").value)
        self.assertEqual(inst.birthDate.as_json(), "1975-12-07")
        self.assertEqual(inst.birthDate.date, FHIRDate('1975-12-07').date)
        self.assertEqual(inst.gender.value, FHIRCode("male").value)
        self.assertEqual(inst.gender.as_json(), "male")
        self.assertEqual(inst.id.value, FHIRString("f001").value)
        self.assertEqual(inst.id.as_json(), "f001")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:2.16.528.1.1007.3.1").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:2.16.528.1.1007.3.1")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("938273695").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "938273695")
        self.assertEqual(inst.identifier[1].system.value, FHIRUri("urn:oid:2.16.840.1.113883.2.4.6.3").value)
        self.assertEqual(inst.identifier[1].system.as_json(), "urn:oid:2.16.840.1.113883.2.4.6.3")
        self.assertEqual(inst.identifier[1].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[1].use.as_json(), "usual")
        self.assertEqual(inst.identifier[1].value.value, FHIRString("129IDH4OP733").value)
        self.assertEqual(inst.identifier[1].value.as_json(), "129IDH4OP733")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("van den broek").value)
        self.assertEqual(inst.name[0].family.as_json(), "van den broek")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Eric").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Eric")
        self.assertEqual(inst.name[0].suffix[0].value, FHIRString("MD").value)
        self.assertEqual(inst.name[0].suffix[0].as_json(), "MD")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "work")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("0205568263").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "0205568263")
        self.assertEqual(inst.telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.telecom[1].system.as_json(), "email")
        self.assertEqual(inst.telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[1].use.as_json(), "work")
        self.assertEqual(inst.telecom[1].value.value, FHIRString("E.M.vandenbroek@bmc.nl").value)
        self.assertEqual(inst.telecom[1].value.as_json(), "E.M.vandenbroek@bmc.nl")
        self.assertEqual(inst.telecom[2].system.value, FHIRCode("fax").value)
        self.assertEqual(inst.telecom[2].system.as_json(), "fax")
        self.assertEqual(inst.telecom[2].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[2].use.as_json(), "work")
        self.assertEqual(inst.telecom[2].value.value, FHIRString("0205664440").value)
        self.assertEqual(inst.telecom[2].value.as_json(), "0205664440")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPractitioner8(self):
        inst = self.instantiate_from('practitioner-example-f202-lm.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Practitioner instance')
        self.implPractitioner8(inst)

        js = inst.as_json()
        self.assertEqual("Practitioner", js["resourceType"])
        inst2 = practitioner.Practitioner(js)
        self.implPractitioner8(inst2)

    def implPractitioner8(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].city.value, FHIRString("Den helder").value)
        self.assertEqual(inst.address[0].city.as_json(), "Den helder")
        self.assertEqual(inst.address[0].country.value, FHIRString("NLD").value)
        self.assertEqual(inst.address[0].country.as_json(), "NLD")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("Walvisbaai 3").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "Walvisbaai 3")
        self.assertEqual(inst.address[0].line[1].value, FHIRString("C4 - Automatisering").value)
        self.assertEqual(inst.address[0].line[1].as_json(), "C4 - Automatisering")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("2333ZA").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "2333ZA")
        self.assertEqual(inst.address[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.address[0].use.as_json(), "work")
        self.assertEqual(inst.birthDate.value, FHIRDate("1960-06-12").value)
        self.assertEqual(inst.birthDate.as_json(), "1960-06-12")
        self.assertEqual(inst.birthDate.date, FHIRDate('1960-06-12').date)
        self.assertEqual(inst.gender.value, FHIRCode("male").value)
        self.assertEqual(inst.gender.as_json(), "male")
        self.assertEqual(inst.id.value, FHIRString("f202").value)
        self.assertEqual(inst.id.as_json(), "f202")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:2.16.528.1.1007.3.1").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:2.16.528.1.1007.3.1")
        self.assertEqual(inst.identifier[0].type.text.value, FHIRString("UZI-nummer").value)
        self.assertEqual(inst.identifier[0].type.text.as_json(), "UZI-nummer")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("12345678902").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "12345678902")
        self.assertEqual(inst.identifier[1].system.value, FHIRUri("https://www.bigregister.nl/").value)
        self.assertEqual(inst.identifier[1].system.as_json(), "https://www.bigregister.nl/")
        self.assertEqual(inst.identifier[1].type.text.value, FHIRString("BIG-nummer").value)
        self.assertEqual(inst.identifier[1].type.text.as_json(), "BIG-nummer")
        self.assertEqual(inst.identifier[1].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[1].use.as_json(), "official")
        self.assertEqual(inst.identifier[1].value.value, FHIRString("12345678902").value)
        self.assertEqual(inst.identifier[1].value.as_json(), "12345678902")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Maas").value)
        self.assertEqual(inst.name[0].family.as_json(), "Maas")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Luigi").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Luigi")
        self.assertEqual(inst.name[0].prefix[0].value, FHIRString("Dr.").value)
        self.assertEqual(inst.name[0].prefix[0].as_json(), "Dr.")
        self.assertEqual(inst.name[0].text.value, FHIRString("Luigi Maas").value)
        self.assertEqual(inst.name[0].text.as_json(), "Luigi Maas")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "work")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("+31715269111").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "+31715269111")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPractitioner9(self):
        inst = self.instantiate_from('practitioner-example-f004-rb.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Practitioner instance')
        self.implPractitioner9(inst)

        js = inst.as_json()
        self.assertEqual("Practitioner", js["resourceType"])
        inst2 = practitioner.Practitioner(js)
        self.implPractitioner9(inst2)

    def implPractitioner9(self, inst):
        self.assertEqual(inst.address[0].city.value, FHIRString("Amsterdam").value)
        self.assertEqual(inst.address[0].city.as_json(), "Amsterdam")
        self.assertEqual(inst.address[0].country.value, FHIRString("NLD").value)
        self.assertEqual(inst.address[0].country.as_json(), "NLD")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("Galapagosweg 91").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "Galapagosweg 91")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("1105 AZ").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "1105 AZ")
        self.assertEqual(inst.address[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.address[0].use.as_json(), "work")
        self.assertEqual(inst.birthDate.value, FHIRDate("1980-02-04").value)
        self.assertEqual(inst.birthDate.as_json(), "1980-02-04")
        self.assertEqual(inst.birthDate.date, FHIRDate('1980-02-04').date)
        self.assertEqual(inst.communication[0].coding[0].code.value, FHIRCode("nl").value)
        self.assertEqual(inst.communication[0].coding[0].code.as_json(), "nl")
        self.assertEqual(inst.communication[0].coding[0].display.value, FHIRString("Netherlands").value)
        self.assertEqual(inst.communication[0].coding[0].display.as_json(), "Netherlands")
        self.assertEqual(inst.communication[0].coding[0].system.value, FHIRUri("urn:ietf:bcp:47").value)
        self.assertEqual(inst.communication[0].coding[0].system.as_json(), "urn:ietf:bcp:47")
        self.assertEqual(inst.communication[0].text.value, FHIRString("Language").value)
        self.assertEqual(inst.communication[0].text.as_json(), "Language")
        self.assertEqual(inst.gender.value, FHIRCode("male").value)
        self.assertEqual(inst.gender.as_json(), "male")
        self.assertEqual(inst.id.value, FHIRString("f004").value)
        self.assertEqual(inst.id.as_json(), "f004")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:2.16.528.1.1007.3.1").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:2.16.528.1.1007.3.1")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("118265112").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "118265112")
        self.assertEqual(inst.identifier[1].system.value, FHIRUri("urn:oid:2.16.840.1.113883.2.4.6.3").value)
        self.assertEqual(inst.identifier[1].system.as_json(), "urn:oid:2.16.840.1.113883.2.4.6.3")
        self.assertEqual(inst.identifier[1].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[1].use.as_json(), "usual")
        self.assertEqual(inst.identifier[1].value.value, FHIRString("523ASA1LK927").value)
        self.assertEqual(inst.identifier[1].value.as_json(), "523ASA1LK927")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Briet").value)
        self.assertEqual(inst.name[0].family.as_json(), "Briet")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Ronald").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Ronald")
        self.assertEqual(inst.name[0].suffix[0].value, FHIRString("MD").value)
        self.assertEqual(inst.name[0].suffix[0].as_json(), "MD")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "work")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("0205569273").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "0205569273")
        self.assertEqual(inst.telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.telecom[1].system.as_json(), "email")
        self.assertEqual(inst.telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[1].use.as_json(), "work")
        self.assertEqual(inst.telecom[1].value.value, FHIRString("r.briet@bmc.nl").value)
        self.assertEqual(inst.telecom[1].value.as_json(), "r.briet@bmc.nl")
        self.assertEqual(inst.telecom[2].system.value, FHIRCode("fax").value)
        self.assertEqual(inst.telecom[2].system.as_json(), "fax")
        self.assertEqual(inst.telecom[2].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[2].use.as_json(), "work")
        self.assertEqual(inst.telecom[2].value.value, FHIRString("0205664440").value)
        self.assertEqual(inst.telecom[2].value.as_json(), "0205664440")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testPractitioner10(self):
        inst = self.instantiate_from('practitioner-example-f005-al.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Practitioner instance')
        self.implPractitioner10(inst)

        js = inst.as_json()
        self.assertEqual("Practitioner", js["resourceType"])
        inst2 = practitioner.Practitioner(js)
        self.implPractitioner10(inst2)

    def implPractitioner10(self, inst):
        self.assertEqual(inst.address[0].city.value, FHIRString("Amsterdam").value)
        self.assertEqual(inst.address[0].city.as_json(), "Amsterdam")
        self.assertEqual(inst.address[0].country.value, FHIRString("NLD").value)
        self.assertEqual(inst.address[0].country.as_json(), "NLD")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("Galapagosweg 9").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "Galapagosweg 9")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("1105 AZ").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "1105 AZ")
        self.assertEqual(inst.address[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.address[0].use.as_json(), "work")
        self.assertEqual(inst.birthDate.value, FHIRDate("1959-03-11").value)
        self.assertEqual(inst.birthDate.as_json(), "1959-03-11")
        self.assertEqual(inst.birthDate.date, FHIRDate('1959-03-11').date)
        self.assertEqual(inst.communication[0].coding[0].code.value, FHIRCode("fr").value)
        self.assertEqual(inst.communication[0].coding[0].code.as_json(), "fr")
        self.assertEqual(inst.communication[0].coding[0].display.value, FHIRString("France").value)
        self.assertEqual(inst.communication[0].coding[0].display.as_json(), "France")
        self.assertEqual(inst.communication[0].coding[0].system.value, FHIRUri("urn:ietf:bcp:47").value)
        self.assertEqual(inst.communication[0].coding[0].system.as_json(), "urn:ietf:bcp:47")
        self.assertEqual(inst.gender.value, FHIRCode("female").value)
        self.assertEqual(inst.gender.as_json(), "female")
        self.assertEqual(inst.id.value, FHIRString("f005").value)
        self.assertEqual(inst.id.as_json(), "f005")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:2.16.528.1.1007.3.1").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:2.16.528.1.1007.3.1")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("118265112").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "118265112")
        self.assertEqual(inst.identifier[1].system.value, FHIRUri("urn:oid:2.16.840.1.113883.2.4.6.3").value)
        self.assertEqual(inst.identifier[1].system.as_json(), "urn:oid:2.16.840.1.113883.2.4.6.3")
        self.assertEqual(inst.identifier[1].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[1].use.as_json(), "usual")
        self.assertEqual(inst.identifier[1].value.value, FHIRString("191REW8WE916").value)
        self.assertEqual(inst.identifier[1].value.as_json(), "191REW8WE916")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Anne").value)
        self.assertEqual(inst.name[0].family.as_json(), "Anne")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Langeveld").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Langeveld")
        self.assertEqual(inst.name[0].suffix[0].value, FHIRString("MD").value)
        self.assertEqual(inst.name[0].suffix[0].as_json(), "MD")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.photo[0].contentType.value, FHIRCode("image/jpeg").value)
        self.assertEqual(inst.photo[0].contentType.as_json(), "image/jpeg")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "work")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("0205563847").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "0205563847")
        self.assertEqual(inst.telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.telecom[1].system.as_json(), "email")
        self.assertEqual(inst.telecom[1].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[1].use.as_json(), "work")
        self.assertEqual(inst.telecom[1].value.value, FHIRString("a.langeveld@bmc.nl").value)
        self.assertEqual(inst.telecom[1].value.as_json(), "a.langeveld@bmc.nl")
        self.assertEqual(inst.telecom[2].system.value, FHIRCode("fax").value)
        self.assertEqual(inst.telecom[2].system.as_json(), "fax")
        self.assertEqual(inst.telecom[2].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[2].use.as_json(), "work")
        self.assertEqual(inst.telecom[2].value.value, FHIRString("0205668916").value)
        self.assertEqual(inst.telecom[2].value.as_json(), "0205668916")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")


from fhirclient.models.fhirdatatypes import FHIRString, FHIRCode, FHIRDate, FHIRUri, FHIRDateTime