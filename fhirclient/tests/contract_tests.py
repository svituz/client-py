#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import contract

class ContractTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Contract", js["resourceType"])
        return contract.Contract(js)

    def testContract1(self):
        inst = self.instantiate_from('contract-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Contract instance')
        self.implContract1(inst)

        js = inst.as_json()
        self.assertEqual("Contract", js["resourceType"])
        inst2 = contract.Contract(js)
        self.implContract1(inst2)

    def implContract1(self, inst):
        self.assertEqual(inst.id.value, FHIRString("C-123").value)
        self.assertEqual(inst.id.as_json(), "C-123")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://happyvalley.com/contract").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://happyvalley.com/contract")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("12347").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "12347")
        self.assertEqual(inst.legallyBindingAttachment.contentType.value, FHIRCode("application/pdf").value)
        self.assertEqual(inst.legallyBindingAttachment.contentType.as_json(), "application/pdf")
        self.assertEqual(inst.legallyBindingAttachment.url.value, FHIRUrl("http://www.aws3.com/storage/doc.pdf").value)
        self.assertEqual(inst.legallyBindingAttachment.url.as_json(), "http://www.aws3.com/storage/doc.pdf")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.rule[0].contentAttachment.contentType.value, FHIRCode("application/txt").value)
        self.assertEqual(inst.rule[0].contentAttachment.contentType.as_json(), "application/txt")
        self.assertEqual(inst.rule[0].contentAttachment.url.value, FHIRUrl("http://www.rfc-editor.org/bcp/bcp13.txt").value)
        self.assertEqual(inst.rule[0].contentAttachment.url.as_json(), "http://www.rfc-editor.org/bcp/bcp13.txt")
        self.assertEqual(inst.term[0].asset[0].period[0].start.value, FHIRDateTime("2017-06-01").value)
        self.assertEqual(inst.term[0].asset[0].period[0].start.as_json(), "2017-06-01")
        self.assertEqual(inst.term[0].asset[0].subtype[0].text.value, FHIRString("sample").value)
        self.assertEqual(inst.term[0].asset[0].subtype[0].text.as_json(), "sample")
        self.assertEqual(inst.term[0].asset[0].type[0].coding[0].code.value, FHIRCode("RicardianContract").value)
        self.assertEqual(inst.term[0].asset[0].type[0].coding[0].code.as_json(), "RicardianContract")
        self.assertEqual(inst.term[0].asset[0].type[0].coding[0].system.value, FHIRUri("urn:ietf:rfc:3986").value)
        self.assertEqual(inst.term[0].asset[0].type[0].coding[0].system.as_json(), "urn:ietf:rfc:3986")
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].effectiveTime.value, FHIRDateTime("1995").value)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].effectiveTime.as_json(), "1995")
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].entityCodeableConcept.text.value, FHIRString("Ford Bobcat").value)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].entityCodeableConcept.text.as_json(), "Ford Bobcat")
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].factor, 1.0)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].identifier.system.value, FHIRUri("http://somewhere.motor-vehicle.com/vin").value)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].identifier.system.as_json(), "http://somewhere.motor-vehicle.com/vin")
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].identifier.value.value, FHIRString("XXSVT34-7665t952236").value)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].identifier.value.as_json(), "XXSVT34-7665t952236")
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].net.currency.value, FHIRCode("CAD").value)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].net.currency.as_json(), "CAD")
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].net.value, 200.0)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].points, 1.0)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].quantity.value, 1)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].unitPrice.currency.value, FHIRCode("CAD").value)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].unitPrice.currency.as_json(), "CAD")
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].unitPrice.value, 200.0)
        self.assertEqual(inst.term[0].offer.text.value, FHIRString("Can't refuse").value)
        self.assertEqual(inst.term[0].offer.text.as_json(), "Can't refuse")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the contract</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the contract</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testContract2(self):
        inst = self.instantiate_from('pcd-example-notLabs.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Contract instance')
        self.implContract2(inst)

        js = inst.as_json()
        self.assertEqual("Contract", js["resourceType"])
        inst2 = contract.Contract(js)
        self.implContract2(inst2)

    def implContract2(self, inst):
        self.assertEqual(inst.friendly[0].contentAttachment.title.value, FHIRString("The terms of the consent in friendly consumer speak.").value)
        self.assertEqual(inst.friendly[0].contentAttachment.title.as_json(), "The terms of the consent in friendly consumer speak.")
        self.assertEqual(inst.id.value, FHIRString("pcd-example-notLabs").value)
        self.assertEqual(inst.id.as_json(), "pcd-example-notLabs")
        self.assertEqual(inst.issued.value, FHIRDateTime("2014-08-17").value)
        self.assertEqual(inst.issued.as_json(), "2014-08-17")
        self.assertEqual(inst.legal[0].contentAttachment.title.value, FHIRString("The terms of the consent in lawyer speak.").value)
        self.assertEqual(inst.legal[0].contentAttachment.title.as_json(), "The terms of the consent in lawyer speak.")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.subType[0].coding[0].code.value, FHIRCode("Opt-In").value)
        self.assertEqual(inst.subType[0].coding[0].code.as_json(), "Opt-In")
        self.assertEqual(inst.subType[0].coding[0].display.value, FHIRString("Default Authorization with exceptions.").value)
        self.assertEqual(inst.subType[0].coding[0].display.as_json(), "Default Authorization with exceptions.")
        self.assertEqual(inst.subType[0].coding[0].system.value, FHIRUri("http://www.infoway-inforoute.ca.org/Consent-subtype-codes").value)
        self.assertEqual(inst.subType[0].coding[0].system.as_json(), "http://www.infoway-inforoute.ca.org/Consent-subtype-codes")
        self.assertEqual(inst.term[0].group[0].offer.text.value, FHIRString("Withhold orders from any provider.").value)
        self.assertEqual(inst.term[0].group[0].offer.text.as_json(), "Withhold orders from any provider.")
        self.assertEqual(inst.term[0].group[0].subType.coding[0].code.value, FHIRCode("ServiceRequest").value)
        self.assertEqual(inst.term[0].group[0].subType.coding[0].code.as_json(), "ServiceRequest")
        self.assertEqual(inst.term[0].group[0].subType.coding[0].system.value, FHIRUri("http://hl7.org/fhir/resource-types").value)
        self.assertEqual(inst.term[0].group[0].subType.coding[0].system.as_json(), "http://hl7.org/fhir/resource-types")
        self.assertEqual(inst.term[0].group[0].type.coding[0].code.value, FHIRCode("withhold-object-type").value)
        self.assertEqual(inst.term[0].group[0].type.coding[0].code.as_json(), "withhold-object-type")
        self.assertEqual(inst.term[0].group[0].type.coding[0].system.value, FHIRUri("http://example.org/fhir/consent-term-type-codes").value)
        self.assertEqual(inst.term[0].group[0].type.coding[0].system.as_json(), "http://example.org/fhir/consent-term-type-codes")
        self.assertEqual(inst.term[0].group[1].offer.text.value, FHIRString("Withhold order results from any provider.").value)
        self.assertEqual(inst.term[0].group[1].offer.text.as_json(), "Withhold order results from any provider.")
        self.assertEqual(inst.term[0].group[1].subType.coding[0].code.value, FHIRCode("DiagnosticReport").value)
        self.assertEqual(inst.term[0].group[1].subType.coding[0].code.as_json(), "DiagnosticReport")
        self.assertEqual(inst.term[0].group[1].subType.coding[0].system.value, FHIRUri("http://hl7.org/fhir/resource-types").value)
        self.assertEqual(inst.term[0].group[1].subType.coding[0].system.as_json(), "http://hl7.org/fhir/resource-types")
        self.assertEqual(inst.term[0].group[1].type.coding[0].code.value, FHIRCode("withhold-object-type").value)
        self.assertEqual(inst.term[0].group[1].type.coding[0].code.as_json(), "withhold-object-type")
        self.assertEqual(inst.term[0].group[1].type.coding[0].system.value, FHIRUri("http://example.org/fhir/consent-term-type-codes").value)
        self.assertEqual(inst.term[0].group[1].type.coding[0].system.as_json(), "http://example.org/fhir/consent-term-type-codes")
        self.assertEqual(inst.term[0].offer.text.value, FHIRString("sample").value)
        self.assertEqual(inst.term[0].offer.text.as_json(), "sample")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("57016-8").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "57016-8")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://loinc.org")

    def testContract3(self):
        inst = self.instantiate_from('contract-example-ins-policy.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Contract instance')
        self.implContract3(inst)

        js = inst.as_json()
        self.assertEqual("Contract", js["resourceType"])
        inst2 = contract.Contract(js)
        self.implContract3(inst2)

    def implContract3(self, inst):
        self.assertEqual(inst.applies.start.value, FHIRDateTime("2017-01-01").value)
        self.assertEqual(inst.applies.start.as_json(), "2017-01-01")
        self.assertEqual(inst.id.value, FHIRString("INS-101").value)
        self.assertEqual(inst.id.as_json(), "INS-101")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://xyz-insurance.com/forms").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://xyz-insurance.com/forms")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("YCSCWLN(01-2017)").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "YCSCWLN(01-2017)")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.term[0].asset[0].period[0].start.value, FHIRDateTime("2017-06-01").value)
        self.assertEqual(inst.term[0].asset[0].period[0].start.as_json(), "2017-06-01")
        self.assertEqual(inst.term[0].asset[0].subtype[0].text.value, FHIRString("sample").value)
        self.assertEqual(inst.term[0].asset[0].subtype[0].text.as_json(), "sample")
        self.assertEqual(inst.term[0].asset[0].type[0].coding[0].code.value, FHIRCode("RicardianContract").value)
        self.assertEqual(inst.term[0].asset[0].type[0].coding[0].code.as_json(), "RicardianContract")
        self.assertEqual(inst.term[0].asset[0].type[0].coding[0].system.value, FHIRUri("urn:ietf:rfc:3986").value)
        self.assertEqual(inst.term[0].asset[0].type[0].coding[0].system.as_json(), "urn:ietf:rfc:3986")
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].effectiveTime.value, FHIRDateTime("1995").value)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].effectiveTime.as_json(), "1995")
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].entityCodeableConcept.text.value, FHIRString("Ford Bobcat").value)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].entityCodeableConcept.text.as_json(), "Ford Bobcat")
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].factor, 1.0)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].identifier.system.value, FHIRUri("http://somewhere.motor-vehicle.com/vin").value)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].identifier.system.as_json(), "http://somewhere.motor-vehicle.com/vin")
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].identifier.value.value, FHIRString("XXSVT34-7665t952236").value)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].identifier.value.as_json(), "XXSVT34-7665t952236")
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].net.currency.value, FHIRCode("CAD").value)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].net.currency.as_json(), "CAD")
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].net.value, 200.0)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].points, 1.0)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].quantity.value, 1)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].unitPrice.currency.value, FHIRCode("CAD").value)
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].unitPrice.currency.as_json(), "CAD")
        self.assertEqual(inst.term[0].asset[0].valuedItem[0].unitPrice.value, 200.0)
        self.assertEqual(inst.term[0].group[0].offer.text.value, FHIRString("Eligible Providers").value)
        self.assertEqual(inst.term[0].group[0].offer.text.as_json(), "Eligible Providers")
        self.assertEqual(inst.term[0].group[1].offer.text.value, FHIRString("Responsibility for Payment").value)
        self.assertEqual(inst.term[0].group[1].offer.text.as_json(), "Responsibility for Payment")
        self.assertEqual(inst.term[0].group[2].group[0].group[0].offer.text.value, FHIRString("Emergency Room Copay").value)
        self.assertEqual(inst.term[0].group[2].group[0].group[0].offer.text.as_json(), "Emergency Room Copay")
        self.assertEqual(inst.term[0].group[2].group[0].group[1].offer.text.value, FHIRString("Professional Visit Copay").value)
        self.assertEqual(inst.term[0].group[2].group[0].group[1].offer.text.as_json(), "Professional Visit Copay")
        self.assertEqual(inst.term[0].group[2].group[0].offer.text.value, FHIRString("Copays").value)
        self.assertEqual(inst.term[0].group[2].group[0].offer.text.as_json(), "Copays")
        self.assertEqual(inst.term[0].group[2].group[1].offer.text.value, FHIRString("Calendar Year Deductible").value)
        self.assertEqual(inst.term[0].group[2].group[1].offer.text.as_json(), "Calendar Year Deductible")
        self.assertEqual(inst.term[0].group[2].group[2].offer.text.value, FHIRString("Out-Of-Pocket Maximum").value)
        self.assertEqual(inst.term[0].group[2].group[2].offer.text.as_json(), "Out-Of-Pocket Maximum")
        self.assertEqual(inst.term[0].group[2].group[3].group[0].offer.text.value, FHIRString("Ambulance Services").value)
        self.assertEqual(inst.term[0].group[2].group[3].group[0].offer.text.as_json(), "Ambulance Services")
        self.assertEqual(inst.term[0].group[2].group[3].group[1].offer.text.value, FHIRString("Dental Services").value)
        self.assertEqual(inst.term[0].group[2].group[3].group[1].offer.text.as_json(), "Dental Services")
        self.assertEqual(inst.term[0].group[2].group[3].group[2].offer.text.value, FHIRString("Diagnostic Services").value)
        self.assertEqual(inst.term[0].group[2].group[3].group[2].offer.text.as_json(), "Diagnostic Services")
        self.assertEqual(inst.term[0].group[2].group[3].group[3].offer.text.value, FHIRString("Emergency Room Services").value)
        self.assertEqual(inst.term[0].group[2].group[3].group[3].offer.text.as_json(), "Emergency Room Services")
        self.assertEqual(inst.term[0].group[2].group[3].group[4].offer.text.value, FHIRString("Hospital Inpatient Care").value)
        self.assertEqual(inst.term[0].group[2].group[3].group[4].offer.text.as_json(), "Hospital Inpatient Care")
        self.assertEqual(inst.term[0].group[2].group[3].offer.text.value, FHIRString("Medical Services").value)
        self.assertEqual(inst.term[0].group[2].group[3].offer.text.as_json(), "Medical Services")
        self.assertEqual(inst.term[0].group[2].offer.text.value, FHIRString("List of Benefits").value)
        self.assertEqual(inst.term[0].group[2].offer.text.as_json(), "List of Benefits")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("healthinsurance").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "healthinsurance")
        self.assertEqual(inst.type.coding[0].display.value, FHIRString("Health Insurance").value)
        self.assertEqual(inst.type.coding[0].display.as_json(), "Health Insurance")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/contract-type").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/contract-type")

    def testContract4(self):
        inst = self.instantiate_from('pcd-example-notThem.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Contract instance')
        self.implContract4(inst)

        js = inst.as_json()
        self.assertEqual("Contract", js["resourceType"])
        inst2 = contract.Contract(js)
        self.implContract4(inst2)

    def implContract4(self, inst):
        self.assertEqual(inst.friendly[0].contentAttachment.title.value, FHIRString("The terms of the consent in friendly consumer speak.").value)
        self.assertEqual(inst.friendly[0].contentAttachment.title.as_json(), "The terms of the consent in friendly consumer speak.")
        self.assertEqual(inst.id.value, FHIRString("pcd-example-notThem").value)
        self.assertEqual(inst.id.as_json(), "pcd-example-notThem")
        self.assertEqual(inst.issued.value, FHIRDateTime("2015-11-18").value)
        self.assertEqual(inst.issued.as_json(), "2015-11-18")
        self.assertEqual(inst.legal[0].contentAttachment.title.value, FHIRString("The terms of the consent in lawyer speak.").value)
        self.assertEqual(inst.legal[0].contentAttachment.title.as_json(), "The terms of the consent in lawyer speak.")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.signer[0].signature[0].type[0].code.value, FHIRCode("1.2.840.10065.1.12.1.1").value)
        self.assertEqual(inst.signer[0].signature[0].type[0].code.as_json(), "1.2.840.10065.1.12.1.1")
        self.assertEqual(inst.signer[0].signature[0].type[0].system.value, FHIRUri("urn:iso-astm:E1762-95:2013").value)
        self.assertEqual(inst.signer[0].signature[0].type[0].system.as_json(), "urn:iso-astm:E1762-95:2013")
        self.assertEqual(inst.signer[0].signature[0].when.value, FHIRInstant("2013-06-08T10:57:34-07:00").value)
        self.assertEqual(inst.signer[0].signature[0].when.as_json(), "2013-06-08T10:57:34-07:00")
        self.assertEqual(inst.signer[0].signature[0].when.date, FHIRInstant('2013-06-08T10:57:34-07:00').date)
        self.assertEqual(inst.signer[0].type.code.value, FHIRCode("COVPTY").value)
        self.assertEqual(inst.signer[0].type.code.as_json(), "COVPTY")
        self.assertEqual(inst.signer[0].type.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/contractsignertypecodes").value)
        self.assertEqual(inst.signer[0].type.system.as_json(), "http://terminology.hl7.org/CodeSystem/contractsignertypecodes")
        self.assertEqual(inst.subType[0].coding[0].code.value, FHIRCode("Opt-In").value)
        self.assertEqual(inst.subType[0].coding[0].code.as_json(), "Opt-In")
        self.assertEqual(inst.subType[0].coding[0].display.value, FHIRString("Default Authorization with exceptions.").value)
        self.assertEqual(inst.subType[0].coding[0].display.as_json(), "Default Authorization with exceptions.")
        self.assertEqual(inst.subType[0].coding[0].system.value, FHIRUri("http://www.infoway-inforoute.ca.org/Consent-subtype-codes").value)
        self.assertEqual(inst.subType[0].coding[0].system.as_json(), "http://www.infoway-inforoute.ca.org/Consent-subtype-codes")
        self.assertEqual(inst.term[0].offer.text.value, FHIRString("Withhold this order and any results or related objects from specified nurse provider.").value)
        self.assertEqual(inst.term[0].offer.text.as_json(), "Withhold this order and any results or related objects from specified nurse provider.")
        self.assertEqual(inst.term[0].type.coding[0].code.value, FHIRCode("withhold-from").value)
        self.assertEqual(inst.term[0].type.coding[0].code.as_json(), "withhold-from")
        self.assertEqual(inst.term[0].type.coding[0].display.value, FHIRString("Withhold all data from specified actor entity.").value)
        self.assertEqual(inst.term[0].type.coding[0].display.as_json(), "Withhold all data from specified actor entity.")
        self.assertEqual(inst.term[0].type.coding[0].system.value, FHIRUri("http://example.org/fhir/consent-term-type-codes").value)
        self.assertEqual(inst.term[0].type.coding[0].system.as_json(), "http://example.org/fhir/consent-term-type-codes")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("57016-8").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "57016-8")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://loinc.org")

    def testContract5(self):
        inst = self.instantiate_from('pcd-example-notOrg.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Contract instance')
        self.implContract5(inst)

        js = inst.as_json()
        self.assertEqual("Contract", js["resourceType"])
        inst2 = contract.Contract(js)
        self.implContract5(inst2)

    def implContract5(self, inst):
        self.assertEqual(inst.friendly[0].contentAttachment.title.value, FHIRString("The terms of the consent in friendly consumer speak.").value)
        self.assertEqual(inst.friendly[0].contentAttachment.title.as_json(), "The terms of the consent in friendly consumer speak.")
        self.assertEqual(inst.id.value, FHIRString("pcd-example-notOrg").value)
        self.assertEqual(inst.id.as_json(), "pcd-example-notOrg")
        self.assertEqual(inst.issued.value, FHIRDateTime("2015-11-18").value)
        self.assertEqual(inst.issued.as_json(), "2015-11-18")
        self.assertEqual(inst.legal[0].contentAttachment.title.value, FHIRString("The terms of the consent in lawyer speak.").value)
        self.assertEqual(inst.legal[0].contentAttachment.title.as_json(), "The terms of the consent in lawyer speak.")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.subType[0].coding[0].code.value, FHIRCode("Opt-In").value)
        self.assertEqual(inst.subType[0].coding[0].code.as_json(), "Opt-In")
        self.assertEqual(inst.subType[0].coding[0].display.value, FHIRString("Default Authorization with exceptions.").value)
        self.assertEqual(inst.subType[0].coding[0].display.as_json(), "Default Authorization with exceptions.")
        self.assertEqual(inst.subType[0].coding[0].system.value, FHIRUri("http://www.infoway-inforoute.ca.org/Consent-subtype-codes").value)
        self.assertEqual(inst.subType[0].coding[0].system.as_json(), "http://www.infoway-inforoute.ca.org/Consent-subtype-codes")
        self.assertEqual(inst.term[0].offer.text.value, FHIRString("Withhold this order and any results or related objects from any provider.").value)
        self.assertEqual(inst.term[0].offer.text.as_json(), "Withhold this order and any results or related objects from any provider.")
        self.assertEqual(inst.term[0].type.coding[0].code.value, FHIRCode("withhold-from").value)
        self.assertEqual(inst.term[0].type.coding[0].code.as_json(), "withhold-from")
        self.assertEqual(inst.term[0].type.coding[0].display.value, FHIRString("Withhold all data from specified actor entity.").value)
        self.assertEqual(inst.term[0].type.coding[0].display.as_json(), "Withhold all data from specified actor entity.")
        self.assertEqual(inst.term[0].type.coding[0].system.value, FHIRUri("http://example.org/fhir/consent-term-type-codes").value)
        self.assertEqual(inst.term[0].type.coding[0].system.as_json(), "http://example.org/fhir/consent-term-type-codes")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("57016-8").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "57016-8")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://loinc.org")

    def testContract6(self):
        inst = self.instantiate_from('pcd-example-notAuthor.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Contract instance')
        self.implContract6(inst)

        js = inst.as_json()
        self.assertEqual("Contract", js["resourceType"])
        inst2 = contract.Contract(js)
        self.implContract6(inst2)

    def implContract6(self, inst):
        self.assertEqual(inst.friendly[0].contentAttachment.title.value, FHIRString("The terms of the consent in friendly consumer speak.").value)
        self.assertEqual(inst.friendly[0].contentAttachment.title.as_json(), "The terms of the consent in friendly consumer speak.")
        self.assertEqual(inst.id.value, FHIRString("pcd-example-notAuthor").value)
        self.assertEqual(inst.id.as_json(), "pcd-example-notAuthor")
        self.assertEqual(inst.issued.value, FHIRDateTime("2015-11-18").value)
        self.assertEqual(inst.issued.as_json(), "2015-11-18")
        self.assertEqual(inst.legal[0].contentAttachment.title.value, FHIRString("The terms of the consent in lawyer speak.").value)
        self.assertEqual(inst.legal[0].contentAttachment.title.as_json(), "The terms of the consent in lawyer speak.")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.subType[0].coding[0].code.value, FHIRCode("Opt-In").value)
        self.assertEqual(inst.subType[0].coding[0].code.as_json(), "Opt-In")
        self.assertEqual(inst.subType[0].coding[0].display.value, FHIRString("Default Authorization with exceptions.").value)
        self.assertEqual(inst.subType[0].coding[0].display.as_json(), "Default Authorization with exceptions.")
        self.assertEqual(inst.subType[0].coding[0].system.value, FHIRUri("http://www.infoway-inforoute.ca.org/Consent-subtype-codes").value)
        self.assertEqual(inst.subType[0].coding[0].system.as_json(), "http://www.infoway-inforoute.ca.org/Consent-subtype-codes")
        self.assertEqual(inst.term[0].offer.text.value, FHIRString("Withhold all data authored by Good Health provider.").value)
        self.assertEqual(inst.term[0].offer.text.as_json(), "Withhold all data authored by Good Health provider.")
        self.assertEqual(inst.term[0].type.coding[0].code.value, FHIRCode("withhold-authored-by").value)
        self.assertEqual(inst.term[0].type.coding[0].code.as_json(), "withhold-authored-by")
        self.assertEqual(inst.term[0].type.coding[0].display.value, FHIRString("Withhold all data authored by specified actor entity.").value)
        self.assertEqual(inst.term[0].type.coding[0].display.as_json(), "Withhold all data authored by specified actor entity.")
        self.assertEqual(inst.term[0].type.coding[0].system.value, FHIRUri("http://example.org/fhir/consent-term-type-codes").value)
        self.assertEqual(inst.term[0].type.coding[0].system.as_json(), "http://example.org/fhir/consent-term-type-codes")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("57016-8").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "57016-8")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://loinc.org")

    def testContract7(self):
        inst = self.instantiate_from('contract-example-42cfr-part2.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Contract instance')
        self.implContract7(inst)

        js = inst.as_json()
        self.assertEqual("Contract", js["resourceType"])
        inst2 = contract.Contract(js)
        self.implContract7(inst2)

    def implContract7(self, inst):
        self.assertEqual(inst.applies.start.value, FHIRDateTime("2013-11-01T21:18:27-04:00").value)
        self.assertEqual(inst.applies.start.as_json(), "2013-11-01T21:18:27-04:00")
        self.assertEqual(inst.contentDerivative.coding[0].code.value, FHIRCode("registration").value)
        self.assertEqual(inst.contentDerivative.coding[0].code.as_json(), "registration")
        self.assertEqual(inst.contentDerivative.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/contract-content-derivative").value)
        self.assertEqual(inst.contentDerivative.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/contract-content-derivative")
        self.assertEqual(inst.id.value, FHIRString("C-2121").value)
        self.assertEqual(inst.id.as_json(), "C-2121")
        self.assertEqual(inst.issued.value, FHIRDateTime("2013-11-01T21:18:27-04:00").value)
        self.assertEqual(inst.issued.as_json(), "2013-11-01T21:18:27-04:00")
        self.assertEqual(inst.legal[0].contentAttachment.contentType.value, FHIRCode("application/pdf").value)
        self.assertEqual(inst.legal[0].contentAttachment.contentType.as_json(), "application/pdf")
        self.assertEqual(inst.legal[0].contentAttachment.language.value, FHIRCode("en-US").value)
        self.assertEqual(inst.legal[0].contentAttachment.language.as_json(), "en-US")
        self.assertEqual(inst.legal[0].contentAttachment.title.value, FHIRString("MDHHS-5515 Consent To Share Your Health Information").value)
        self.assertEqual(inst.legal[0].contentAttachment.title.as_json(), "MDHHS-5515 Consent To Share Your Health Information")
        self.assertEqual(inst.legal[0].contentAttachment.url.value, FHIRUrl("http://org.mihin.ecms/ConsentDirective-2121").value)
        self.assertEqual(inst.legal[0].contentAttachment.url.as_json(), "http://org.mihin.ecms/ConsentDirective-2121")
        self.assertEqual(inst.meta.lastUpdated.value, FHIRInstant("2016-07-19T18:18:42.108-04:00").value)
        self.assertEqual(inst.meta.lastUpdated.as_json(), "2016-07-19T18:18:42.108-04:00")
        self.assertEqual(inst.meta.lastUpdated.date, FHIRInstant('2016-07-19T18:18:42.108-04:00').date)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.meta.versionId.value, FHIRId("1").value)
        self.assertEqual(inst.meta.versionId.as_json(), "1")
        self.assertEqual(inst.signer[0].signature[0].type[0].code.value, FHIRCode("1.2.840.10065.1.12.1.1").value)
        self.assertEqual(inst.signer[0].signature[0].type[0].code.as_json(), "1.2.840.10065.1.12.1.1")
        self.assertEqual(inst.signer[0].signature[0].type[0].system.value, FHIRUri("urn:iso-astm:E1762-95:2013").value)
        self.assertEqual(inst.signer[0].signature[0].type[0].system.as_json(), "urn:iso-astm:E1762-95:2013")
        self.assertEqual(inst.signer[0].signature[0].when.value, FHIRInstant("2017-02-08T10:57:34+01:00").value)
        self.assertEqual(inst.signer[0].signature[0].when.as_json(), "2017-02-08T10:57:34+01:00")
        self.assertEqual(inst.signer[0].signature[0].when.date, FHIRInstant('2017-02-08T10:57:34+01:00').date)
        self.assertEqual(inst.signer[0].type.code.value, FHIRCode("SELF").value)
        self.assertEqual(inst.signer[0].type.code.as_json(), "SELF")
        self.assertEqual(inst.signer[0].type.system.value, FHIRUri("http://mdhhs.org/fhir/consent-signer-type").value)
        self.assertEqual(inst.signer[0].type.system.as_json(), "http://mdhhs.org/fhir/consent-signer-type")
        self.assertEqual(inst.status.value, FHIRCode("executed").value)
        self.assertEqual(inst.status.as_json(), "executed")
        self.assertEqual(inst.subType[0].coding[0].code.value, FHIRCode("hcd").value)
        self.assertEqual(inst.subType[0].coding[0].code.as_json(), "hcd")
        self.assertEqual(inst.subType[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentcategorycodes").value)
        self.assertEqual(inst.subType[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentcategorycodes")
        self.assertEqual(inst.term[0].action[0].intent.coding[0].code.value, FHIRCode("HPRGRP").value)
        self.assertEqual(inst.term[0].action[0].intent.coding[0].code.as_json(), "HPRGRP")
        self.assertEqual(inst.term[0].action[0].intent.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.term[0].action[0].intent.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.term[0].action[0].status.text.value, FHIRString("Sample").value)
        self.assertEqual(inst.term[0].action[0].status.text.as_json(), "Sample")
        self.assertEqual(inst.term[0].action[0].subject[0].role.coding[0].code.value, FHIRCode("IR").value)
        self.assertEqual(inst.term[0].action[0].subject[0].role.coding[0].code.as_json(), "IR")
        self.assertEqual(inst.term[0].action[0].subject[0].role.coding[0].display.value, FHIRString("Recipient").value)
        self.assertEqual(inst.term[0].action[0].subject[0].role.coding[0].display.as_json(), "Recipient")
        self.assertEqual(inst.term[0].action[0].subject[0].role.coding[0].system.value, FHIRUri("http://mdhhs.org/fhir/consent-actor-type").value)
        self.assertEqual(inst.term[0].action[0].subject[0].role.coding[0].system.as_json(), "http://mdhhs.org/fhir/consent-actor-type")
        self.assertEqual(inst.term[0].action[0].subject[0].role.text.value, FHIRString("Recipient of restricted health information").value)
        self.assertEqual(inst.term[0].action[0].subject[0].role.text.as_json(), "Recipient of restricted health information")
        self.assertEqual(inst.term[0].action[0].subject[1].role.coding[0].code.value, FHIRCode("IS").value)
        self.assertEqual(inst.term[0].action[0].subject[1].role.coding[0].code.as_json(), "IS")
        self.assertEqual(inst.term[0].action[0].subject[1].role.coding[0].display.value, FHIRString("Sender").value)
        self.assertEqual(inst.term[0].action[0].subject[1].role.coding[0].display.as_json(), "Sender")
        self.assertEqual(inst.term[0].action[0].subject[1].role.coding[0].system.value, FHIRUri("http://mdhhs.org/fhir/consent-actor-type").value)
        self.assertEqual(inst.term[0].action[0].subject[1].role.coding[0].system.as_json(), "http://mdhhs.org/fhir/consent-actor-type")
        self.assertEqual(inst.term[0].action[0].subject[1].role.text.value, FHIRString("Sender of restricted health information").value)
        self.assertEqual(inst.term[0].action[0].subject[1].role.text.as_json(), "Sender of restricted health information")
        self.assertEqual(inst.term[0].action[0].type.coding[0].code.value, FHIRCode("action-a").value)
        self.assertEqual(inst.term[0].action[0].type.coding[0].code.as_json(), "action-a")
        self.assertEqual(inst.term[0].action[0].type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/contractaction").value)
        self.assertEqual(inst.term[0].action[0].type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/contractaction")
        self.assertEqual(inst.term[0].asset[0].period[0].end.value, FHIRDateTime("2019-11-01T21:18:27-04:00").value)
        self.assertEqual(inst.term[0].asset[0].period[0].end.as_json(), "2019-11-01T21:18:27-04:00")
        self.assertEqual(inst.term[0].asset[0].period[0].start.value, FHIRDateTime("2013-11-01T21:18:27-04:00").value)
        self.assertEqual(inst.term[0].asset[0].period[0].start.as_json(), "2013-11-01T21:18:27-04:00")
        self.assertEqual(inst.term[0].offer.decision.coding[0].code.value, FHIRCode("OPTIN").value)
        self.assertEqual(inst.term[0].offer.decision.coding[0].code.as_json(), "OPTIN")
        self.assertEqual(inst.term[0].offer.decision.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.term[0].offer.decision.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.term[0].offer.text.value, FHIRString("Can't refuse").value)
        self.assertEqual(inst.term[0].offer.text.as_json(), "Can't refuse")
        self.assertEqual(inst.term[0].offer.type.coding[0].code.value, FHIRCode("statutory").value)
        self.assertEqual(inst.term[0].offer.type.coding[0].code.as_json(), "statutory")
        self.assertEqual(inst.term[0].offer.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/contracttermtypecodes").value)
        self.assertEqual(inst.term[0].offer.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/contracttermtypecodes")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("OPTIN").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "OPTIN")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://mdhhs.org/fhir/consentdirective-type").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://mdhhs.org/fhir/consentdirective-type")
        self.assertEqual(inst.type.text.value, FHIRString("Opt-in consent directive").value)
        self.assertEqual(inst.type.text.as_json(), "Opt-in consent directive")

    def testContract8(self):
        inst = self.instantiate_from('pcd-example-notThis.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Contract instance')
        self.implContract8(inst)

        js = inst.as_json()
        self.assertEqual("Contract", js["resourceType"])
        inst2 = contract.Contract(js)
        self.implContract8(inst2)

    def implContract8(self, inst):
        self.assertEqual(inst.friendly[0].contentAttachment.title.value, FHIRString("The terms of the consent in friendly consumer speak.").value)
        self.assertEqual(inst.friendly[0].contentAttachment.title.as_json(), "The terms of the consent in friendly consumer speak.")
        self.assertEqual(inst.id.value, FHIRString("pcd-example-notThis").value)
        self.assertEqual(inst.id.as_json(), "pcd-example-notThis")
        self.assertEqual(inst.issued.value, FHIRDateTime("2015-11-18").value)
        self.assertEqual(inst.issued.as_json(), "2015-11-18")
        self.assertEqual(inst.legal[0].contentAttachment.title.value, FHIRString("The terms of the consent in lawyer speak.").value)
        self.assertEqual(inst.legal[0].contentAttachment.title.as_json(), "The terms of the consent in lawyer speak.")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.subType[0].coding[0].code.value, FHIRCode("Opt-In").value)
        self.assertEqual(inst.subType[0].coding[0].code.as_json(), "Opt-In")
        self.assertEqual(inst.subType[0].coding[0].display.value, FHIRString("Default Authorization with exceptions.").value)
        self.assertEqual(inst.subType[0].coding[0].display.as_json(), "Default Authorization with exceptions.")
        self.assertEqual(inst.subType[0].coding[0].system.value, FHIRUri("http://www.infoway-inforoute.ca.org/Consent-subtype-codes").value)
        self.assertEqual(inst.subType[0].coding[0].system.as_json(), "http://www.infoway-inforoute.ca.org/Consent-subtype-codes")
        self.assertEqual(inst.term[0].applies.start.value, FHIRDateTime("2015-11-18").value)
        self.assertEqual(inst.term[0].applies.start.as_json(), "2015-11-18")
        self.assertEqual(inst.term[0].identifier.system.value, FHIRUri("http://example.org/fhir/term-items").value)
        self.assertEqual(inst.term[0].identifier.system.as_json(), "http://example.org/fhir/term-items")
        self.assertEqual(inst.term[0].identifier.value.value, FHIRString("3347689").value)
        self.assertEqual(inst.term[0].identifier.value.as_json(), "3347689")
        self.assertEqual(inst.term[0].issued.value, FHIRDateTime("2015-11-01").value)
        self.assertEqual(inst.term[0].issued.as_json(), "2015-11-01")
        self.assertEqual(inst.term[0].offer.text.value, FHIRString("Withhold this order and any results or related objects from any provider.").value)
        self.assertEqual(inst.term[0].offer.text.as_json(), "Withhold this order and any results or related objects from any provider.")
        self.assertEqual(inst.term[0].type.coding[0].code.value, FHIRCode("withhold-identified-object-and-related").value)
        self.assertEqual(inst.term[0].type.coding[0].code.as_json(), "withhold-identified-object-and-related")
        self.assertEqual(inst.term[0].type.coding[0].display.value, FHIRString("Withhold the identified object and any other resources that are related to this object.").value)
        self.assertEqual(inst.term[0].type.coding[0].display.as_json(), "Withhold the identified object and any other resources that are related to this object.")
        self.assertEqual(inst.term[0].type.coding[0].system.value, FHIRUri("http://example.org/fhir/consent-term-type-codes").value)
        self.assertEqual(inst.term[0].type.coding[0].system.as_json(), "http://example.org/fhir/consent-term-type-codes")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("57016-8").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "57016-8")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://loinc.org")


from fhirclient.models.fhirdatatypes import FHIRString, FHIRUri, FHIRCode, FHIRUrl, FHIRDateTime, FHIRInstant, FHIRId