#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-25.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import structuredefinition

class StructureDefinitionTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("StructureDefinition", js["resourceType"])
        return structuredefinition.StructureDefinition(js)

    def testStructureDefinition1(self):
        inst = self.instantiate_from('structuredefinition-example-composition.json')
        self.assertIsNotNone(inst, 'Must have instantiated a StructureDefinition instance')
        self.implStructureDefinition1(inst)

        js = inst.as_json()
        self.assertEqual("StructureDefinition", js["resourceType"])
        inst2 = structuredefinition.StructureDefinition(js)
        self.implStructureDefinition1(inst2)

    def implStructureDefinition1(self, inst):
        self.assertFalse(inst.abstract)
        self.assertEqual(inst.baseDefinition.value, FHIRCanonical('http://hl7.org/fhir/StructureDefinition/Composition').value)
        self.assertEqual(inst.baseDefinition.as_json(), 'http://hl7.org/fhir/StructureDefinition/Composition')
        self.assertEqual(inst.date.value, FHIRDateTime('2018-11-05T17:47:00+11:00').value)
        self.assertEqual(inst.date.as_json(), '2018-11-05T17:47:00+11:00')
        self.assertEqual(inst.derivation.value, FHIRCode('constraint').value)
        self.assertEqual(inst.derivation.as_json(), 'constraint')
        self.assertEqual(inst.differential.element[0].path.value, FHIRString('Composition').value)
        self.assertEqual(inst.differential.element[0].path.as_json(), 'Composition')
        self.assertEqual(inst.differential.element[1].path.value, FHIRString('Composition.section').value)
        self.assertEqual(inst.differential.element[1].path.as_json(), 'Composition.section')
        self.assertEqual(inst.differential.element[1].slicing.description.value, FHIRString('Slice by .section.code').value)
        self.assertEqual(inst.differential.element[1].slicing.description.as_json(), 'Slice by .section.code')
        self.assertEqual(inst.differential.element[1].slicing.discriminator[0].path.value, FHIRString('code').value)
        self.assertEqual(inst.differential.element[1].slicing.discriminator[0].path.as_json(), 'code')
        self.assertEqual(inst.differential.element[1].slicing.discriminator[0].type.value, FHIRCode('pattern').value)
        self.assertEqual(inst.differential.element[1].slicing.discriminator[0].type.as_json(), 'pattern')
        self.assertTrue(inst.differential.element[1].slicing.ordered)
        self.assertEqual(inst.differential.element[1].slicing.rules.value, FHIRCode('closed').value)
        self.assertEqual(inst.differential.element[1].slicing.rules.as_json(), 'closed')
        self.assertEqual(inst.differential.element[2].min.value, FHIRUnsignedInt('1').value)
        self.assertEqual(inst.differential.element[2].min.as_json(), 1)
        self.assertEqual(inst.differential.element[2].path.value, FHIRString('Composition.section').value)
        self.assertEqual(inst.differential.element[2].path.as_json(), 'Composition.section')
        self.assertEqual(inst.differential.element[2].sliceName.value, FHIRString('procedure').value)
        self.assertEqual(inst.differential.element[2].sliceName.as_json(), 'procedure')
        self.assertEqual(inst.differential.element[2].type[0].code.value, FHIRUri('BackboneElement').value)
        self.assertEqual(inst.differential.element[2].type[0].code.as_json(), 'BackboneElement')
        self.assertEqual(inst.differential.element[2].type[0].profile[0].value, FHIRCanonical('http://hl7.org/fhir/StructureDefinition/document-section-library').value)
        self.assertEqual(inst.differential.element[2].type[0].profile[0].as_json(), 'http://hl7.org/fhir/StructureDefinition/document-section-library')
        self.assertEqual(inst.differential.element[3].min.value, FHIRUnsignedInt('1').value)
        self.assertEqual(inst.differential.element[3].min.as_json(), 1)
        self.assertEqual(inst.differential.element[3].path.value, FHIRString('Composition.section').value)
        self.assertEqual(inst.differential.element[3].path.as_json(), 'Composition.section')
        self.assertEqual(inst.differential.element[3].sliceName.value, FHIRString('medications').value)
        self.assertEqual(inst.differential.element[3].sliceName.as_json(), 'medications')
        self.assertEqual(inst.differential.element[3].type[0].code.value, FHIRUri('BackboneElement').value)
        self.assertEqual(inst.differential.element[3].type[0].code.as_json(), 'BackboneElement')
        self.assertEqual(inst.differential.element[3].type[0].profile[0].value, FHIRCanonical('http://hl7.org/fhir/StructureDefinition/document-section-library').value)
        self.assertEqual(inst.differential.element[3].type[0].profile[0].as_json(), 'http://hl7.org/fhir/StructureDefinition/document-section-library')
        self.assertEqual(inst.differential.element[4].min.value, FHIRUnsignedInt('0').value)
        self.assertEqual(inst.differential.element[4].min.as_json(), 0)
        self.assertEqual(inst.differential.element[4].path.value, FHIRString('Composition.section').value)
        self.assertEqual(inst.differential.element[4].path.as_json(), 'Composition.section')
        self.assertEqual(inst.differential.element[4].sliceName.value, FHIRString('plan').value)
        self.assertEqual(inst.differential.element[4].sliceName.as_json(), 'plan')
        self.assertEqual(inst.differential.element[4].type[0].code.value, FHIRUri('BackboneElement').value)
        self.assertEqual(inst.differential.element[4].type[0].code.as_json(), 'BackboneElement')
        self.assertEqual(inst.differential.element[4].type[0].profile[0].value, FHIRCanonical('http://hl7.org/fhir/StructureDefinition/document-section-library').value)
        self.assertEqual(inst.differential.element[4].type[0].profile[0].as_json(), 'http://hl7.org/fhir/StructureDefinition/document-section-library')
        self.assertFalse(inst.experimental)
        self.assertEqual(inst.kind.value, FHIRCode('complex-type').value)
        self.assertEqual(inst.kind.as_json(), 'complex-type')
        self.assertEqual(inst.name.value, FHIRString('DocumentStructure').value)
        self.assertEqual(inst.name.as_json(), 'DocumentStructure')
        self.assertEqual(inst.status.value, FHIRCode('active').value)
        self.assertEqual(inst.status.as_json(), 'active')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.title.value, FHIRString('Document Structure (For testing section templates)').value)
        self.assertEqual(inst.title.as_json(), 'Document Structure (For testing section templates)')
        self.assertEqual(inst.type.value, FHIRUri('Composition').value)
        self.assertEqual(inst.type.as_json(), 'Composition')
        self.assertEqual(inst.url.value, FHIRUri('http://hl7.org/fhir/StructureDefinition/example-composition').value)
        self.assertEqual(inst.url.as_json(), 'http://hl7.org/fhir/StructureDefinition/example-composition')

    def testStructureDefinition2(self):
        inst = self.instantiate_from('structuredefinition-example-section-library.json')
        self.assertIsNotNone(inst, 'Must have instantiated a StructureDefinition instance')
        self.implStructureDefinition2(inst)

        js = inst.as_json()
        self.assertEqual("StructureDefinition", js["resourceType"])
        inst2 = structuredefinition.StructureDefinition(js)
        self.implStructureDefinition2(inst2)

    def implStructureDefinition2(self, inst):
        self.assertTrue(inst.abstract)
        self.assertEqual(inst.baseDefinition.value, FHIRCanonical('http://hl7.org/fhir/StructureDefinition/Composition').value)
        self.assertEqual(inst.baseDefinition.as_json(), 'http://hl7.org/fhir/StructureDefinition/Composition')
        self.assertEqual(inst.date.value, FHIRDateTime('2018-11-05T17:57:00+11:00').value)
        self.assertEqual(inst.date.as_json(), '2018-11-05T17:57:00+11:00')
        self.assertEqual(inst.derivation.value, FHIRCode('constraint').value)
        self.assertEqual(inst.derivation.as_json(), 'constraint')
        self.assertEqual(inst.differential.element[0].path.value, FHIRString('Composition').value)
        self.assertEqual(inst.differential.element[0].path.as_json(), 'Composition')
        self.assertEqual(inst.differential.element[1].path.value, FHIRString('Composition.section').value)
        self.assertEqual(inst.differential.element[1].path.as_json(), 'Composition.section')
        self.assertEqual(inst.differential.element[1].slicing.description.value, FHIRString('Slice by .section.code when using this library of sections').value)
        self.assertEqual(inst.differential.element[1].slicing.description.as_json(), 'Slice by .section.code when using this library of sections')
        self.assertEqual(inst.differential.element[1].slicing.discriminator[0].path.value, FHIRString('code').value)
        self.assertEqual(inst.differential.element[1].slicing.discriminator[0].path.as_json(), 'code')
        self.assertEqual(inst.differential.element[1].slicing.discriminator[0].type.value, FHIRCode('pattern').value)
        self.assertEqual(inst.differential.element[1].slicing.discriminator[0].type.as_json(), 'pattern')
        self.assertTrue(inst.differential.element[1].slicing.ordered)
        self.assertEqual(inst.differential.element[1].slicing.rules.value, FHIRCode('closed').value)
        self.assertEqual(inst.differential.element[1].slicing.rules.as_json(), 'closed')
        self.assertEqual(inst.differential.element[2].path.value, FHIRString('Composition.section').value)
        self.assertEqual(inst.differential.element[2].path.as_json(), 'Composition.section')
        self.assertEqual(inst.differential.element[2].sliceName.value, FHIRString('procedure').value)
        self.assertEqual(inst.differential.element[2].sliceName.as_json(), 'procedure')
        self.assertEqual(inst.differential.element[3].fixedString.value, FHIRString('Procedures Performed').value)
        self.assertEqual(inst.differential.element[3].fixedString.as_json(), 'Procedures Performed')
        self.assertEqual(inst.differential.element[3].min.value, FHIRUnsignedInt('1').value)
        self.assertEqual(inst.differential.element[3].min.as_json(), 1)
        self.assertEqual(inst.differential.element[3].path.value, FHIRString('Composition.section.title').value)
        self.assertEqual(inst.differential.element[3].path.as_json(), 'Composition.section.title')
        self.assertEqual(inst.differential.element[4].min.value, FHIRUnsignedInt('1').value)
        self.assertEqual(inst.differential.element[4].min.as_json(), 1)
        self.assertEqual(inst.differential.element[4].path.value, FHIRString('Composition.section.code').value)
        self.assertEqual(inst.differential.element[4].path.as_json(), 'Composition.section.code')
        self.assertEqual(inst.differential.element[4].patternCodeableConcept.coding[0].code.value, FHIRCode('29554-3').value)
        self.assertEqual(inst.differential.element[4].patternCodeableConcept.coding[0].code.as_json(), '29554-3')
        self.assertEqual(inst.differential.element[4].patternCodeableConcept.coding[0].display.value, FHIRString('Procedure Narrative').value)
        self.assertEqual(inst.differential.element[4].patternCodeableConcept.coding[0].display.as_json(), 'Procedure Narrative')
        self.assertEqual(inst.differential.element[4].patternCodeableConcept.coding[0].system.value, FHIRUri('http://loinc.org').value)
        self.assertEqual(inst.differential.element[4].patternCodeableConcept.coding[0].system.as_json(), 'http://loinc.org')
        self.assertEqual(inst.differential.element[5].path.value, FHIRString('Composition.section').value)
        self.assertEqual(inst.differential.element[5].path.as_json(), 'Composition.section')
        self.assertEqual(inst.differential.element[5].sliceName.value, FHIRString('medications').value)
        self.assertEqual(inst.differential.element[5].sliceName.as_json(), 'medications')
        self.assertEqual(inst.differential.element[6].fixedString.value, FHIRString('Medications Administered').value)
        self.assertEqual(inst.differential.element[6].fixedString.as_json(), 'Medications Administered')
        self.assertEqual(inst.differential.element[6].min.value, FHIRUnsignedInt('1').value)
        self.assertEqual(inst.differential.element[6].min.as_json(), 1)
        self.assertEqual(inst.differential.element[6].path.value, FHIRString('Composition.section.title').value)
        self.assertEqual(inst.differential.element[6].path.as_json(), 'Composition.section.title')
        self.assertEqual(inst.differential.element[7].min.value, FHIRUnsignedInt('1').value)
        self.assertEqual(inst.differential.element[7].min.as_json(), 1)
        self.assertEqual(inst.differential.element[7].path.value, FHIRString('Composition.section.code').value)
        self.assertEqual(inst.differential.element[7].path.as_json(), 'Composition.section.code')
        self.assertEqual(inst.differential.element[7].patternCodeableConcept.coding[0].code.value, FHIRCode('29549-3').value)
        self.assertEqual(inst.differential.element[7].patternCodeableConcept.coding[0].code.as_json(), '29549-3')
        self.assertEqual(inst.differential.element[7].patternCodeableConcept.coding[0].display.value, FHIRString('Medication administered Narrative').value)
        self.assertEqual(inst.differential.element[7].patternCodeableConcept.coding[0].display.as_json(), 'Medication administered Narrative')
        self.assertEqual(inst.differential.element[7].patternCodeableConcept.coding[0].system.value, FHIRUri('http://loinc.org').value)
        self.assertEqual(inst.differential.element[7].patternCodeableConcept.coding[0].system.as_json(), 'http://loinc.org')
        self.assertEqual(inst.differential.element[8].path.value, FHIRString('Composition.section').value)
        self.assertEqual(inst.differential.element[8].path.as_json(), 'Composition.section')
        self.assertEqual(inst.differential.element[8].sliceName.value, FHIRString('plan').value)
        self.assertEqual(inst.differential.element[8].sliceName.as_json(), 'plan')
        self.assertEqual(inst.differential.element[9].fixedString.value, FHIRString('Discharge Treatment Plan').value)
        self.assertEqual(inst.differential.element[9].fixedString.as_json(), 'Discharge Treatment Plan')
        self.assertEqual(inst.differential.element[9].min.value, FHIRUnsignedInt('1').value)
        self.assertEqual(inst.differential.element[9].min.as_json(), 1)
        self.assertEqual(inst.differential.element[9].path.value, FHIRString('Composition.section.title').value)
        self.assertEqual(inst.differential.element[9].path.as_json(), 'Composition.section.title')
        self.assertFalse(inst.experimental)
        self.assertEqual(inst.kind.value, FHIRCode('complex-type').value)
        self.assertEqual(inst.kind.as_json(), 'complex-type')
        self.assertEqual(inst.name.value, FHIRString('DocumentSectionLibrary').value)
        self.assertEqual(inst.name.as_json(), 'DocumentSectionLibrary')
        self.assertEqual(inst.status.value, FHIRCode('active').value)
        self.assertEqual(inst.status.as_json(), 'active')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.title.value, FHIRString('Document Section Library (For testing section templates)').value)
        self.assertEqual(inst.title.as_json(), 'Document Section Library (For testing section templates)')
        self.assertEqual(inst.type.value, FHIRUri('Composition').value)
        self.assertEqual(inst.type.as_json(), 'Composition')
        self.assertEqual(inst.url.value, FHIRUri('http://hl7.org/fhir/StructureDefinition/example-section-library').value)
        self.assertEqual(inst.url.as_json(), 'http://hl7.org/fhir/StructureDefinition/example-section-library')


from fhirclient.models.fhirdatatypes import FHIRCanonical, FHIRDateTime, FHIRCode, FHIRString, FHIRUnsignedInt, FHIRUri