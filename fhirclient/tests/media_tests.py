#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import media

class MediaTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Media", js["resourceType"])
        return media.Media(js)

    def testMedia1(self):
        inst = self.instantiate_from('media-example-sound.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Media instance')
        self.implMedia1(inst)

        js = inst.as_json()
        self.assertEqual("Media", js["resourceType"])
        inst2 = media.Media(js)
        self.implMedia1(inst2)

    def implMedia1(self, inst):
        self.assertEqual(inst.content.contentType.value, FHIRCode("audio/mpeg").value)
        self.assertEqual(inst.content.contentType.as_json(), "audio/mpeg")
        self.assertEqual(inst.content.data.value, FHIRBase64Binary("dG9vIGJpZyB0b28gaW5jbHVkZSB0aGUgd2hvbGU=").value)
        self.assertEqual(inst.content.data.as_json(), "dG9vIGJpZyB0b28gaW5jbHVkZSB0aGUgd2hvbGU=")
        self.assertEqual(inst.content.id.value, FHIRString("a1").value)
        self.assertEqual(inst.content.id.as_json(), "a1")
        self.assertEqual(inst.duration, 65)
        self.assertEqual(inst.id.value, FHIRString("sound").value)
        self.assertEqual(inst.id.as_json(), "sound")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Sound recording of speech example for Patient Henry Levin (MRN 12345):<br/><img src=\"#11\" alt=\"diagram\"/></div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Sound recording of speech example for Patient Henry Levin (MRN 12345):<br/><img src=\"#11\" alt=\"diagram\"/></div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testMedia2(self):
        inst = self.instantiate_from('media-example-xray.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Media instance')
        self.implMedia2(inst)

        js = inst.as_json()
        self.assertEqual("Media", js["resourceType"])
        inst2 = media.Media(js)
        self.implMedia2(inst2)

    def implMedia2(self, inst):
        self.assertEqual(inst.bodySite.coding[0].code.value, FHIRCode("85151006").value)
        self.assertEqual(inst.bodySite.coding[0].code.as_json(), "85151006")
        self.assertEqual(inst.bodySite.coding[0].display.value, FHIRString("Structure of left hand (body structure)").value)
        self.assertEqual(inst.bodySite.coding[0].display.as_json(), "Structure of left hand (body structure)")
        self.assertEqual(inst.bodySite.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.bodySite.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.content.contentType.value, FHIRCode("image/jpeg").value)
        self.assertEqual(inst.content.contentType.as_json(), "image/jpeg")
        self.assertEqual(inst.content.creation.value, FHIRDateTime("2016-03-15").value)
        self.assertEqual(inst.content.creation.as_json(), "2016-03-15")
        self.assertEqual(inst.content.id.value, FHIRString("a1").value)
        self.assertEqual(inst.content.id.as_json(), "a1")
        self.assertEqual(inst.content.url.value, FHIRUrl("http://someimagingcenter.org/fhir/Binary/A12345").value)
        self.assertEqual(inst.content.url.as_json(), "http://someimagingcenter.org/fhir/Binary/A12345")
        self.assertEqual(inst.createdDateTime.value, FHIRDateTime("2016-03-15").value)
        self.assertEqual(inst.createdDateTime.as_json(), "2016-03-15")
        self.assertEqual(inst.height.value, FHIRPositiveInt('432').value)
        self.assertEqual(inst.height.as_json(), 432)
        self.assertEqual(inst.id.value, FHIRString("xray").value)
        self.assertEqual(inst.id.as_json(), "xray")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.modality.coding[0].code.value, FHIRCode("39714003").value)
        self.assertEqual(inst.modality.coding[0].code.as_json(), "39714003")
        self.assertEqual(inst.modality.coding[0].display.value, FHIRString("Skeletal X-ray of wrist and hand").value)
        self.assertEqual(inst.modality.coding[0].display.as_json(), "Skeletal X-ray of wrist and hand")
        self.assertEqual(inst.modality.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.modality.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Xray of left hand for Patient Henry Levin (MRN 12345) 2016-03-15</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Xray of left hand for Patient Henry Levin (MRN 12345) 2016-03-15</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.width.value, FHIRPositiveInt('640').value)
        self.assertEqual(inst.width.as_json(), 640)

    def testMedia3(self):
        inst = self.instantiate_from('media-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Media instance')
        self.implMedia3(inst)

        js = inst.as_json()
        self.assertEqual("Media", js["resourceType"])
        inst2 = media.Media(js)
        self.implMedia3(inst2)

    def implMedia3(self, inst):
        self.assertEqual(inst.content.contentType.value, FHIRCode("image/gif").value)
        self.assertEqual(inst.content.contentType.as_json(), "image/gif")
        self.assertEqual(inst.content.creation.value, FHIRDateTime("2009-09-03").value)
        self.assertEqual(inst.content.creation.as_json(), "2009-09-03")
        self.assertEqual(inst.content.id.value, FHIRString("a1").value)
        self.assertEqual(inst.content.id.as_json(), "a1")
        self.assertEqual(inst.createdDateTime.value, FHIRDateTime("2017-12-17").value)
        self.assertEqual(inst.createdDateTime.as_json(), "2017-12-17")
        self.assertEqual(inst.frames.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.frames.as_json(), 1)
        self.assertEqual(inst.height.value, FHIRPositiveInt('145').value)
        self.assertEqual(inst.height.as_json(), 145)
        self.assertEqual(inst.id.value, FHIRString("example").value)
        self.assertEqual(inst.id.as_json(), "example")
        self.assertEqual(inst.issued.value, FHIRInstant("2017-12-17T14:56:18Z").value)
        self.assertEqual(inst.issued.as_json(), "2017-12-17T14:56:18Z")
        self.assertEqual(inst.issued.date, FHIRInstant('2017-12-17T14:56:18Z').date)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.modality.coding[0].code.value, FHIRCode("diagram").value)
        self.assertEqual(inst.modality.coding[0].code.as_json(), "diagram")
        self.assertEqual(inst.modality.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/media-modality").value)
        self.assertEqual(inst.modality.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/media-modality")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("image").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "image")
        self.assertEqual(inst.type.coding[0].display.value, FHIRString("Image").value)
        self.assertEqual(inst.type.coding[0].display.as_json(), "Image")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/media-type").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/media-type")
        self.assertEqual(inst.width.value, FHIRPositiveInt('126').value)
        self.assertEqual(inst.width.as_json(), 126)

    def testMedia4(self):
        inst = self.instantiate_from('media-example-dicom.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Media instance')
        self.implMedia4(inst)

        js = inst.as_json()
        self.assertEqual("Media", js["resourceType"])
        inst2 = media.Media(js)
        self.implMedia4(inst2)

    def implMedia4(self, inst):
        self.assertEqual(inst.content.contentType.value, FHIRCode("application/dicom").value)
        self.assertEqual(inst.content.contentType.as_json(), "application/dicom")
        self.assertEqual(inst.extension[0].url.value, FHIRUri("http://nema.org/fhir/extensions#0002-0010").value)
        self.assertEqual(inst.extension[0].url.as_json(), "http://nema.org/fhir/extensions#0002-0010")
        self.assertEqual(inst.extension[0].valueUri.value, FHIRUri("urn:oid:1.2.840.10008.1.2.1").value)
        self.assertEqual(inst.extension[0].valueUri.as_json(), "urn:oid:1.2.840.10008.1.2.1")
        self.assertEqual(inst.height.value, FHIRPositiveInt('480').value)
        self.assertEqual(inst.height.as_json(), 480)
        self.assertEqual(inst.id.value, FHIRString("1.2.840.11361907579238403408700.3.1.04.19970327150033").value)
        self.assertEqual(inst.id.as_json(), "1.2.840.11361907579238403408700.3.1.04.19970327150033")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:dicom:uid").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:dicom:uid")
        self.assertEqual(inst.identifier[0].type.text.value, FHIRString("InstanceUID").value)
        self.assertEqual(inst.identifier[0].type.text.as_json(), "InstanceUID")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("urn:oid:1.2.840.11361907579238403408700.3.1.04.19970327150033").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "urn:oid:1.2.840.11361907579238403408700.3.1.04.19970327150033")
        self.assertEqual(inst.identifier[1].system.value, FHIRUri("http://acme-imaging.com/accession/2012").value)
        self.assertEqual(inst.identifier[1].system.as_json(), "http://acme-imaging.com/accession/2012")
        self.assertEqual(inst.identifier[1].type.text.value, FHIRString("accessionNo").value)
        self.assertEqual(inst.identifier[1].type.text.as_json(), "accessionNo")
        self.assertEqual(inst.identifier[1].value.value, FHIRString("1234567").value)
        self.assertEqual(inst.identifier[1].value.as_json(), "1234567")
        self.assertEqual(inst.identifier[2].system.value, FHIRUri("urn:dicom:uid").value)
        self.assertEqual(inst.identifier[2].system.as_json(), "urn:dicom:uid")
        self.assertEqual(inst.identifier[2].type.text.value, FHIRString("studyId").value)
        self.assertEqual(inst.identifier[2].type.text.as_json(), "studyId")
        self.assertEqual(inst.identifier[2].value.value, FHIRString("urn:oid:1.2.840.113619.2.21.848.34082.0.538976288.3").value)
        self.assertEqual(inst.identifier[2].value.as_json(), "urn:oid:1.2.840.113619.2.21.848.34082.0.538976288.3")
        self.assertEqual(inst.identifier[3].system.value, FHIRUri("urn:dicom:uid").value)
        self.assertEqual(inst.identifier[3].system.as_json(), "urn:dicom:uid")
        self.assertEqual(inst.identifier[3].type.text.value, FHIRString("seriesId").value)
        self.assertEqual(inst.identifier[3].type.text.as_json(), "seriesId")
        self.assertEqual(inst.identifier[3].value.value, FHIRString("urn:oid:1.2.840.113619.2.21.3408.700.0.757923840.3.0").value)
        self.assertEqual(inst.identifier[3].value.as_json(), "urn:oid:1.2.840.113619.2.21.3408.700.0.757923840.3.0")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.modality.coding[0].code.value, FHIRCode("US").value)
        self.assertEqual(inst.modality.coding[0].code.as_json(), "US")
        self.assertEqual(inst.modality.coding[0].system.value, FHIRUri("http://dicom.nema.org/resources/ontology/DCM").value)
        self.assertEqual(inst.modality.coding[0].system.as_json(), "http://dicom.nema.org/resources/ontology/DCM")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.view.coding[0].code.value, FHIRCode("399067008").value)
        self.assertEqual(inst.view.coding[0].code.as_json(), "399067008")
        self.assertEqual(inst.view.coding[0].display.value, FHIRString("Lateral projection").value)
        self.assertEqual(inst.view.coding[0].display.as_json(), "Lateral projection")
        self.assertEqual(inst.view.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.view.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.width.value, FHIRPositiveInt('640').value)
        self.assertEqual(inst.width.as_json(), 640)


from fhirclient.models.fhirdatatypes import FHIRCode, FHIRBase64Binary, FHIRString, FHIRUri, FHIRDateTime, FHIRUrl, FHIRPositiveInt, FHIRInstant