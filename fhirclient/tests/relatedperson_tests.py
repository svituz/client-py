#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import relatedperson

class RelatedPersonTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("RelatedPerson", js["resourceType"])
        return relatedperson.RelatedPerson(js)

    def testRelatedPerson1(self):
        inst = self.instantiate_from('relatedperson-example-newborn-mom.json')
        self.assertIsNotNone(inst, 'Must have instantiated a RelatedPerson instance')
        self.implRelatedPerson1(inst)

        js = inst.as_json()
        self.assertEqual("RelatedPerson", js["resourceType"])
        inst2 = relatedperson.RelatedPerson(js)
        self.implRelatedPerson1(inst2)

    def implRelatedPerson1(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].line[0].value, FHIRString("2222 Home Street").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "2222 Home Street")
        self.assertEqual(inst.address[0].use.value, FHIRCode("home").value)
        self.assertEqual(inst.address[0].use.as_json(), "home")
        self.assertEqual(inst.birthDate.value, FHIRDate("1973-05-31").value)
        self.assertEqual(inst.birthDate.as_json(), "1973-05-31")
        self.assertEqual(inst.birthDate.date, FHIRDate('1973-05-31').date)
        self.assertEqual(inst.gender.value, FHIRCode("female").value)
        self.assertEqual(inst.gender.as_json(), "female")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://hl7.org/fhir/sid/us-ssn").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://hl7.org/fhir/sid/us-ssn")
        self.assertEqual(inst.identifier[0].type.coding[0].code.value, FHIRCode("SS").value)
        self.assertEqual(inst.identifier[0].type.coding[0].code.as_json(), "SS")
        self.assertEqual(inst.identifier[0].type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0203").value)
        self.assertEqual(inst.identifier[0].type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0203")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("444222222").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "444222222")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Everywoman").value)
        self.assertEqual(inst.name[0].family.as_json(), "Everywoman")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Eve").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Eve")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.relationship[0].coding[0].code.value, FHIRCode("NMTH").value)
        self.assertEqual(inst.relationship[0].coding[0].code.as_json(), "NMTH")
        self.assertEqual(inst.relationship[0].coding[0].display.value, FHIRString("natural mother").value)
        self.assertEqual(inst.relationship[0].coding[0].display.as_json(), "natural mother")
        self.assertEqual(inst.relationship[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-RoleCode").value)
        self.assertEqual(inst.relationship[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-RoleCode")
        self.assertEqual(inst.relationship[0].text.value, FHIRString("Natural Mother").value)
        self.assertEqual(inst.relationship[0].text.as_json(), "Natural Mother")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "work")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("555-555-2003").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "555-555-2003")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testRelatedPerson2(self):
        inst = self.instantiate_from('relatedperson-example-f001-sarah.json')
        self.assertIsNotNone(inst, 'Must have instantiated a RelatedPerson instance')
        self.implRelatedPerson2(inst)

        js = inst.as_json()
        self.assertEqual("RelatedPerson", js["resourceType"])
        inst2 = relatedperson.RelatedPerson(js)
        self.implRelatedPerson2(inst2)

    def implRelatedPerson2(self, inst):
        self.assertEqual(inst.gender.value, FHIRCode("female").value)
        self.assertEqual(inst.gender.as_json(), "female")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:2.16.840.1.113883.2.4.6.3").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:2.16.840.1.113883.2.4.6.3")
        self.assertEqual(inst.identifier[0].type.text.value, FHIRString("BSN").value)
        self.assertEqual(inst.identifier[0].type.text.as_json(), "BSN")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Abels").value)
        self.assertEqual(inst.name[0].family.as_json(), "Abels")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Sarah").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Sarah")
        self.assertEqual(inst.name[0].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.name[0].use.as_json(), "usual")
        self.assertEqual(inst.relationship[0].coding[0].code.value, FHIRCode("SIGOTHR").value)
        self.assertEqual(inst.relationship[0].coding[0].code.as_json(), "SIGOTHR")
        self.assertEqual(inst.relationship[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-RoleCode").value)
        self.assertEqual(inst.relationship[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-RoleCode")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("mobile").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "mobile")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("0690383372").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "0690383372")
        self.assertEqual(inst.telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.telecom[1].system.as_json(), "email")
        self.assertEqual(inst.telecom[1].use.value, FHIRCode("home").value)
        self.assertEqual(inst.telecom[1].use.as_json(), "home")
        self.assertEqual(inst.telecom[1].value.value, FHIRString("s.abels@kpn.nl").value)
        self.assertEqual(inst.telecom[1].value.as_json(), "s.abels@kpn.nl")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testRelatedPerson3(self):
        inst = self.instantiate_from('relatedperson-example-peter.json')
        self.assertIsNotNone(inst, 'Must have instantiated a RelatedPerson instance')
        self.implRelatedPerson3(inst)

        js = inst.as_json()
        self.assertEqual("RelatedPerson", js["resourceType"])
        inst2 = relatedperson.RelatedPerson(js)
        self.implRelatedPerson3(inst2)

    def implRelatedPerson3(self, inst):
        self.assertEqual(inst.address[0].city.value, FHIRString("PleasantVille").value)
        self.assertEqual(inst.address[0].city.as_json(), "PleasantVille")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("534 Erewhon St").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "534 Erewhon St")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("3999").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "3999")
        self.assertEqual(inst.address[0].state.value, FHIRString("Vic").value)
        self.assertEqual(inst.address[0].state.as_json(), "Vic")
        self.assertEqual(inst.address[0].use.value, FHIRCode("home").value)
        self.assertEqual(inst.address[0].use.as_json(), "home")
        self.assertEqual(inst.gender.value, FHIRCode("male").value)
        self.assertEqual(inst.gender.as_json(), "male")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("Chalmers").value)
        self.assertEqual(inst.name[0].family.as_json(), "Chalmers")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Peter").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Peter")
        self.assertEqual(inst.name[0].given[1].value, FHIRString("James").value)
        self.assertEqual(inst.name[0].given[1].as_json(), "James")
        self.assertEqual(inst.name[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.name[0].use.as_json(), "official")
        self.assertEqual(inst.period.start.value, FHIRDateTime("2012-03-11").value)
        self.assertEqual(inst.period.start.as_json(), "2012-03-11")
        self.assertEqual(inst.photo[0].contentType.value, FHIRCode("image/jpeg").value)
        self.assertEqual(inst.photo[0].contentType.as_json(), "image/jpeg")
        self.assertEqual(inst.photo[0].url.value, FHIRUrl("Binary/f012").value)
        self.assertEqual(inst.photo[0].url.as_json(), "Binary/f012")
        self.assertEqual(inst.relationship[0].coding[0].code.value, FHIRCode("C").value)
        self.assertEqual(inst.relationship[0].coding[0].code.as_json(), "C")
        self.assertEqual(inst.relationship[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0131").value)
        self.assertEqual(inst.relationship[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0131")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("work").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "work")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("(03) 5555 6473").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "(03) 5555 6473")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testRelatedPerson4(self):
        inst = self.instantiate_from('relatedperson-example-f002-ariadne.json')
        self.assertIsNotNone(inst, 'Must have instantiated a RelatedPerson instance')
        self.implRelatedPerson4(inst)

        js = inst.as_json()
        self.assertEqual("RelatedPerson", js["resourceType"])
        inst2 = relatedperson.RelatedPerson(js)
        self.implRelatedPerson4(inst2)

    def implRelatedPerson4(self, inst):
        self.assertEqual(inst.birthDate.value, FHIRDate("1963").value)
        self.assertEqual(inst.birthDate.as_json(), "1963")
        self.assertEqual(inst.birthDate.date, FHIRDate('1963').date)
        self.assertEqual(inst.gender.value, FHIRCode("female").value)
        self.assertEqual(inst.gender.as_json(), "female")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].text.value, FHIRString("Ariadne Bor-Jansma").value)
        self.assertEqual(inst.name[0].text.as_json(), "Ariadne Bor-Jansma")
        self.assertEqual(inst.name[0].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.name[0].use.as_json(), "usual")
        self.assertEqual(inst.period.start.value, FHIRDateTime("1975").value)
        self.assertEqual(inst.period.start.as_json(), "1975")
        self.assertEqual(inst.photo[0].contentType.value, FHIRCode("image/jpeg").value)
        self.assertEqual(inst.photo[0].contentType.as_json(), "image/jpeg")
        self.assertEqual(inst.relationship[0].coding[0].code.value, FHIRCode("SIGOTHR").value)
        self.assertEqual(inst.relationship[0].coding[0].code.as_json(), "SIGOTHR")
        self.assertEqual(inst.relationship[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-RoleCode").value)
        self.assertEqual(inst.relationship[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-RoleCode")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].use.value, FHIRCode("home").value)
        self.assertEqual(inst.telecom[0].use.as_json(), "home")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("+31201234567").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "+31201234567")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testRelatedPerson5(self):
        inst = self.instantiate_from('relatedperson-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a RelatedPerson instance')
        self.implRelatedPerson5(inst)

        js = inst.as_json()
        self.assertEqual("RelatedPerson", js["resourceType"])
        inst2 = relatedperson.RelatedPerson(js)
        self.implRelatedPerson5(inst2)

    def implRelatedPerson5(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].city.value, FHIRString("Paris").value)
        self.assertEqual(inst.address[0].city.as_json(), "Paris")
        self.assertEqual(inst.address[0].country.value, FHIRString("FRA").value)
        self.assertEqual(inst.address[0].country.as_json(), "FRA")
        self.assertEqual(inst.address[0].line[0].value, FHIRString("43, Place du Marché Sainte Catherine").value)
        self.assertEqual(inst.address[0].line[0].as_json(), "43, Place du Marché Sainte Catherine")
        self.assertEqual(inst.address[0].postalCode.value, FHIRString("75004").value)
        self.assertEqual(inst.address[0].postalCode.as_json(), "75004")
        self.assertEqual(inst.gender.value, FHIRCode("female").value)
        self.assertEqual(inst.gender.as_json(), "female")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:1.2.250.1.61").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:1.2.250.1.61")
        self.assertEqual(inst.identifier[0].type.text.value, FHIRString("INSEE").value)
        self.assertEqual(inst.identifier[0].type.text.as_json(), "INSEE")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "usual")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("272117510400399").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "272117510400399")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name[0].family.value, FHIRString("du Marché").value)
        self.assertEqual(inst.name[0].family.as_json(), "du Marché")
        self.assertEqual(inst.name[0].given[0].value, FHIRString("Bénédicte").value)
        self.assertEqual(inst.name[0].given[0].as_json(), "Bénédicte")
        self.assertEqual(inst.photo[0].contentType.value, FHIRCode("image/jpeg").value)
        self.assertEqual(inst.photo[0].contentType.as_json(), "image/jpeg")
        self.assertEqual(inst.photo[0].url.value, FHIRUrl("Binary/f016").value)
        self.assertEqual(inst.photo[0].url.as_json(), "Binary/f016")
        self.assertEqual(inst.relationship[0].coding[0].code.value, FHIRCode("N").value)
        self.assertEqual(inst.relationship[0].coding[0].code.as_json(), "N")
        self.assertEqual(inst.relationship[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0131").value)
        self.assertEqual(inst.relationship[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0131")
        self.assertEqual(inst.relationship[0].coding[1].code.value, FHIRCode("WIFE").value)
        self.assertEqual(inst.relationship[0].coding[1].code.as_json(), "WIFE")
        self.assertEqual(inst.relationship[0].coding[1].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-RoleCode").value)
        self.assertEqual(inst.relationship[0].coding[1].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-RoleCode")
        self.assertEqual(inst.telecom[0].system.value, FHIRCode("phone").value)
        self.assertEqual(inst.telecom[0].system.as_json(), "phone")
        self.assertEqual(inst.telecom[0].value.value, FHIRString("+33 (237) 998327").value)
        self.assertEqual(inst.telecom[0].value.as_json(), "+33 (237) 998327")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")


from fhirclient.models.fhirdatatypes import FHIRString, FHIRCode, FHIRDate, FHIRUri, FHIRDateTime, FHIRUrl