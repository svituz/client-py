#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-25.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import task

class TaskTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Task", js["resourceType"])
        return task.Task(js)

    def testTask1(self):
        inst = self.instantiate_from('task-example5.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Task instance')
        self.implTask1(inst)

        js = inst.as_json()
        self.assertEqual("Task", js["resourceType"])
        inst2 = task.Task(js)
        self.implTask1(inst2)

    def implTask1(self, inst):
        self.assertEqual(inst.authoredOn.value, FHIRDateTime('2016-10-31T08:25:05+10:00').value)
        self.assertEqual(inst.authoredOn.as_json(), '2016-10-31T08:25:05+10:00')
        self.assertEqual(inst.businessStatus.text.value, FHIRString('specimen received, test in progress').value)
        self.assertEqual(inst.businessStatus.text.as_json(), 'specimen received, test in progress')
        self.assertEqual(inst.code.text.value, FHIRString('Lipid Panel').value)
        self.assertEqual(inst.code.text.as_json(), 'Lipid Panel')
        self.assertEqual(inst.description.value, FHIRString('Create order for getting specimen, Set up inhouse testing,  generate order for any sendouts and submit with specimen').value)
        self.assertEqual(inst.description.as_json(), 'Create order for getting specimen, Set up inhouse testing,  generate order for any sendouts and submit with specimen')
        self.assertEqual(inst.executionPeriod.start.value, FHIRDateTime('2016-10-31T08:25:05+10:00').value)
        self.assertEqual(inst.executionPeriod.start.as_json(), '2016-10-31T08:25:05+10:00')
        self.assertEqual(inst.groupIdentifier.system.value, FHIRUri('http:/goodhealth.org/accession/identifiers').value)
        self.assertEqual(inst.groupIdentifier.system.as_json(), 'http:/goodhealth.org/accession/identifiers')
        self.assertEqual(inst.groupIdentifier.use.value, FHIRCode('official').value)
        self.assertEqual(inst.groupIdentifier.use.as_json(), 'official')
        self.assertEqual(inst.groupIdentifier.value.value, FHIRString('G20170201-001').value)
        self.assertEqual(inst.groupIdentifier.value.as_json(), 'G20170201-001')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http:/goodhealth.org/identifiers').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http:/goodhealth.org/identifiers')
        self.assertEqual(inst.identifier[0].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[0].use.as_json(), 'official')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('20170201-001').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '20170201-001')
        self.assertEqual(inst.intent.value, FHIRCode('order').value)
        self.assertEqual(inst.intent.as_json(), 'order')
        self.assertEqual(inst.lastModified.value, FHIRDateTime('2016-10-31T16:45:05+10:00').value)
        self.assertEqual(inst.lastModified.as_json(), '2016-10-31T16:45:05+10:00')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.output[0].type.text.value, FHIRString('collected specimen').value)
        self.assertEqual(inst.output[0].type.text.as_json(), 'collected specimen')
        self.assertEqual(inst.performerType[0].coding[0].code.value, FHIRCode('performer').value)
        self.assertEqual(inst.performerType[0].coding[0].code.as_json(), 'performer')
        self.assertEqual(inst.performerType[0].coding[0].display.value, FHIRString('Performer').value)
        self.assertEqual(inst.performerType[0].coding[0].display.as_json(), 'Performer')
        self.assertEqual(inst.performerType[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/task-performer-type').value)
        self.assertEqual(inst.performerType[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/task-performer-type')
        self.assertEqual(inst.performerType[0].text.value, FHIRString('Performer').value)
        self.assertEqual(inst.performerType[0].text.as_json(), 'Performer')
        self.assertEqual(inst.priority.value, FHIRCode('routine').value)
        self.assertEqual(inst.priority.as_json(), 'routine')
        self.assertEqual(inst.reasonCode.text.value, FHIRString('The Task.reason should only be included if there is no Task.focus or if it differs from the reason indicated on the focus').value)
        self.assertEqual(inst.reasonCode.text.as_json(), 'The Task.reason should only be included if there is no Task.focus or if it differs from the reason indicated on the focus')
        self.assertEqual(inst.restriction.period.end.value, FHIRDateTime('2016-11-02T09:45:05+10:00').value)
        self.assertEqual(inst.restriction.period.end.as_json(), '2016-11-02T09:45:05+10:00')
        self.assertEqual(inst.restriction.repetitions.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.restriction.repetitions.as_json(), 1)
        self.assertEqual(inst.status.value, FHIRCode('in-progress').value)
        self.assertEqual(inst.status.as_json(), 'in-progress')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testTask2(self):
        inst = self.instantiate_from('task-example3.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Task instance')
        self.implTask2(inst)

        js = inst.as_json()
        self.assertEqual("Task", js["resourceType"])
        inst2 = task.Task(js)
        self.implTask2(inst2)

    def implTask2(self, inst):
        self.assertEqual(inst.authoredOn.value, FHIRDateTime('2016-03-10T22:39:32-04:00').value)
        self.assertEqual(inst.authoredOn.as_json(), '2016-03-10T22:39:32-04:00')
        self.assertEqual(inst.code.text.value, FHIRString('Refill Request').value)
        self.assertEqual(inst.code.text.as_json(), 'Refill Request')
        self.assertEqual(inst.intent.value, FHIRCode('order').value)
        self.assertEqual(inst.intent.as_json(), 'order')
        self.assertEqual(inst.lastModified.value, FHIRDateTime('2016-03-10T22:39:32-04:00').value)
        self.assertEqual(inst.lastModified.as_json(), '2016-03-10T22:39:32-04:00')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.status.value, FHIRCode('draft').value)
        self.assertEqual(inst.status.as_json(), 'draft')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testTask3(self):
        inst = self.instantiate_from('task-example-fm-status.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Task instance')
        self.implTask3(inst)

        js = inst.as_json()
        self.assertEqual("Task", js["resourceType"])
        inst2 = task.Task(js)
        self.implTask3(inst2)

    def implTask3(self, inst):
        self.assertEqual(inst.authoredOn.value, FHIRDateTime('2018-10-04T08:25:05+10:00').value)
        self.assertEqual(inst.authoredOn.as_json(), '2018-10-04T08:25:05+10:00')
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode('status').value)
        self.assertEqual(inst.code.coding[0].code.as_json(), 'status')
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/financialtaskcode').value)
        self.assertEqual(inst.code.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/financialtaskcode')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http:/happyvalley.com/task').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http:/happyvalley.com/task')
        self.assertEqual(inst.identifier[0].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[0].use.as_json(), 'official')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('20181012-001').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '20181012-001')
        self.assertEqual(inst.intent.value, FHIRCode('order').value)
        self.assertEqual(inst.intent.as_json(), 'order')
        self.assertEqual(inst.lastModified.value, FHIRDateTime('2018-10-04T08:25:05+10:00').value)
        self.assertEqual(inst.lastModified.as_json(), '2018-10-04T08:25:05+10:00')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.priority.value, FHIRCode('stat').value)
        self.assertEqual(inst.priority.as_json(), 'stat')
        self.assertEqual(inst.status.value, FHIRCode('requested').value)
        self.assertEqual(inst.status.as_json(), 'requested')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testTask4(self):
        inst = self.instantiate_from('task-example4.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Task instance')
        self.implTask4(inst)

        js = inst.as_json()
        self.assertEqual("Task", js["resourceType"])
        inst2 = task.Task(js)
        self.implTask4(inst2)

    def implTask4(self, inst):
        self.assertEqual(inst.authoredOn.value, FHIRDateTime('2016-10-31T08:45:05+10:00').value)
        self.assertEqual(inst.authoredOn.as_json(), '2016-10-31T08:45:05+10:00')
        self.assertEqual(inst.code.text.value, FHIRString('Specimen Collection').value)
        self.assertEqual(inst.code.text.as_json(), 'Specimen Collection')
        self.assertEqual(inst.executionPeriod.end.value, FHIRDateTime('2016-10-31T14:45:05+10:00').value)
        self.assertEqual(inst.executionPeriod.end.as_json(), '2016-10-31T14:45:05+10:00')
        self.assertEqual(inst.executionPeriod.start.value, FHIRDateTime('2016-10-31T08:45:05+10:00').value)
        self.assertEqual(inst.executionPeriod.start.as_json(), '2016-10-31T08:45:05+10:00')
        self.assertEqual(inst.groupIdentifier.system.value, FHIRUri('http:/goodhealth.org/accession/identifiers').value)
        self.assertEqual(inst.groupIdentifier.system.as_json(), 'http:/goodhealth.org/accession/identifiers')
        self.assertEqual(inst.groupIdentifier.use.value, FHIRCode('official').value)
        self.assertEqual(inst.groupIdentifier.use.as_json(), 'official')
        self.assertEqual(inst.groupIdentifier.value.value, FHIRString('G20170201-001').value)
        self.assertEqual(inst.groupIdentifier.value.as_json(), 'G20170201-001')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http:/goodhealth.org/identifiers').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http:/goodhealth.org/identifiers')
        self.assertEqual(inst.identifier[0].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[0].use.as_json(), 'official')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('20170201-002').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '20170201-002')
        self.assertEqual(inst.intent.value, FHIRCode('filler-order').value)
        self.assertEqual(inst.intent.as_json(), 'filler-order')
        self.assertEqual(inst.lastModified.value, FHIRDateTime('2016-10-31T09:45:05+10:00').value)
        self.assertEqual(inst.lastModified.as_json(), '2016-10-31T09:45:05+10:00')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.output[0].type.text.value, FHIRString('collected specimen').value)
        self.assertEqual(inst.output[0].type.text.as_json(), 'collected specimen')
        self.assertEqual(inst.performerType[0].coding[0].code.value, FHIRCode('performer').value)
        self.assertEqual(inst.performerType[0].coding[0].code.as_json(), 'performer')
        self.assertEqual(inst.performerType[0].coding[0].display.value, FHIRString('Performer').value)
        self.assertEqual(inst.performerType[0].coding[0].display.as_json(), 'Performer')
        self.assertEqual(inst.performerType[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/task-performer-type').value)
        self.assertEqual(inst.performerType[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/task-performer-type')
        self.assertEqual(inst.performerType[0].text.value, FHIRString('Performer').value)
        self.assertEqual(inst.performerType[0].text.as_json(), 'Performer')
        self.assertEqual(inst.priority.value, FHIRCode('routine').value)
        self.assertEqual(inst.priority.as_json(), 'routine')
        self.assertEqual(inst.restriction.period.end.value, FHIRDateTime('2016-11-01T09:45:05+10:00').value)
        self.assertEqual(inst.restriction.period.end.as_json(), '2016-11-01T09:45:05+10:00')
        self.assertEqual(inst.restriction.repetitions.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.restriction.repetitions.as_json(), 1)
        self.assertEqual(inst.status.value, FHIRCode('completed').value)
        self.assertEqual(inst.status.as_json(), 'completed')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testTask5(self):
        inst = self.instantiate_from('task-example-fm-release.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Task instance')
        self.implTask5(inst)

        js = inst.as_json()
        self.assertEqual("Task", js["resourceType"])
        inst2 = task.Task(js)
        self.implTask5(inst2)

    def implTask5(self, inst):
        self.assertEqual(inst.authoredOn.value, FHIRDateTime('2018-10-04T08:25:05+10:00').value)
        self.assertEqual(inst.authoredOn.as_json(), '2018-10-04T08:25:05+10:00')
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode('release').value)
        self.assertEqual(inst.code.coding[0].code.as_json(), 'release')
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/financialtaskcode').value)
        self.assertEqual(inst.code.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/financialtaskcode')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http:/happyvalley.com/task').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http:/happyvalley.com/task')
        self.assertEqual(inst.identifier[0].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[0].use.as_json(), 'official')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('20181012-001').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '20181012-001')
        self.assertEqual(inst.input[0].type.coding[0].code.value, FHIRCode('origresponse').value)
        self.assertEqual(inst.input[0].type.coding[0].code.as_json(), 'origresponse')
        self.assertEqual(inst.input[0].type.coding[0].system.value, FHIRUri('http://hl7.org/financial-taskinputtype').value)
        self.assertEqual(inst.input[0].type.coding[0].system.as_json(), 'http://hl7.org/financial-taskinputtype')
        self.assertEqual(inst.intent.value, FHIRCode('order').value)
        self.assertEqual(inst.intent.as_json(), 'order')
        self.assertEqual(inst.lastModified.value, FHIRDateTime('2018-10-04T08:25:05+10:00').value)
        self.assertEqual(inst.lastModified.as_json(), '2018-10-04T08:25:05+10:00')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.priority.value, FHIRCode('stat').value)
        self.assertEqual(inst.priority.as_json(), 'stat')
        self.assertEqual(inst.status.value, FHIRCode('requested').value)
        self.assertEqual(inst.status.as_json(), 'requested')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testTask6(self):
        inst = self.instantiate_from('task-example1.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Task instance')
        self.implTask6(inst)

        js = inst.as_json()
        self.assertEqual("Task", js["resourceType"])
        inst2 = task.Task(js)
        self.implTask6(inst2)

    def implTask6(self, inst):
        self.assertEqual(inst.authoredOn.value, FHIRDateTime('2016-10-31T08:25:05+10:00').value)
        self.assertEqual(inst.authoredOn.as_json(), '2016-10-31T08:25:05+10:00')
        self.assertEqual(inst.businessStatus.text.value, FHIRString('waiting for specimen').value)
        self.assertEqual(inst.businessStatus.text.as_json(), 'waiting for specimen')
        self.assertEqual(inst.code.text.value, FHIRString('Lipid Panel').value)
        self.assertEqual(inst.code.text.as_json(), 'Lipid Panel')
        self.assertEqual(inst.description.value, FHIRString('Create order for getting specimen, Set up inhouse testing,  generate order for any sendouts and submit with specimen').value)
        self.assertEqual(inst.description.as_json(), 'Create order for getting specimen, Set up inhouse testing,  generate order for any sendouts and submit with specimen')
        self.assertEqual(inst.executionPeriod.start.value, FHIRDateTime('2016-10-31T08:25:05+10:00').value)
        self.assertEqual(inst.executionPeriod.start.as_json(), '2016-10-31T08:25:05+10:00')
        self.assertEqual(inst.groupIdentifier.system.value, FHIRUri('http:/goodhealth.org/accession/identifiers').value)
        self.assertEqual(inst.groupIdentifier.system.as_json(), 'http:/goodhealth.org/accession/identifiers')
        self.assertEqual(inst.groupIdentifier.use.value, FHIRCode('official').value)
        self.assertEqual(inst.groupIdentifier.use.as_json(), 'official')
        self.assertEqual(inst.groupIdentifier.value.value, FHIRString('G20170201-001').value)
        self.assertEqual(inst.groupIdentifier.value.as_json(), 'G20170201-001')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http:/goodhealth.org/identifiers').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http:/goodhealth.org/identifiers')
        self.assertEqual(inst.identifier[0].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[0].use.as_json(), 'official')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('20170201-001').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '20170201-001')
        self.assertEqual(inst.intent.value, FHIRCode('order').value)
        self.assertEqual(inst.intent.as_json(), 'order')
        self.assertEqual(inst.lastModified.value, FHIRDateTime('2016-10-31T09:45:05+10:00').value)
        self.assertEqual(inst.lastModified.as_json(), '2016-10-31T09:45:05+10:00')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.performerType[0].coding[0].code.value, FHIRCode('performer').value)
        self.assertEqual(inst.performerType[0].coding[0].code.as_json(), 'performer')
        self.assertEqual(inst.performerType[0].coding[0].display.value, FHIRString('Performer').value)
        self.assertEqual(inst.performerType[0].coding[0].display.as_json(), 'Performer')
        self.assertEqual(inst.performerType[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/task-performer-type').value)
        self.assertEqual(inst.performerType[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/task-performer-type')
        self.assertEqual(inst.performerType[0].text.value, FHIRString('Performer').value)
        self.assertEqual(inst.performerType[0].text.as_json(), 'Performer')
        self.assertEqual(inst.priority.value, FHIRCode('routine').value)
        self.assertEqual(inst.priority.as_json(), 'routine')
        self.assertEqual(inst.reasonCode.text.value, FHIRString('The Task.reason should only be included if there is no Task.focus or if it differs from the reason indicated on the focus').value)
        self.assertEqual(inst.reasonCode.text.as_json(), 'The Task.reason should only be included if there is no Task.focus or if it differs from the reason indicated on the focus')
        self.assertEqual(inst.restriction.period.end.value, FHIRDateTime('2016-11-02T09:45:05+10:00').value)
        self.assertEqual(inst.restriction.period.end.as_json(), '2016-11-02T09:45:05+10:00')
        self.assertEqual(inst.restriction.repetitions.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.restriction.repetitions.as_json(), 1)
        self.assertEqual(inst.status.value, FHIRCode('in-progress').value)
        self.assertEqual(inst.status.as_json(), 'in-progress')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testTask7(self):
        inst = self.instantiate_from('task-example-fm-status-resp.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Task instance')
        self.implTask7(inst)

        js = inst.as_json()
        self.assertEqual("Task", js["resourceType"])
        inst2 = task.Task(js)
        self.implTask7(inst2)

    def implTask7(self, inst):
        self.assertEqual(inst.authoredOn.value, FHIRDateTime('2018-10-04T08:25:05+10:00').value)
        self.assertEqual(inst.authoredOn.as_json(), '2018-10-04T08:25:05+10:00')
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode('status').value)
        self.assertEqual(inst.code.coding[0].code.as_json(), 'status')
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/financialtaskcode').value)
        self.assertEqual(inst.code.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/financialtaskcode')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http:/happyvalley.com/task').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http:/happyvalley.com/task')
        self.assertEqual(inst.identifier[0].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[0].use.as_json(), 'official')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('20181012-001').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '20181012-001')
        self.assertEqual(inst.identifier[1].system.value, FHIRUri('http://nationalinsurers.com/identifiers/12345').value)
        self.assertEqual(inst.identifier[1].system.as_json(), 'http://nationalinsurers.com/identifiers/12345')
        self.assertEqual(inst.identifier[1].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[1].use.as_json(), 'official')
        self.assertEqual(inst.identifier[1].value.value, FHIRString('123GB5674').value)
        self.assertEqual(inst.identifier[1].value.as_json(), '123GB5674')
        self.assertEqual(inst.intent.value, FHIRCode('order').value)
        self.assertEqual(inst.intent.as_json(), 'order')
        self.assertEqual(inst.lastModified.value, FHIRDateTime('2018-10-04T08:25:05+10:00').value)
        self.assertEqual(inst.lastModified.as_json(), '2018-10-04T08:25:05+10:00')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.output[0].type.coding[0].code.value, FHIRCode('status').value)
        self.assertEqual(inst.output[0].type.coding[0].code.as_json(), 'status')
        self.assertEqual(inst.output[0].type.coding[0].system.value, FHIRUri('http://hl7.org/financial-taskoutputtype').value)
        self.assertEqual(inst.output[0].type.coding[0].system.as_json(), 'http://hl7.org/financial-taskoutputtype')
        self.assertEqual(inst.output[0].valueCode.value, FHIRCode('complete').value)
        self.assertEqual(inst.output[0].valueCode.as_json(), 'complete')
        self.assertEqual(inst.priority.value, FHIRCode('stat').value)
        self.assertEqual(inst.priority.as_json(), 'stat')
        self.assertEqual(inst.status.value, FHIRCode('completed').value)
        self.assertEqual(inst.status.as_json(), 'completed')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testTask8(self):
        inst = self.instantiate_from('task-example-fm-cancel.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Task instance')
        self.implTask8(inst)

        js = inst.as_json()
        self.assertEqual("Task", js["resourceType"])
        inst2 = task.Task(js)
        self.implTask8(inst2)

    def implTask8(self, inst):
        self.assertEqual(inst.authoredOn.value, FHIRDateTime('2018-10-04T08:25:05+10:00').value)
        self.assertEqual(inst.authoredOn.as_json(), '2018-10-04T08:25:05+10:00')
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode('cancel').value)
        self.assertEqual(inst.code.coding[0].code.as_json(), 'cancel')
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/financialtaskcode').value)
        self.assertEqual(inst.code.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/financialtaskcode')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http:/happyvalley.com/task').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http:/happyvalley.com/task')
        self.assertEqual(inst.identifier[0].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[0].use.as_json(), 'official')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('20181012-001').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '20181012-001')
        self.assertEqual(inst.intent.value, FHIRCode('order').value)
        self.assertEqual(inst.intent.as_json(), 'order')
        self.assertEqual(inst.lastModified.value, FHIRDateTime('2018-10-04T08:25:05+10:00').value)
        self.assertEqual(inst.lastModified.as_json(), '2018-10-04T08:25:05+10:00')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.priority.value, FHIRCode('stat').value)
        self.assertEqual(inst.priority.as_json(), 'stat')
        self.assertEqual(inst.status.value, FHIRCode('requested').value)
        self.assertEqual(inst.status.as_json(), 'requested')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testTask9(self):
        inst = self.instantiate_from('task-example2.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Task instance')
        self.implTask9(inst)

        js = inst.as_json()
        self.assertEqual("Task", js["resourceType"])
        inst2 = task.Task(js)
        self.implTask9(inst2)

    def implTask9(self, inst):
        self.assertEqual(inst.authoredOn.value, FHIRDateTime('2016-10-31T08:45:05+10:00').value)
        self.assertEqual(inst.authoredOn.as_json(), '2016-10-31T08:45:05+10:00')
        self.assertEqual(inst.businessStatus.text.value, FHIRString('waiting for patient').value)
        self.assertEqual(inst.businessStatus.text.as_json(), 'waiting for patient')
        self.assertEqual(inst.code.text.value, FHIRString('Specimen Collection').value)
        self.assertEqual(inst.code.text.as_json(), 'Specimen Collection')
        self.assertEqual(inst.executionPeriod.start.value, FHIRDateTime('2016-10-31T08:45:05+10:00').value)
        self.assertEqual(inst.executionPeriod.start.as_json(), '2016-10-31T08:45:05+10:00')
        self.assertEqual(inst.groupIdentifier.system.value, FHIRUri('http:/goodhealth.org/accession/identifiers').value)
        self.assertEqual(inst.groupIdentifier.system.as_json(), 'http:/goodhealth.org/accession/identifiers')
        self.assertEqual(inst.groupIdentifier.use.value, FHIRCode('official').value)
        self.assertEqual(inst.groupIdentifier.use.as_json(), 'official')
        self.assertEqual(inst.groupIdentifier.value.value, FHIRString('G20170201-001').value)
        self.assertEqual(inst.groupIdentifier.value.as_json(), 'G20170201-001')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http:/goodhealth.org/identifiers').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http:/goodhealth.org/identifiers')
        self.assertEqual(inst.identifier[0].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[0].use.as_json(), 'official')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('20170201-002').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '20170201-002')
        self.assertEqual(inst.intent.value, FHIRCode('filler-order').value)
        self.assertEqual(inst.intent.as_json(), 'filler-order')
        self.assertEqual(inst.lastModified.value, FHIRDateTime('2016-10-31T09:45:05+10:00').value)
        self.assertEqual(inst.lastModified.as_json(), '2016-10-31T09:45:05+10:00')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.performerType[0].coding[0].code.value, FHIRCode('performer').value)
        self.assertEqual(inst.performerType[0].coding[0].code.as_json(), 'performer')
        self.assertEqual(inst.performerType[0].coding[0].display.value, FHIRString('Performer').value)
        self.assertEqual(inst.performerType[0].coding[0].display.as_json(), 'Performer')
        self.assertEqual(inst.performerType[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/task-performer-type').value)
        self.assertEqual(inst.performerType[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/task-performer-type')
        self.assertEqual(inst.performerType[0].text.value, FHIRString('Performer').value)
        self.assertEqual(inst.performerType[0].text.as_json(), 'Performer')
        self.assertEqual(inst.priority.value, FHIRCode('routine').value)
        self.assertEqual(inst.priority.as_json(), 'routine')
        self.assertEqual(inst.restriction.period.end.value, FHIRDateTime('2016-11-01T09:45:05+10:00').value)
        self.assertEqual(inst.restriction.period.end.as_json(), '2016-11-01T09:45:05+10:00')
        self.assertEqual(inst.restriction.repetitions.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.restriction.repetitions.as_json(), 1)
        self.assertEqual(inst.status.value, FHIRCode('accepted').value)
        self.assertEqual(inst.status.as_json(), 'accepted')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testTask10(self):
        inst = self.instantiate_from('task-example6.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Task instance')
        self.implTask10(inst)

        js = inst.as_json()
        self.assertEqual("Task", js["resourceType"])
        inst2 = task.Task(js)
        self.implTask10(inst2)

    def implTask10(self, inst):
        self.assertEqual(inst.authoredOn.value, FHIRDateTime('2016-10-31T08:25:05+10:00').value)
        self.assertEqual(inst.authoredOn.as_json(), '2016-10-31T08:25:05+10:00')
        self.assertEqual(inst.businessStatus.text.value, FHIRString('test completed and posted').value)
        self.assertEqual(inst.businessStatus.text.as_json(), 'test completed and posted')
        self.assertEqual(inst.code.text.value, FHIRString('Lipid Panel').value)
        self.assertEqual(inst.code.text.as_json(), 'Lipid Panel')
        self.assertEqual(inst.description.value, FHIRString('Create order for getting specimen, Set up inhouse testing,  generate order for any sendouts and submit with specimen').value)
        self.assertEqual(inst.description.as_json(), 'Create order for getting specimen, Set up inhouse testing,  generate order for any sendouts and submit with specimen')
        self.assertEqual(inst.executionPeriod.end.value, FHIRDateTime('2016-10-31T18:45:05+10:00').value)
        self.assertEqual(inst.executionPeriod.end.as_json(), '2016-10-31T18:45:05+10:00')
        self.assertEqual(inst.executionPeriod.start.value, FHIRDateTime('2016-10-31T08:25:05+10:00').value)
        self.assertEqual(inst.executionPeriod.start.as_json(), '2016-10-31T08:25:05+10:00')
        self.assertEqual(inst.groupIdentifier.system.value, FHIRUri('http:/goodhealth.org/accession/identifiers').value)
        self.assertEqual(inst.groupIdentifier.system.as_json(), 'http:/goodhealth.org/accession/identifiers')
        self.assertEqual(inst.groupIdentifier.use.value, FHIRCode('official').value)
        self.assertEqual(inst.groupIdentifier.use.as_json(), 'official')
        self.assertEqual(inst.groupIdentifier.value.value, FHIRString('G20170201-001').value)
        self.assertEqual(inst.groupIdentifier.value.as_json(), 'G20170201-001')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http:/goodhealth.org/identifiers').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http:/goodhealth.org/identifiers')
        self.assertEqual(inst.identifier[0].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[0].use.as_json(), 'official')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('20170201-001').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '20170201-001')
        self.assertEqual(inst.intent.value, FHIRCode('order').value)
        self.assertEqual(inst.intent.as_json(), 'order')
        self.assertEqual(inst.lastModified.value, FHIRDateTime('2016-10-31T18:45:05+10:00').value)
        self.assertEqual(inst.lastModified.as_json(), '2016-10-31T18:45:05+10:00')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.output[0].type.text.value, FHIRString('DiagnosticReport generated').value)
        self.assertEqual(inst.output[0].type.text.as_json(), 'DiagnosticReport generated')
        self.assertEqual(inst.output[1].type.text.value, FHIRString('collected specimen').value)
        self.assertEqual(inst.output[1].type.text.as_json(), 'collected specimen')
        self.assertEqual(inst.performerType[0].coding[0].code.value, FHIRCode('performer').value)
        self.assertEqual(inst.performerType[0].coding[0].code.as_json(), 'performer')
        self.assertEqual(inst.performerType[0].coding[0].display.value, FHIRString('Performer').value)
        self.assertEqual(inst.performerType[0].coding[0].display.as_json(), 'Performer')
        self.assertEqual(inst.performerType[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/task-performer-type').value)
        self.assertEqual(inst.performerType[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/task-performer-type')
        self.assertEqual(inst.performerType[0].text.value, FHIRString('Performer').value)
        self.assertEqual(inst.performerType[0].text.as_json(), 'Performer')
        self.assertEqual(inst.priority.value, FHIRCode('routine').value)
        self.assertEqual(inst.priority.as_json(), 'routine')
        self.assertEqual(inst.reasonCode.text.value, FHIRString('The Task.reason should only be included if there is no Task.focus or if it differs from the reason indicated on the focus').value)
        self.assertEqual(inst.reasonCode.text.as_json(), 'The Task.reason should only be included if there is no Task.focus or if it differs from the reason indicated on the focus')
        self.assertEqual(inst.restriction.period.end.value, FHIRDateTime('2016-11-02T09:45:05+10:00').value)
        self.assertEqual(inst.restriction.period.end.as_json(), '2016-11-02T09:45:05+10:00')
        self.assertEqual(inst.restriction.repetitions.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.restriction.repetitions.as_json(), 1)
        self.assertEqual(inst.status.value, FHIRCode('completed').value)
        self.assertEqual(inst.status.as_json(), 'completed')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')


from fhirclient.models.fhirdatatypes import FHIRDateTime, FHIRString, FHIRUri, FHIRCode, FHIRPositiveInt