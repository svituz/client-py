#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import searchparameter

class SearchParameterTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("SearchParameter", js["resourceType"])
        return searchparameter.SearchParameter(js)

    def testSearchParameter1(self):
        inst = self.instantiate_from('searchparameter-example-extension.json')
        self.assertIsNotNone(inst, 'Must have instantiated a SearchParameter instance')
        self.implSearchParameter1(inst)

        js = inst.as_json()
        self.assertEqual("SearchParameter", js["resourceType"])
        inst2 = searchparameter.SearchParameter(js)
        self.implSearchParameter1(inst2)

    def implSearchParameter1(self, inst):
        self.assertEqual(inst.base[0].value, FHIRCode("Patient").value)
        self.assertEqual(inst.base[0].as_json(), "Patient")
        self.assertEqual(inst.code.value, FHIRCode("part-agree").value)
        self.assertEqual(inst.code.as_json(), "part-agree")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("http://hl7.org/fhir").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "http://hl7.org/fhir")
        self.assertEqual(inst.description.value, FHIRMarkdown("Search by url for a participation agreement, which is stored in a DocumentReference").value)
        self.assertEqual(inst.description.as_json(), "Search by url for a participation agreement, which is stored in a DocumentReference")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.expression.value, FHIRString("DocumentReference.extension('http://example.org/fhir/StructureDefinition/participation-agreement')").value)
        self.assertEqual(inst.expression.as_json(), "DocumentReference.extension('http://example.org/fhir/StructureDefinition/participation-agreement')")
        self.assertEqual(inst.name.value, FHIRString("Example Search Parameter on an extension").value)
        self.assertEqual(inst.name.as_json(), "Example Search Parameter on an extension")
        self.assertEqual(inst.publisher.value, FHIRString("Health Level Seven International (FHIR Infrastructure)").value)
        self.assertEqual(inst.publisher.as_json(), "Health Level Seven International (FHIR Infrastructure)")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.target[0].value, FHIRCode("DocumentReference").value)
        self.assertEqual(inst.target[0].as_json(), "DocumentReference")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("reference").value)
        self.assertEqual(inst.type.as_json(), "reference")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/SearchParameter/example-extension").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/SearchParameter/example-extension")
        self.assertEqual(inst.xpath.value, FHIRString("f:DocumentReference/f:extension[@url='http://example.org/fhir/StructureDefinition/participation-agreement']").value)
        self.assertEqual(inst.xpath.as_json(), "f:DocumentReference/f:extension[@url='http://example.org/fhir/StructureDefinition/participation-agreement']")
        self.assertEqual(inst.xpathUsage.value, FHIRCode("normal").value)
        self.assertEqual(inst.xpathUsage.as_json(), "normal")

    def testSearchParameter2(self):
        inst = self.instantiate_from('searchparameter-example-reference.json')
        self.assertIsNotNone(inst, 'Must have instantiated a SearchParameter instance')
        self.implSearchParameter2(inst)

        js = inst.as_json()
        self.assertEqual("SearchParameter", js["resourceType"])
        inst2 = searchparameter.SearchParameter(js)
        self.implSearchParameter2(inst2)

    def implSearchParameter2(self, inst):
        self.assertEqual(inst.base[0].value, FHIRCode("Condition").value)
        self.assertEqual(inst.base[0].as_json(), "Condition")
        self.assertEqual(inst.chain[0].value, FHIRString("name").value)
        self.assertEqual(inst.chain[0].as_json(), "name")
        self.assertEqual(inst.chain[1].value, FHIRString("identifier").value)
        self.assertEqual(inst.chain[1].as_json(), "identifier")
        self.assertEqual(inst.code.value, FHIRCode("subject").value)
        self.assertEqual(inst.code.as_json(), "subject")
        self.assertEqual(inst.contact[0].name.value, FHIRString("[string]").value)
        self.assertEqual(inst.contact[0].name.as_json(), "[string]")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("http://hl7.org/fhir").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "http://hl7.org/fhir")
        self.assertEqual(inst.date.value, FHIRDateTime("2013-10-23").value)
        self.assertEqual(inst.date.as_json(), "2013-10-23")
        self.assertEqual(inst.description.value, FHIRMarkdown("Search by condition subject").value)
        self.assertEqual(inst.description.as_json(), "Search by condition subject")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.expression.value, FHIRString("Condition.subject").value)
        self.assertEqual(inst.expression.as_json(), "Condition.subject")
        self.assertEqual(inst.modifier[0].value, FHIRCode("missing").value)
        self.assertEqual(inst.modifier[0].as_json(), "missing")
        self.assertEqual(inst.name.value, FHIRString("Example Search Parameter").value)
        self.assertEqual(inst.name.as_json(), "Example Search Parameter")
        self.assertEqual(inst.publisher.value, FHIRString("Health Level Seven International (FHIR Infrastructure)").value)
        self.assertEqual(inst.publisher.as_json(), "Health Level Seven International (FHIR Infrastructure)")
        self.assertEqual(inst.purpose.value, FHIRMarkdown("Need to search Condition by subject").value)
        self.assertEqual(inst.purpose.as_json(), "Need to search Condition by subject")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.target[0].value, FHIRCode("Organization").value)
        self.assertEqual(inst.target[0].as_json(), "Organization")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("reference").value)
        self.assertEqual(inst.type.as_json(), "reference")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/SearchParameter/example-reference").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/SearchParameter/example-reference")
        self.assertEqual(inst.xpathUsage.value, FHIRCode("normal").value)
        self.assertEqual(inst.xpathUsage.as_json(), "normal")

    def testSearchParameter3(self):
        inst = self.instantiate_from('searchparameter-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a SearchParameter instance')
        self.implSearchParameter3(inst)

        js = inst.as_json()
        self.assertEqual("SearchParameter", js["resourceType"])
        inst2 = searchparameter.SearchParameter(js)
        self.implSearchParameter3(inst2)

    def implSearchParameter3(self, inst):
        self.assertEqual(inst.base[0].value, FHIRCode("Resource").value)
        self.assertEqual(inst.base[0].as_json(), "Resource")
        self.assertEqual(inst.code.value, FHIRCode("_id").value)
        self.assertEqual(inst.code.as_json(), "_id")
        self.assertEqual(inst.comparator[0].value, FHIRCode("eq").value)
        self.assertEqual(inst.comparator[0].as_json(), "eq")
        self.assertEqual(inst.contact[0].name.value, FHIRString("[string]").value)
        self.assertEqual(inst.contact[0].name.as_json(), "[string]")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("http://hl7.org/fhir").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "http://hl7.org/fhir")
        self.assertEqual(inst.date.value, FHIRDateTime("2013-10-23").value)
        self.assertEqual(inst.date.as_json(), "2013-10-23")
        self.assertEqual(inst.derivedFrom.value, FHIRCanonical("http://hl7.org/fhir/SearchParameter/Resource-id").value)
        self.assertEqual(inst.derivedFrom.as_json(), "http://hl7.org/fhir/SearchParameter/Resource-id")
        self.assertEqual(inst.description.value, FHIRMarkdown("Search by resource identifier - e.g. same as the read interaction, but can return included resources").value)
        self.assertEqual(inst.description.as_json(), "Search by resource identifier - e.g. same as the read interaction, but can return included resources")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.expression.value, FHIRString("id").value)
        self.assertEqual(inst.expression.as_json(), "id")
        self.assertEqual(inst.jurisdiction[0].coding[0].code.value, FHIRCode("US").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].code.as_json(), "US")
        self.assertEqual(inst.jurisdiction[0].coding[0].display.value, FHIRString("United States of America (the)").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].display.as_json(), "United States of America (the)")
        self.assertEqual(inst.jurisdiction[0].coding[0].system.value, FHIRUri("urn:iso:std:iso:3166").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].system.as_json(), "urn:iso:std:iso:3166")
        self.assertEqual(inst.name.value, FHIRString("ID-SEARCH-PARAMETER").value)
        self.assertEqual(inst.name.as_json(), "ID-SEARCH-PARAMETER")
        self.assertEqual(inst.publisher.value, FHIRString("Health Level Seven International (FHIR Infrastructure)").value)
        self.assertEqual(inst.publisher.as_json(), "Health Level Seven International (FHIR Infrastructure)")
        self.assertEqual(inst.purpose.value, FHIRMarkdown("Need to search by identifier for various infrastructural cases - mainly retrieving packages, and matching as part of a chain").value)
        self.assertEqual(inst.purpose.as_json(), "Need to search by identifier for various infrastructural cases - mainly retrieving packages, and matching as part of a chain")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("token").value)
        self.assertEqual(inst.type.as_json(), "token")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/SearchParameter/example").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/SearchParameter/example")
        self.assertEqual(inst.useContext[0].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[0].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[0].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[0].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.value, FHIRCode("positive").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.as_json(), "positive")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/variant-state").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/variant-state")
        self.assertEqual(inst.version.value, FHIRString("1").value)
        self.assertEqual(inst.version.as_json(), "1")
        self.assertEqual(inst.xpath.value, FHIRString("f:*/f:id").value)
        self.assertEqual(inst.xpath.as_json(), "f:*/f:id")
        self.assertEqual(inst.xpathUsage.value, FHIRCode("normal").value)
        self.assertEqual(inst.xpathUsage.as_json(), "normal")


from fhirclient.models.fhirdatatypes import FHIRCode, FHIRString, FHIRMarkdown, FHIRUri, FHIRDateTime, FHIRCanonical