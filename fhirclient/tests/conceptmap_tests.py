#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import conceptmap

class ConceptMapTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("ConceptMap", js["resourceType"])
        return conceptmap.ConceptMap(js)

    def testConceptMap1(self):
        inst = self.instantiate_from('conceptmap-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ConceptMap instance')
        self.implConceptMap1(inst)

        js = inst.as_json()
        self.assertEqual("ConceptMap", js["resourceType"])
        inst2 = conceptmap.ConceptMap(js)
        self.implConceptMap1(inst2)

    def implConceptMap1(self, inst):
        self.assertEqual(inst.contact[0].name.value, FHIRString("FHIR project team (example)").value)
        self.assertEqual(inst.contact[0].name.as_json(), "FHIR project team (example)")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("http://hl7.org/fhir").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "http://hl7.org/fhir")
        self.assertEqual(inst.copyright.value, FHIRMarkdown("Creative Commons 0").value)
        self.assertEqual(inst.copyright.as_json(), "Creative Commons 0")
        self.assertEqual(inst.date.value, FHIRDateTime("2012-06-13").value)
        self.assertEqual(inst.date.as_json(), "2012-06-13")
        self.assertEqual(inst.description.value, FHIRMarkdown("A mapping between the FHIR and HL7 v3 AddressUse Code systems").value)
        self.assertEqual(inst.description.as_json(), "A mapping between the FHIR and HL7 v3 AddressUse Code systems")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.group[0].element[0].code.value, FHIRCode("home").value)
        self.assertEqual(inst.group[0].element[0].code.as_json(), "home")
        self.assertEqual(inst.group[0].element[0].display.value, FHIRString("home").value)
        self.assertEqual(inst.group[0].element[0].display.as_json(), "home")
        self.assertEqual(inst.group[0].element[0].target[0].code.value, FHIRCode("H").value)
        self.assertEqual(inst.group[0].element[0].target[0].code.as_json(), "H")
        self.assertEqual(inst.group[0].element[0].target[0].display.value, FHIRString("home").value)
        self.assertEqual(inst.group[0].element[0].target[0].display.as_json(), "home")
        self.assertEqual(inst.group[0].element[0].target[0].equivalence.value, FHIRCode("equivalent").value)
        self.assertEqual(inst.group[0].element[0].target[0].equivalence.as_json(), "equivalent")
        self.assertEqual(inst.group[0].element[1].code.value, FHIRCode("work").value)
        self.assertEqual(inst.group[0].element[1].code.as_json(), "work")
        self.assertEqual(inst.group[0].element[1].display.value, FHIRString("work").value)
        self.assertEqual(inst.group[0].element[1].display.as_json(), "work")
        self.assertEqual(inst.group[0].element[1].target[0].code.value, FHIRCode("WP").value)
        self.assertEqual(inst.group[0].element[1].target[0].code.as_json(), "WP")
        self.assertEqual(inst.group[0].element[1].target[0].display.value, FHIRString("work place").value)
        self.assertEqual(inst.group[0].element[1].target[0].display.as_json(), "work place")
        self.assertEqual(inst.group[0].element[1].target[0].equivalence.value, FHIRCode("equivalent").value)
        self.assertEqual(inst.group[0].element[1].target[0].equivalence.as_json(), "equivalent")
        self.assertEqual(inst.group[0].element[2].code.value, FHIRCode("temp").value)
        self.assertEqual(inst.group[0].element[2].code.as_json(), "temp")
        self.assertEqual(inst.group[0].element[2].display.value, FHIRString("temp").value)
        self.assertEqual(inst.group[0].element[2].display.as_json(), "temp")
        self.assertEqual(inst.group[0].element[2].target[0].code.value, FHIRCode("TMP").value)
        self.assertEqual(inst.group[0].element[2].target[0].code.as_json(), "TMP")
        self.assertEqual(inst.group[0].element[2].target[0].display.value, FHIRString("temporary address").value)
        self.assertEqual(inst.group[0].element[2].target[0].display.as_json(), "temporary address")
        self.assertEqual(inst.group[0].element[2].target[0].equivalence.value, FHIRCode("equivalent").value)
        self.assertEqual(inst.group[0].element[2].target[0].equivalence.as_json(), "equivalent")
        self.assertEqual(inst.group[0].element[3].code.value, FHIRCode("old").value)
        self.assertEqual(inst.group[0].element[3].code.as_json(), "old")
        self.assertEqual(inst.group[0].element[3].display.value, FHIRString("old").value)
        self.assertEqual(inst.group[0].element[3].display.as_json(), "old")
        self.assertEqual(inst.group[0].element[3].target[0].code.value, FHIRCode("BAD").value)
        self.assertEqual(inst.group[0].element[3].target[0].code.as_json(), "BAD")
        self.assertEqual(inst.group[0].element[3].target[0].comment.value, FHIRString("In the HL7 v3 AD, old is handled by the usablePeriod element, but you have to provide a time, there's no simple equivalent of flagging an address as old").value)
        self.assertEqual(inst.group[0].element[3].target[0].comment.as_json(), "In the HL7 v3 AD, old is handled by the usablePeriod element, but you have to provide a time, there's no simple equivalent of flagging an address as old")
        self.assertEqual(inst.group[0].element[3].target[0].display.value, FHIRString("bad address").value)
        self.assertEqual(inst.group[0].element[3].target[0].display.as_json(), "bad address")
        self.assertEqual(inst.group[0].element[3].target[0].equivalence.value, FHIRCode("disjoint").value)
        self.assertEqual(inst.group[0].element[3].target[0].equivalence.as_json(), "disjoint")
        self.assertEqual(inst.group[0].source.value, FHIRUri("http://hl7.org/fhir/address-use").value)
        self.assertEqual(inst.group[0].source.as_json(), "http://hl7.org/fhir/address-use")
        self.assertEqual(inst.group[0].target.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-AddressUse").value)
        self.assertEqual(inst.group[0].target.as_json(), "http://terminology.hl7.org/CodeSystem/v3-AddressUse")
        self.assertEqual(inst.group[0].unmapped.code.value, FHIRCode("temp").value)
        self.assertEqual(inst.group[0].unmapped.code.as_json(), "temp")
        self.assertEqual(inst.group[0].unmapped.display.value, FHIRString("temp").value)
        self.assertEqual(inst.group[0].unmapped.display.as_json(), "temp")
        self.assertEqual(inst.group[0].unmapped.mode.value, FHIRCode("fixed").value)
        self.assertEqual(inst.group[0].unmapped.mode.as_json(), "fixed")
        self.assertEqual(inst.id.value, FHIRString("101").value)
        self.assertEqual(inst.id.as_json(), "101")
        self.assertEqual(inst.identifier.system.value, FHIRUri("urn:ietf:rfc:3986").value)
        self.assertEqual(inst.identifier.system.as_json(), "urn:ietf:rfc:3986")
        self.assertEqual(inst.identifier.value.value, FHIRString("urn:uuid:53cd62ee-033e-414c-9f58-3ca97b5ffc3b").value)
        self.assertEqual(inst.identifier.value.as_json(), "urn:uuid:53cd62ee-033e-414c-9f58-3ca97b5ffc3b")
        self.assertEqual(inst.jurisdiction[0].coding[0].code.value, FHIRCode("US").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].code.as_json(), "US")
        self.assertEqual(inst.jurisdiction[0].coding[0].system.value, FHIRUri("urn:iso:std:iso:3166").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].system.as_json(), "urn:iso:std:iso:3166")
        self.assertEqual(inst.name.value, FHIRString("FHIR-v3-Address-Use").value)
        self.assertEqual(inst.name.as_json(), "FHIR-v3-Address-Use")
        self.assertEqual(inst.publisher.value, FHIRString("HL7, Inc").value)
        self.assertEqual(inst.publisher.as_json(), "HL7, Inc")
        self.assertEqual(inst.purpose.value, FHIRMarkdown("To help implementers map from HL7 v3/CDA to FHIR").value)
        self.assertEqual(inst.purpose.as_json(), "To help implementers map from HL7 v3/CDA to FHIR")
        self.assertEqual(inst.sourceUri.value, FHIRUri("http://hl7.org/fhir/ValueSet/address-use").value)
        self.assertEqual(inst.sourceUri.as_json(), "http://hl7.org/fhir/ValueSet/address-use")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.targetUri.value, FHIRUri("http://terminology.hl7.org/ValueSet/v3-AddressUse").value)
        self.assertEqual(inst.targetUri.as_json(), "http://terminology.hl7.org/ValueSet/v3-AddressUse")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("FHIR/v3 Address Use Mapping").value)
        self.assertEqual(inst.title.as_json(), "FHIR/v3 Address Use Mapping")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/ConceptMap/101").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/ConceptMap/101")
        self.assertEqual(inst.useContext[0].code.code.value, FHIRCode("venue").value)
        self.assertEqual(inst.useContext[0].code.code.as_json(), "venue")
        self.assertEqual(inst.useContext[0].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[0].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.text.value, FHIRString("for CCDA Usage").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.text.as_json(), "for CCDA Usage")
        self.assertEqual(inst.version.value, FHIRString("4.0.1").value)
        self.assertEqual(inst.version.as_json(), "4.0.1")

    def testConceptMap2(self):
        inst = self.instantiate_from('conceptmap-example-2.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ConceptMap instance')
        self.implConceptMap2(inst)

        js = inst.as_json()
        self.assertEqual("ConceptMap", js["resourceType"])
        inst2 = conceptmap.ConceptMap(js)
        self.implConceptMap2(inst2)

    def implConceptMap2(self, inst):
        self.assertEqual(inst.contact[0].name.value, FHIRString("FHIR project team (example)").value)
        self.assertEqual(inst.contact[0].name.as_json(), "FHIR project team (example)")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("http://hl7.org/fhir").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "http://hl7.org/fhir")
        self.assertEqual(inst.date.value, FHIRDateTime("2012-06-13").value)
        self.assertEqual(inst.date.as_json(), "2012-06-13")
        self.assertEqual(inst.description.value, FHIRMarkdown("An example mapping").value)
        self.assertEqual(inst.description.as_json(), "An example mapping")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.group[0].element[0].code.value, FHIRCode("code").value)
        self.assertEqual(inst.group[0].element[0].code.as_json(), "code")
        self.assertEqual(inst.group[0].element[0].display.value, FHIRString("Example Code").value)
        self.assertEqual(inst.group[0].element[0].display.as_json(), "Example Code")
        self.assertEqual(inst.group[0].element[0].target[0].code.value, FHIRCode("code2").value)
        self.assertEqual(inst.group[0].element[0].target[0].code.as_json(), "code2")
        self.assertEqual(inst.group[0].element[0].target[0].dependsOn[0].display.value, FHIRString("Something Coded").value)
        self.assertEqual(inst.group[0].element[0].target[0].dependsOn[0].display.as_json(), "Something Coded")
        self.assertEqual(inst.group[0].element[0].target[0].dependsOn[0].property.value, FHIRUri("http://example.org/fhir/property-value/example").value)
        self.assertEqual(inst.group[0].element[0].target[0].dependsOn[0].property.as_json(), "http://example.org/fhir/property-value/example")
        self.assertEqual(inst.group[0].element[0].target[0].dependsOn[0].system.value, FHIRCanonical("http://example.org/fhir/example3").value)
        self.assertEqual(inst.group[0].element[0].target[0].dependsOn[0].system.as_json(), "http://example.org/fhir/example3")
        self.assertEqual(inst.group[0].element[0].target[0].dependsOn[0].value.value, FHIRString("some-code").value)
        self.assertEqual(inst.group[0].element[0].target[0].dependsOn[0].value.as_json(), "some-code")
        self.assertEqual(inst.group[0].element[0].target[0].display.value, FHIRString("Some Example Code").value)
        self.assertEqual(inst.group[0].element[0].target[0].display.as_json(), "Some Example Code")
        self.assertEqual(inst.group[0].element[0].target[0].equivalence.value, FHIRCode("equivalent").value)
        self.assertEqual(inst.group[0].element[0].target[0].equivalence.as_json(), "equivalent")
        self.assertEqual(inst.group[0].source.value, FHIRUri("http://example.org/fhir/example1").value)
        self.assertEqual(inst.group[0].source.as_json(), "http://example.org/fhir/example1")
        self.assertEqual(inst.group[0].target.value, FHIRUri("http://example.org/fhir/example2").value)
        self.assertEqual(inst.group[0].target.as_json(), "http://example.org/fhir/example2")
        self.assertEqual(inst.group[0].unmapped.mode.value, FHIRCode("other-map").value)
        self.assertEqual(inst.group[0].unmapped.mode.as_json(), "other-map")
        self.assertEqual(inst.group[0].unmapped.url.value, FHIRCanonical("http://example.org/fhir/ConceptMap/map2").value)
        self.assertEqual(inst.group[0].unmapped.url.as_json(), "http://example.org/fhir/ConceptMap/map2")
        self.assertEqual(inst.id.value, FHIRString("example2").value)
        self.assertEqual(inst.id.as_json(), "example2")
        self.assertEqual(inst.name.value, FHIRString("FHIR-exanple-2").value)
        self.assertEqual(inst.name.as_json(), "FHIR-exanple-2")
        self.assertEqual(inst.publisher.value, FHIRString("HL7, Inc").value)
        self.assertEqual(inst.publisher.as_json(), "HL7, Inc")
        self.assertEqual(inst.purpose.value, FHIRMarkdown("To illustrate mapping features").value)
        self.assertEqual(inst.purpose.as_json(), "To illustrate mapping features")
        self.assertEqual(inst.sourceUri.value, FHIRUri("http://example.org/fhir/example1").value)
        self.assertEqual(inst.sourceUri.as_json(), "http://example.org/fhir/example1")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.targetUri.value, FHIRUri("http://example.org/fhir/example2").value)
        self.assertEqual(inst.targetUri.as_json(), "http://example.org/fhir/example2")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("FHIR Example 2").value)
        self.assertEqual(inst.title.as_json(), "FHIR Example 2")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/ConceptMap/example2").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/ConceptMap/example2")
        self.assertEqual(inst.version.value, FHIRString("4.0.1").value)
        self.assertEqual(inst.version.as_json(), "4.0.1")

    def testConceptMap3(self):
        inst = self.instantiate_from('conceptmap-example-specimen-type.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ConceptMap instance')
        self.implConceptMap3(inst)

        js = inst.as_json()
        self.assertEqual("ConceptMap", js["resourceType"])
        inst2 = conceptmap.ConceptMap(js)
        self.implConceptMap3(inst2)

    def implConceptMap3(self, inst):
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("http://hl7.org/fhir").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "http://hl7.org/fhir")
        self.assertEqual(inst.contact[1].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[1].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[1].telecom[0].value.value, FHIRString("http://www.phconnect.org/group/laboratorymessagingcommunityofpractice/forum/attachment/download?id=3649725%3AUploadedFile%3A145786").value)
        self.assertEqual(inst.contact[1].telecom[0].value.as_json(), "http://www.phconnect.org/group/laboratorymessagingcommunityofpractice/forum/attachment/download?id=3649725%3AUploadedFile%3A145786")
        self.assertEqual(inst.date.value, FHIRDateTime("2013-07-25").value)
        self.assertEqual(inst.date.as_json(), "2013-07-25")
        self.assertFalse(inst.experimental)
        self.assertEqual(inst.group[0].element[0].code.value, FHIRCode("ACNE").value)
        self.assertEqual(inst.group[0].element[0].code.as_json(), "ACNE")
        self.assertEqual(inst.group[0].element[0].target[0].code.value, FHIRCode("309068002").value)
        self.assertEqual(inst.group[0].element[0].target[0].code.as_json(), "309068002")
        self.assertEqual(inst.group[0].element[0].target[0].equivalence.value, FHIRCode("equivalent").value)
        self.assertEqual(inst.group[0].element[0].target[0].equivalence.as_json(), "equivalent")
        self.assertEqual(inst.group[0].element[1].code.value, FHIRCode("ACNFLD").value)
        self.assertEqual(inst.group[0].element[1].code.as_json(), "ACNFLD")
        self.assertEqual(inst.group[0].element[1].target[0].code.value, FHIRCode("119323008").value)
        self.assertEqual(inst.group[0].element[1].target[0].code.as_json(), "119323008")
        self.assertEqual(inst.group[0].element[1].target[0].comment.value, FHIRString("HL7 term is a historical term. mapped to Pus").value)
        self.assertEqual(inst.group[0].element[1].target[0].comment.as_json(), "HL7 term is a historical term. mapped to Pus")
        self.assertEqual(inst.group[0].element[1].target[0].equivalence.value, FHIRCode("equivalent").value)
        self.assertEqual(inst.group[0].element[1].target[0].equivalence.as_json(), "equivalent")
        self.assertEqual(inst.group[0].element[1].target[0].product[0].property.value, FHIRUri("TypeModifier").value)
        self.assertEqual(inst.group[0].element[1].target[0].product[0].property.as_json(), "TypeModifier")
        self.assertEqual(inst.group[0].element[1].target[0].product[0].system.value, FHIRCanonical("http://snomed.info/sct").value)
        self.assertEqual(inst.group[0].element[1].target[0].product[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.group[0].element[1].target[0].product[0].value.value, FHIRString("47002008").value)
        self.assertEqual(inst.group[0].element[1].target[0].product[0].value.as_json(), "47002008")
        self.assertEqual(inst.group[0].element[2].code.value, FHIRCode("AIRS").value)
        self.assertEqual(inst.group[0].element[2].code.as_json(), "AIRS")
        self.assertEqual(inst.group[0].element[2].target[0].code.value, FHIRCode("446302006").value)
        self.assertEqual(inst.group[0].element[2].target[0].code.as_json(), "446302006")
        self.assertEqual(inst.group[0].element[2].target[0].equivalence.value, FHIRCode("equivalent").value)
        self.assertEqual(inst.group[0].element[2].target[0].equivalence.as_json(), "equivalent")
        self.assertEqual(inst.group[0].element[3].code.value, FHIRCode("ALL").value)
        self.assertEqual(inst.group[0].element[3].code.as_json(), "ALL")
        self.assertEqual(inst.group[0].element[3].target[0].code.value, FHIRCode("119376003").value)
        self.assertEqual(inst.group[0].element[3].target[0].code.as_json(), "119376003")
        self.assertEqual(inst.group[0].element[3].target[0].equivalence.value, FHIRCode("equivalent").value)
        self.assertEqual(inst.group[0].element[3].target[0].equivalence.as_json(), "equivalent")
        self.assertEqual(inst.group[0].element[3].target[0].product[0].property.value, FHIRUri("TypeModifier").value)
        self.assertEqual(inst.group[0].element[3].target[0].product[0].property.as_json(), "TypeModifier")
        self.assertEqual(inst.group[0].element[3].target[0].product[0].system.value, FHIRCanonical("http://snomed.info/sct").value)
        self.assertEqual(inst.group[0].element[3].target[0].product[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.group[0].element[3].target[0].product[0].value.value, FHIRString("7970006").value)
        self.assertEqual(inst.group[0].element[3].target[0].product[0].value.as_json(), "7970006")
        self.assertEqual(inst.group[0].element[4].code.value, FHIRCode("AMP").value)
        self.assertEqual(inst.group[0].element[4].code.as_json(), "AMP")
        self.assertEqual(inst.group[0].element[4].target[0].code.value, FHIRCode("408654003").value)
        self.assertEqual(inst.group[0].element[4].target[0].code.as_json(), "408654003")
        self.assertEqual(inst.group[0].element[4].target[0].equivalence.value, FHIRCode("equivalent").value)
        self.assertEqual(inst.group[0].element[4].target[0].equivalence.as_json(), "equivalent")
        self.assertEqual(inst.group[0].element[4].target[0].product[0].property.value, FHIRUri("http://snomed.info/id/246380002").value)
        self.assertEqual(inst.group[0].element[4].target[0].product[0].property.as_json(), "http://snomed.info/id/246380002")
        self.assertEqual(inst.group[0].element[4].target[0].product[0].system.value, FHIRCanonical("http://snomed.info/sct").value)
        self.assertEqual(inst.group[0].element[4].target[0].product[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.group[0].element[4].target[0].product[0].value.value, FHIRString("81723002").value)
        self.assertEqual(inst.group[0].element[4].target[0].product[0].value.as_json(), "81723002")
        self.assertEqual(inst.group[0].element[5].code.value, FHIRCode("ANGI").value)
        self.assertEqual(inst.group[0].element[5].code.as_json(), "ANGI")
        self.assertEqual(inst.group[0].element[5].target[0].code.value, FHIRCode("119312009").value)
        self.assertEqual(inst.group[0].element[5].target[0].code.as_json(), "119312009")
        self.assertEqual(inst.group[0].element[5].target[0].comment.value, FHIRString("TBD in detail").value)
        self.assertEqual(inst.group[0].element[5].target[0].comment.as_json(), "TBD in detail")
        self.assertEqual(inst.group[0].element[5].target[0].equivalence.value, FHIRCode("equivalent").value)
        self.assertEqual(inst.group[0].element[5].target[0].equivalence.as_json(), "equivalent")
        self.assertEqual(inst.group[0].element[6].code.value, FHIRCode("ARTC").value)
        self.assertEqual(inst.group[0].element[6].code.as_json(), "ARTC")
        self.assertEqual(inst.group[0].element[6].target[0].code.value, FHIRCode("119312009").value)
        self.assertEqual(inst.group[0].element[6].target[0].code.as_json(), "119312009")
        self.assertEqual(inst.group[0].element[6].target[0].comment.value, FHIRString("TBD in detail").value)
        self.assertEqual(inst.group[0].element[6].target[0].comment.as_json(), "TBD in detail")
        self.assertEqual(inst.group[0].element[6].target[0].equivalence.value, FHIRCode("equivalent").value)
        self.assertEqual(inst.group[0].element[6].target[0].equivalence.as_json(), "equivalent")
        self.assertEqual(inst.group[0].element[7].code.value, FHIRCode("ASERU").value)
        self.assertEqual(inst.group[0].element[7].code.as_json(), "ASERU")
        self.assertEqual(inst.group[0].element[7].target[0].comment.value, FHIRString("pending").value)
        self.assertEqual(inst.group[0].element[7].target[0].comment.as_json(), "pending")
        self.assertEqual(inst.group[0].element[7].target[0].equivalence.value, FHIRCode("unmatched").value)
        self.assertEqual(inst.group[0].element[7].target[0].equivalence.as_json(), "unmatched")
        self.assertEqual(inst.group[0].element[8].code.value, FHIRCode("ASP").value)
        self.assertEqual(inst.group[0].element[8].code.as_json(), "ASP")
        self.assertEqual(inst.group[0].element[8].target[0].code.value, FHIRCode("119295008").value)
        self.assertEqual(inst.group[0].element[8].target[0].code.as_json(), "119295008")
        self.assertEqual(inst.group[0].element[8].target[0].equivalence.value, FHIRCode("equivalent").value)
        self.assertEqual(inst.group[0].element[8].target[0].equivalence.as_json(), "equivalent")
        self.assertEqual(inst.group[0].element[8].target[0].product[0].property.value, FHIRUri("http://snomed.info/id/246380002").value)
        self.assertEqual(inst.group[0].element[8].target[0].product[0].property.as_json(), "http://snomed.info/id/246380002")
        self.assertEqual(inst.group[0].element[8].target[0].product[0].system.value, FHIRCanonical("http://snomed.info/sct").value)
        self.assertEqual(inst.group[0].element[8].target[0].product[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.group[0].element[8].target[0].product[0].value.value, FHIRString("14766002").value)
        self.assertEqual(inst.group[0].element[8].target[0].product[0].value.as_json(), "14766002")
        self.assertEqual(inst.group[0].element[9].code.value, FHIRCode("ATTE").value)
        self.assertEqual(inst.group[0].element[9].code.as_json(), "ATTE")
        self.assertEqual(inst.group[0].element[9].target[0].comment.value, FHIRString("TBD").value)
        self.assertEqual(inst.group[0].element[9].target[0].comment.as_json(), "TBD")
        self.assertEqual(inst.group[0].element[9].target[0].equivalence.value, FHIRCode("unmatched").value)
        self.assertEqual(inst.group[0].element[9].target[0].equivalence.as_json(), "unmatched")
        self.assertEqual(inst.group[0].source.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0487").value)
        self.assertEqual(inst.group[0].source.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0487")
        self.assertEqual(inst.group[0].target.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.group[0].target.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.id.value, FHIRString("102").value)
        self.assertEqual(inst.id.as_json(), "102")
        self.assertEqual(inst.name.value, FHIRString("Specimen mapping from v2 table 0487 to SNOMED CT").value)
        self.assertEqual(inst.name.as_json(), "Specimen mapping from v2 table 0487 to SNOMED CT")
        self.assertEqual(inst.publisher.value, FHIRString("FHIR project team (original source: LabMCoP)").value)
        self.assertEqual(inst.publisher.as_json(), "FHIR project team (original source: LabMCoP)")
        self.assertEqual(inst.sourceCanonical.value, FHIRCanonical("http://terminology.hl7.org/ValueSet/v2-0487").value)
        self.assertEqual(inst.sourceCanonical.as_json(), "http://terminology.hl7.org/ValueSet/v2-0487")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.targetCanonical.value, FHIRCanonical("http://snomed.info/sct?fhir_vs").value)
        self.assertEqual(inst.targetCanonical.as_json(), "http://snomed.info/sct?fhir_vs")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/ConceptMap/102").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/ConceptMap/102")
        self.assertEqual(inst.version.value, FHIRString("4.0.1").value)
        self.assertEqual(inst.version.as_json(), "4.0.1")


from fhirclient.models.fhirdatatypes import FHIRString, FHIRCode, FHIRMarkdown, FHIRDateTime, FHIRUri, FHIRCanonical