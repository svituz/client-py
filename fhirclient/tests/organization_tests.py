#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-25.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import organization

class OrganizationTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Organization", js["resourceType"])
        return organization.Organization(js)

    def testOrganization1(self):
        inst = self.instantiate_from('organization-example-mmanu.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Organization instance')
        self.implOrganization1(inst)

        js = inst.as_json()
        self.assertEqual("Organization", js["resourceType"])
        inst2 = organization.Organization(js)
        self.implOrganization1(inst2)

    def implOrganization1(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].country.value, FHIRString('Swizterland').value)
        self.assertEqual(inst.address[0].country.as_json(), 'Swizterland')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.name.value, FHIRString('Acme Corporation').value)
        self.assertEqual(inst.name.as_json(), 'Acme Corporation')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testOrganization2(self):
        inst = self.instantiate_from('organization-example-hl7pay.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Organization instance')
        self.implOrganization2(inst)

        js = inst.as_json()
        self.assertEqual("Organization", js["resourceType"])
        inst2 = organization.Organization(js)
        self.implOrganization2(inst2)

    def implOrganization2(self, inst):
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.name.value, FHIRString('HL7 Payer network').value)
        self.assertEqual(inst.name.as_json(), 'HL7 Payer network')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testOrganization3(self):
        inst = self.instantiate_from('organization-example-f003-burgers-ENT.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Organization instance')
        self.implOrganization3(inst)

        js = inst.as_json()
        self.assertEqual("Organization", js["resourceType"])
        inst2 = organization.Organization(js)
        self.implOrganization3(inst2)

    def implOrganization3(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].line[0].value, FHIRString('West Wing, floor 5').value)
        self.assertEqual(inst.address[0].line[0].as_json(), 'West Wing, floor 5')
        self.assertEqual(inst.contact[0].address.line[0].value, FHIRString('West Wing, floor 5').value)
        self.assertEqual(inst.contact[0].address.line[0].as_json(), 'West Wing, floor 5')
        self.assertEqual(inst.contact[0].name.text.value, FHIRString('mr. F. de Hond').value)
        self.assertEqual(inst.contact[0].name.text.as_json(), 'mr. F. de Hond')
        self.assertEqual(inst.contact[0].purpose.coding[0].code.value, FHIRCode('ADMIN').value)
        self.assertEqual(inst.contact[0].purpose.coding[0].code.as_json(), 'ADMIN')
        self.assertEqual(inst.contact[0].purpose.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/contactentity-type').value)
        self.assertEqual(inst.contact[0].purpose.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/contactentity-type')
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode('phone').value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), 'phone')
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString('022-655 7654').value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), '022-655 7654')
        self.assertEqual(inst.contact[0].telecom[1].system.value, FHIRCode('email').value)
        self.assertEqual(inst.contact[0].telecom[1].system.as_json(), 'email')
        self.assertEqual(inst.contact[0].telecom[1].value.value, FHIRString('KNO@burgersumc.nl').value)
        self.assertEqual(inst.contact[0].telecom[1].value.as_json(), 'KNO@burgersumc.nl')
        self.assertEqual(inst.contact[0].telecom[2].system.value, FHIRCode('fax').value)
        self.assertEqual(inst.contact[0].telecom[2].system.as_json(), 'fax')
        self.assertEqual(inst.contact[0].telecom[2].value.value, FHIRString('022-655 0998').value)
        self.assertEqual(inst.contact[0].telecom[2].value.as_json(), '022-655 0998')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.name.value, FHIRString('Burgers UMC Ear,Nose,Throat unit').value)
        self.assertEqual(inst.name.as_json(), 'Burgers UMC Ear,Nose,Throat unit')
        self.assertEqual(inst.telecom[0].system.value, FHIRCode('phone').value)
        self.assertEqual(inst.telecom[0].system.as_json(), 'phone')
        self.assertEqual(inst.telecom[0].value.value, FHIRString('022-655 6780').value)
        self.assertEqual(inst.telecom[0].value.as_json(), '022-655 6780')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode('dept').value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), 'dept')
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString('Hospital Department').value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), 'Hospital Department')
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/organization-type').value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/organization-type')

    def testOrganization4(self):
        inst = self.instantiate_from('organization-example-f002-burgers-card.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Organization instance')
        self.implOrganization4(inst)

        js = inst.as_json()
        self.assertEqual("Organization", js["resourceType"])
        inst2 = organization.Organization(js)
        self.implOrganization4(inst2)

    def implOrganization4(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].line[0].value, FHIRString('South Wing, floor 2').value)
        self.assertEqual(inst.address[0].line[0].as_json(), 'South Wing, floor 2')
        self.assertEqual(inst.contact[0].address.line[0].value, FHIRString('South Wing, floor 2').value)
        self.assertEqual(inst.contact[0].address.line[0].as_json(), 'South Wing, floor 2')
        self.assertEqual(inst.contact[0].name.text.value, FHIRString('mevr. D. de Haan').value)
        self.assertEqual(inst.contact[0].name.text.as_json(), 'mevr. D. de Haan')
        self.assertEqual(inst.contact[0].purpose.coding[0].code.value, FHIRCode('ADMIN').value)
        self.assertEqual(inst.contact[0].purpose.coding[0].code.as_json(), 'ADMIN')
        self.assertEqual(inst.contact[0].purpose.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/contactentity-type').value)
        self.assertEqual(inst.contact[0].purpose.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/contactentity-type')
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode('phone').value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), 'phone')
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString('022-655 2321').value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), '022-655 2321')
        self.assertEqual(inst.contact[0].telecom[1].system.value, FHIRCode('email').value)
        self.assertEqual(inst.contact[0].telecom[1].system.as_json(), 'email')
        self.assertEqual(inst.contact[0].telecom[1].value.value, FHIRString('cardio@burgersumc.nl').value)
        self.assertEqual(inst.contact[0].telecom[1].value.as_json(), 'cardio@burgersumc.nl')
        self.assertEqual(inst.contact[0].telecom[2].system.value, FHIRCode('fax').value)
        self.assertEqual(inst.contact[0].telecom[2].system.as_json(), 'fax')
        self.assertEqual(inst.contact[0].telecom[2].value.value, FHIRString('022-655 2322').value)
        self.assertEqual(inst.contact[0].telecom[2].value.as_json(), '022-655 2322')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.name.value, FHIRString('Burgers UMC Cardiology unit').value)
        self.assertEqual(inst.name.as_json(), 'Burgers UMC Cardiology unit')
        self.assertEqual(inst.telecom[0].system.value, FHIRCode('phone').value)
        self.assertEqual(inst.telecom[0].system.as_json(), 'phone')
        self.assertEqual(inst.telecom[0].value.value, FHIRString('022-655 2320').value)
        self.assertEqual(inst.telecom[0].value.as_json(), '022-655 2320')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode('dept').value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), 'dept')
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString('Hospital Department').value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), 'Hospital Department')
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/organization-type').value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/organization-type')

    def testOrganization5(self):
        inst = self.instantiate_from('organization-example-lab.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Organization instance')
        self.implOrganization5(inst)

        js = inst.as_json()
        self.assertEqual("Organization", js["resourceType"])
        inst2 = organization.Organization(js)
        self.implOrganization5(inst2)

    def implOrganization5(self, inst):
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://www.acme.org.au/units').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://www.acme.org.au/units')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('ClinLab').value)
        self.assertEqual(inst.identifier[0].value.as_json(), 'ClinLab')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.name.value, FHIRString('Clinical Lab').value)
        self.assertEqual(inst.name.as_json(), 'Clinical Lab')
        self.assertEqual(inst.telecom[0].system.value, FHIRCode('phone').value)
        self.assertEqual(inst.telecom[0].system.as_json(), 'phone')
        self.assertEqual(inst.telecom[0].use.value, FHIRCode('work').value)
        self.assertEqual(inst.telecom[0].use.as_json(), 'work')
        self.assertEqual(inst.telecom[0].value.value, FHIRString('+1 555 234 1234').value)
        self.assertEqual(inst.telecom[0].value.as_json(), '+1 555 234 1234')
        self.assertEqual(inst.telecom[1].system.value, FHIRCode('email').value)
        self.assertEqual(inst.telecom[1].system.as_json(), 'email')
        self.assertEqual(inst.telecom[1].use.value, FHIRCode('work').value)
        self.assertEqual(inst.telecom[1].use.as_json(), 'work')
        self.assertEqual(inst.telecom[1].value.value, FHIRString('contact@labs.acme.org').value)
        self.assertEqual(inst.telecom[1].value.as_json(), 'contact@labs.acme.org')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testOrganization6(self):
        inst = self.instantiate_from('organization-example-good-health-care.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Organization instance')
        self.implOrganization6(inst)

        js = inst.as_json()
        self.assertEqual("Organization", js["resourceType"])
        inst2 = organization.Organization(js)
        self.implOrganization6(inst2)

    def implOrganization6(self, inst):
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('urn:ietf:rfc:3986').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'urn:ietf:rfc:3986')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('2.16.840.1.113883.19.5').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '2.16.840.1.113883.19.5')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.name.value, FHIRString('Good Health Clinic').value)
        self.assertEqual(inst.name.as_json(), 'Good Health Clinic')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testOrganization7(self):
        inst = self.instantiate_from('organization-example-mihealth.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Organization instance')
        self.implOrganization7(inst)

        js = inst.as_json()
        self.assertEqual("Organization", js["resourceType"])
        inst2 = organization.Organization(js)
        self.implOrganization7(inst2)

    def implOrganization7(self, inst):
        self.assertEqual(inst.alias[0].value, FHIRString('Michigan State Department of Health').value)
        self.assertEqual(inst.alias[0].as_json(), 'Michigan State Department of Health')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://michigan.gov/state-dept-ids').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://michigan.gov/state-dept-ids')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('25').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '25')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.name.value, FHIRString('Michigan Health').value)
        self.assertEqual(inst.name.as_json(), 'Michigan Health')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testOrganization8(self):
        inst = self.instantiate_from('organization-example-f203-bumc.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Organization instance')
        self.implOrganization8(inst)

        js = inst.as_json()
        self.assertEqual("Organization", js["resourceType"])
        inst2 = organization.Organization(js)
        self.implOrganization8(inst2)

    def implOrganization8(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].city.value, FHIRString('Blijdorp').value)
        self.assertEqual(inst.address[0].city.as_json(), 'Blijdorp')
        self.assertEqual(inst.address[0].country.value, FHIRString('NLD').value)
        self.assertEqual(inst.address[0].country.as_json(), 'NLD')
        self.assertEqual(inst.address[0].line[0].value, FHIRString('apenrots 230').value)
        self.assertEqual(inst.address[0].line[0].as_json(), 'apenrots 230')
        self.assertEqual(inst.address[0].postalCode.value, FHIRString('3056BE').value)
        self.assertEqual(inst.address[0].postalCode.as_json(), '3056BE')
        self.assertEqual(inst.address[0].use.value, FHIRCode('work').value)
        self.assertEqual(inst.address[0].use.as_json(), 'work')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://www.zorgkaartnederland.nl/').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://www.zorgkaartnederland.nl/')
        self.assertEqual(inst.identifier[0].type.text.value, FHIRString('Zorginstelling naam').value)
        self.assertEqual(inst.identifier[0].type.text.as_json(), 'Zorginstelling naam')
        self.assertEqual(inst.identifier[0].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[0].use.as_json(), 'official')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('Blijdorp MC').value)
        self.assertEqual(inst.identifier[0].value.as_json(), 'Blijdorp MC')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.name.value, FHIRString('Blijdorp Medisch Centrum (BUMC)').value)
        self.assertEqual(inst.name.as_json(), 'Blijdorp Medisch Centrum (BUMC)')
        self.assertEqual(inst.telecom[0].system.value, FHIRCode('phone').value)
        self.assertEqual(inst.telecom[0].system.as_json(), 'phone')
        self.assertEqual(inst.telecom[0].use.value, FHIRCode('work').value)
        self.assertEqual(inst.telecom[0].use.as_json(), 'work')
        self.assertEqual(inst.telecom[0].value.value, FHIRString('+31107040704').value)
        self.assertEqual(inst.telecom[0].value.as_json(), '+31107040704')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode('405608006').value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), '405608006')
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString('Academic Medical Center').value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), 'Academic Medical Center')
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri('http://snomed.info/sct').value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), 'http://snomed.info/sct')
        self.assertEqual(inst.type[0].coding[1].code.value, FHIRCode('prov').value)
        self.assertEqual(inst.type[0].coding[1].code.as_json(), 'prov')
        self.assertEqual(inst.type[0].coding[1].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/organization-type').value)
        self.assertEqual(inst.type[0].coding[1].system.as_json(), 'http://terminology.hl7.org/CodeSystem/organization-type')

    def testOrganization9(self):
        inst = self.instantiate_from('organization-example-f201-aumc.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Organization instance')
        self.implOrganization9(inst)

        js = inst.as_json()
        self.assertEqual("Organization", js["resourceType"])
        inst2 = organization.Organization(js)
        self.implOrganization9(inst2)

    def implOrganization9(self, inst):
        self.assertTrue(inst.active)
        self.assertEqual(inst.address[0].city.value, FHIRString('Den Helder').value)
        self.assertEqual(inst.address[0].city.as_json(), 'Den Helder')
        self.assertEqual(inst.address[0].country.value, FHIRString('NLD').value)
        self.assertEqual(inst.address[0].country.as_json(), 'NLD')
        self.assertEqual(inst.address[0].line[0].value, FHIRString('Walvisbaai 3').value)
        self.assertEqual(inst.address[0].line[0].as_json(), 'Walvisbaai 3')
        self.assertEqual(inst.address[0].postalCode.value, FHIRString('2333ZA').value)
        self.assertEqual(inst.address[0].postalCode.as_json(), '2333ZA')
        self.assertEqual(inst.address[0].use.value, FHIRCode('work').value)
        self.assertEqual(inst.address[0].use.as_json(), 'work')
        self.assertEqual(inst.contact[0].address.city.value, FHIRString('Den helder').value)
        self.assertEqual(inst.contact[0].address.city.as_json(), 'Den helder')
        self.assertEqual(inst.contact[0].address.country.value, FHIRString('NLD').value)
        self.assertEqual(inst.contact[0].address.country.as_json(), 'NLD')
        self.assertEqual(inst.contact[0].address.line[0].value, FHIRString('Walvisbaai 3').value)
        self.assertEqual(inst.contact[0].address.line[0].as_json(), 'Walvisbaai 3')
        self.assertEqual(inst.contact[0].address.line[1].value, FHIRString('Gebouw 2').value)
        self.assertEqual(inst.contact[0].address.line[1].as_json(), 'Gebouw 2')
        self.assertEqual(inst.contact[0].address.postalCode.value, FHIRString('2333ZA').value)
        self.assertEqual(inst.contact[0].address.postalCode.as_json(), '2333ZA')
        self.assertEqual(inst.contact[0].name.family.value, FHIRString('Brand').value)
        self.assertEqual(inst.contact[0].name.family.as_json(), 'Brand')
        self.assertEqual(inst.contact[0].name.given[0].value, FHIRString('Ronald').value)
        self.assertEqual(inst.contact[0].name.given[0].as_json(), 'Ronald')
        self.assertEqual(inst.contact[0].name.prefix[0].value, FHIRString('Prof.Dr.').value)
        self.assertEqual(inst.contact[0].name.prefix[0].as_json(), 'Prof.Dr.')
        self.assertEqual(inst.contact[0].name.text.value, FHIRString('Professor Brand').value)
        self.assertEqual(inst.contact[0].name.text.as_json(), 'Professor Brand')
        self.assertEqual(inst.contact[0].name.use.value, FHIRCode('official').value)
        self.assertEqual(inst.contact[0].name.use.as_json(), 'official')
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode('phone').value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), 'phone')
        self.assertEqual(inst.contact[0].telecom[0].use.value, FHIRCode('work').value)
        self.assertEqual(inst.contact[0].telecom[0].use.as_json(), 'work')
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString('+31715269702').value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), '+31715269702')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://www.zorgkaartnederland.nl/').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://www.zorgkaartnederland.nl/')
        self.assertEqual(inst.identifier[0].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[0].use.as_json(), 'official')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('Artis University Medical Center').value)
        self.assertEqual(inst.identifier[0].value.as_json(), 'Artis University Medical Center')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.name.value, FHIRString('Artis University Medical Center (AUMC)').value)
        self.assertEqual(inst.name.as_json(), 'Artis University Medical Center (AUMC)')
        self.assertEqual(inst.telecom[0].system.value, FHIRCode('phone').value)
        self.assertEqual(inst.telecom[0].system.as_json(), 'phone')
        self.assertEqual(inst.telecom[0].use.value, FHIRCode('work').value)
        self.assertEqual(inst.telecom[0].use.as_json(), 'work')
        self.assertEqual(inst.telecom[0].value.value, FHIRString('+31715269111').value)
        self.assertEqual(inst.telecom[0].value.as_json(), '+31715269111')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode('405608006').value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), '405608006')
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString('Academic Medical Center').value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), 'Academic Medical Center')
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri('http://snomed.info/sct').value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), 'http://snomed.info/sct')
        self.assertEqual(inst.type[0].coding[1].code.value, FHIRCode('V6').value)
        self.assertEqual(inst.type[0].coding[1].code.as_json(), 'V6')
        self.assertEqual(inst.type[0].coding[1].display.value, FHIRString('University Medical Hospital').value)
        self.assertEqual(inst.type[0].coding[1].display.as_json(), 'University Medical Hospital')
        self.assertEqual(inst.type[0].coding[1].system.value, FHIRUri('urn:oid:2.16.840.1.113883.2.4.15.1060').value)
        self.assertEqual(inst.type[0].coding[1].system.as_json(), 'urn:oid:2.16.840.1.113883.2.4.15.1060')
        self.assertEqual(inst.type[0].coding[2].code.value, FHIRCode('prov').value)
        self.assertEqual(inst.type[0].coding[2].code.as_json(), 'prov')
        self.assertEqual(inst.type[0].coding[2].display.value, FHIRString('Healthcare Provider').value)
        self.assertEqual(inst.type[0].coding[2].display.as_json(), 'Healthcare Provider')
        self.assertEqual(inst.type[0].coding[2].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/organization-type').value)
        self.assertEqual(inst.type[0].coding[2].system.as_json(), 'http://terminology.hl7.org/CodeSystem/organization-type')

    def testOrganization10(self):
        inst = self.instantiate_from('organization-example-f001-burgers.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Organization instance')
        self.implOrganization10(inst)

        js = inst.as_json()
        self.assertEqual("Organization", js["resourceType"])
        inst2 = organization.Organization(js)
        self.implOrganization10(inst2)

    def implOrganization10(self, inst):
        self.assertEqual(inst.address[0].city.value, FHIRString('Den Burg').value)
        self.assertEqual(inst.address[0].city.as_json(), 'Den Burg')
        self.assertEqual(inst.address[0].country.value, FHIRString('NLD').value)
        self.assertEqual(inst.address[0].country.as_json(), 'NLD')
        self.assertEqual(inst.address[0].line[0].value, FHIRString('Galapagosweg 91').value)
        self.assertEqual(inst.address[0].line[0].as_json(), 'Galapagosweg 91')
        self.assertEqual(inst.address[0].postalCode.value, FHIRString('9105 PZ').value)
        self.assertEqual(inst.address[0].postalCode.as_json(), '9105 PZ')
        self.assertEqual(inst.address[0].use.value, FHIRCode('work').value)
        self.assertEqual(inst.address[0].use.as_json(), 'work')
        self.assertEqual(inst.address[1].city.value, FHIRString('Den Burg').value)
        self.assertEqual(inst.address[1].city.as_json(), 'Den Burg')
        self.assertEqual(inst.address[1].country.value, FHIRString('NLD').value)
        self.assertEqual(inst.address[1].country.as_json(), 'NLD')
        self.assertEqual(inst.address[1].line[0].value, FHIRString('PO Box 2311').value)
        self.assertEqual(inst.address[1].line[0].as_json(), 'PO Box 2311')
        self.assertEqual(inst.address[1].postalCode.value, FHIRString('9100 AA').value)
        self.assertEqual(inst.address[1].postalCode.as_json(), '9100 AA')
        self.assertEqual(inst.address[1].use.value, FHIRCode('work').value)
        self.assertEqual(inst.address[1].use.as_json(), 'work')
        self.assertEqual(inst.contact[0].purpose.coding[0].code.value, FHIRCode('PRESS').value)
        self.assertEqual(inst.contact[0].purpose.coding[0].code.as_json(), 'PRESS')
        self.assertEqual(inst.contact[0].purpose.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/contactentity-type').value)
        self.assertEqual(inst.contact[0].purpose.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/contactentity-type')
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode('phone').value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), 'phone')
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString('022-655 2334').value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), '022-655 2334')
        self.assertEqual(inst.contact[1].purpose.coding[0].code.value, FHIRCode('PATINF').value)
        self.assertEqual(inst.contact[1].purpose.coding[0].code.as_json(), 'PATINF')
        self.assertEqual(inst.contact[1].purpose.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/contactentity-type').value)
        self.assertEqual(inst.contact[1].purpose.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/contactentity-type')
        self.assertEqual(inst.contact[1].telecom[0].system.value, FHIRCode('phone').value)
        self.assertEqual(inst.contact[1].telecom[0].system.as_json(), 'phone')
        self.assertEqual(inst.contact[1].telecom[0].value.value, FHIRString('022-655 2335').value)
        self.assertEqual(inst.contact[1].telecom[0].value.as_json(), '022-655 2335')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('urn:oid:2.16.528.1').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'urn:oid:2.16.528.1')
        self.assertEqual(inst.identifier[0].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[0].use.as_json(), 'official')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('91654').value)
        self.assertEqual(inst.identifier[0].value.as_json(), '91654')
        self.assertEqual(inst.identifier[1].system.value, FHIRUri('urn:oid:2.16.840.1.113883.2.4.6.1').value)
        self.assertEqual(inst.identifier[1].system.as_json(), 'urn:oid:2.16.840.1.113883.2.4.6.1')
        self.assertEqual(inst.identifier[1].use.value, FHIRCode('usual').value)
        self.assertEqual(inst.identifier[1].use.as_json(), 'usual')
        self.assertEqual(inst.identifier[1].value.value, FHIRString('17-0112278').value)
        self.assertEqual(inst.identifier[1].value.as_json(), '17-0112278')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.name.value, FHIRString('Burgers University Medical Center').value)
        self.assertEqual(inst.name.as_json(), 'Burgers University Medical Center')
        self.assertEqual(inst.telecom[0].system.value, FHIRCode('phone').value)
        self.assertEqual(inst.telecom[0].system.as_json(), 'phone')
        self.assertEqual(inst.telecom[0].use.value, FHIRCode('work').value)
        self.assertEqual(inst.telecom[0].use.as_json(), 'work')
        self.assertEqual(inst.telecom[0].value.value, FHIRString('022-655 2300').value)
        self.assertEqual(inst.telecom[0].value.as_json(), '022-655 2300')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode('V6').value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), 'V6')
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString('University Medical Hospital').value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), 'University Medical Hospital')
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri('urn:oid:2.16.840.1.113883.2.4.15.1060').value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), 'urn:oid:2.16.840.1.113883.2.4.15.1060')
        self.assertEqual(inst.type[0].coding[1].code.value, FHIRCode('prov').value)
        self.assertEqual(inst.type[0].coding[1].code.as_json(), 'prov')
        self.assertEqual(inst.type[0].coding[1].display.value, FHIRString('Healthcare Provider').value)
        self.assertEqual(inst.type[0].coding[1].display.as_json(), 'Healthcare Provider')
        self.assertEqual(inst.type[0].coding[1].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/organization-type').value)
        self.assertEqual(inst.type[0].coding[1].system.as_json(), 'http://terminology.hl7.org/CodeSystem/organization-type')


from fhirclient.models.fhirdatatypes import FHIRString, FHIRCode, FHIRUri