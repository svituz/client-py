#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import encounter

class EncounterTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Encounter", js["resourceType"])
        return encounter.Encounter(js)

    def testEncounter1(self):
        inst = self.instantiate_from('encounter-example-f001-heart.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Encounter instance')
        self.implEncounter1(inst)

        js = inst.as_json()
        self.assertEqual("Encounter", js["resourceType"])
        inst2 = encounter.Encounter(js)
        self.implEncounter1(inst2)

    def implEncounter1(self, inst):
        self.assertEqual(inst.class_fhir.code.value, FHIRCode("AMB").value)
        self.assertEqual(inst.class_fhir.code.as_json(), "AMB")
        self.assertEqual(inst.class_fhir.display.value, FHIRString("ambulatory").value)
        self.assertEqual(inst.class_fhir.display.as_json(), "ambulatory")
        self.assertEqual(inst.class_fhir.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.class_fhir.system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].code.value, FHIRCode("305956004").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].code.as_json(), "305956004")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].display.value, FHIRString("Referral by physician").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].display.as_json(), "Referral by physician")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].code.value, FHIRCode("306689006").value)
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].code.as_json(), "306689006")
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].display.value, FHIRString("Discharge to home").value)
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].display.as_json(), "Discharge to home")
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.system.value, FHIRUri("http://www.amc.nl/zorgportal/identifiers/pre-admissions").value)
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.system.as_json(), "http://www.amc.nl/zorgportal/identifiers/pre-admissions")
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.use.value, FHIRCode("official").value)
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.use.as_json(), "official")
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.value.value, FHIRString("93042").value)
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.value.as_json(), "93042")
        self.assertEqual(inst.id.value, FHIRString("f001").value)
        self.assertEqual(inst.id.as_json(), "f001")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.amc.nl/zorgportal/identifiers/visits").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.amc.nl/zorgportal/identifiers/visits")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("v1451").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "v1451")
        self.assertEqual(inst.length.code.value, FHIRCode("min").value)
        self.assertEqual(inst.length.code.as_json(), "min")
        self.assertEqual(inst.length.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.length.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.length.unit.value, FHIRString("min").value)
        self.assertEqual(inst.length.unit.as_json(), "min")
        self.assertEqual(inst.length.value, 140)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode("310361003").value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), "310361003")
        self.assertEqual(inst.priority.coding[0].display.value, FHIRString("Non-urgent cardiological admission").value)
        self.assertEqual(inst.priority.coding[0].display.as_json(), "Non-urgent cardiological admission")
        self.assertEqual(inst.priority.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.priority.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.reasonCode[0].coding[0].code.value, FHIRCode("34068001").value)
        self.assertEqual(inst.reasonCode[0].coding[0].code.as_json(), "34068001")
        self.assertEqual(inst.reasonCode[0].coding[0].display.value, FHIRString("Heart valve replacement").value)
        self.assertEqual(inst.reasonCode[0].coding[0].display.as_json(), "Heart valve replacement")
        self.assertEqual(inst.reasonCode[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.reasonCode[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.status.value, FHIRCode("finished").value)
        self.assertEqual(inst.status.as_json(), "finished")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode("270427003").value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), "270427003")
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString("Patient-initiated encounter").value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), "Patient-initiated encounter")
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), "http://snomed.info/sct")

    def testEncounter2(self):
        inst = self.instantiate_from('encounter-example-emerg.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Encounter instance')
        self.implEncounter2(inst)

        js = inst.as_json()
        self.assertEqual("Encounter", js["resourceType"])
        inst2 = encounter.Encounter(js)
        self.implEncounter2(inst2)

    def implEncounter2(self, inst):
        self.assertEqual(inst.classHistory[0].class_fhir.code.value, FHIRCode("EMER").value)
        self.assertEqual(inst.classHistory[0].class_fhir.code.as_json(), "EMER")
        self.assertEqual(inst.classHistory[0].class_fhir.display.value, FHIRString("emergency").value)
        self.assertEqual(inst.classHistory[0].class_fhir.display.as_json(), "emergency")
        self.assertEqual(inst.classHistory[0].class_fhir.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.classHistory[0].class_fhir.system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.classHistory[0].period.end.value, FHIRDateTime("2017-02-01T09:27:00+10:00").value)
        self.assertEqual(inst.classHistory[0].period.end.as_json(), "2017-02-01T09:27:00+10:00")
        self.assertEqual(inst.classHistory[0].period.start.value, FHIRDateTime("2017-02-01T07:15:00+10:00").value)
        self.assertEqual(inst.classHistory[0].period.start.as_json(), "2017-02-01T07:15:00+10:00")
        self.assertEqual(inst.classHistory[1].class_fhir.code.value, FHIRCode("IMP").value)
        self.assertEqual(inst.classHistory[1].class_fhir.code.as_json(), "IMP")
        self.assertEqual(inst.classHistory[1].class_fhir.display.value, FHIRString("inpatient encounter").value)
        self.assertEqual(inst.classHistory[1].class_fhir.display.as_json(), "inpatient encounter")
        self.assertEqual(inst.classHistory[1].class_fhir.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.classHistory[1].class_fhir.system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.classHistory[1].period.start.value, FHIRDateTime("2017-02-01T09:27:00+10:00").value)
        self.assertEqual(inst.classHistory[1].period.start.as_json(), "2017-02-01T09:27:00+10:00")
        self.assertEqual(inst.class_fhir.code.value, FHIRCode("IMP").value)
        self.assertEqual(inst.class_fhir.code.as_json(), "IMP")
        self.assertEqual(inst.class_fhir.display.value, FHIRString("inpatient encounter").value)
        self.assertEqual(inst.class_fhir.display.as_json(), "inpatient encounter")
        self.assertEqual(inst.class_fhir.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.class_fhir.system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].code.value, FHIRCode("emd").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].code.as_json(), "emd")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].display.value, FHIRString("From accident/emergency department").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].display.as_json(), "From accident/emergency department")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/admit-source").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/admit-source")
        self.assertEqual(inst.id.value, FHIRString("emerg").value)
        self.assertEqual(inst.id.as_json(), "emerg")
        self.assertEqual(inst.location[0].period.end.value, FHIRDateTime("2017-02-01T08:45:00+10:00").value)
        self.assertEqual(inst.location[0].period.end.as_json(), "2017-02-01T08:45:00+10:00")
        self.assertEqual(inst.location[0].period.start.value, FHIRDateTime("2017-02-01T07:15:00+10:00").value)
        self.assertEqual(inst.location[0].period.start.as_json(), "2017-02-01T07:15:00+10:00")
        self.assertEqual(inst.location[0].status.value, FHIRCode("active").value)
        self.assertEqual(inst.location[0].status.as_json(), "active")
        self.assertEqual(inst.location[1].period.end.value, FHIRDateTime("2017-02-01T09:27:00+10:00").value)
        self.assertEqual(inst.location[1].period.end.as_json(), "2017-02-01T09:27:00+10:00")
        self.assertEqual(inst.location[1].period.start.value, FHIRDateTime("2017-02-01T08:45:00+10:00").value)
        self.assertEqual(inst.location[1].period.start.as_json(), "2017-02-01T08:45:00+10:00")
        self.assertEqual(inst.location[1].status.value, FHIRCode("active").value)
        self.assertEqual(inst.location[1].status.as_json(), "active")
        self.assertEqual(inst.location[2].period.end.value, FHIRDateTime("2017-02-01T12:15:00+10:00").value)
        self.assertEqual(inst.location[2].period.end.as_json(), "2017-02-01T12:15:00+10:00")
        self.assertEqual(inst.location[2].period.start.value, FHIRDateTime("2017-02-01T09:27:00+10:00").value)
        self.assertEqual(inst.location[2].period.start.as_json(), "2017-02-01T09:27:00+10:00")
        self.assertEqual(inst.location[2].status.value, FHIRCode("active").value)
        self.assertEqual(inst.location[2].status.as_json(), "active")
        self.assertEqual(inst.location[3].period.end.value, FHIRDateTime("2017-02-01T12:45:00+10:00").value)
        self.assertEqual(inst.location[3].period.end.as_json(), "2017-02-01T12:45:00+10:00")
        self.assertEqual(inst.location[3].period.start.value, FHIRDateTime("2017-02-01T12:15:00+10:00").value)
        self.assertEqual(inst.location[3].period.start.as_json(), "2017-02-01T12:15:00+10:00")
        self.assertEqual(inst.location[3].status.value, FHIRCode("reserved").value)
        self.assertEqual(inst.location[3].status.as_json(), "reserved")
        self.assertEqual(inst.location[4].period.start.value, FHIRDateTime("2017-02-01T12:45:00+10:00").value)
        self.assertEqual(inst.location[4].period.start.as_json(), "2017-02-01T12:45:00+10:00")
        self.assertEqual(inst.location[4].status.value, FHIRCode("active").value)
        self.assertEqual(inst.location[4].status.as_json(), "active")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.period.start.value, FHIRDateTime("2017-02-01T07:15:00+10:00").value)
        self.assertEqual(inst.period.start.as_json(), "2017-02-01T07:15:00+10:00")
        self.assertEqual(inst.status.value, FHIRCode("in-progress").value)
        self.assertEqual(inst.status.as_json(), "in-progress")
        self.assertEqual(inst.statusHistory[0].period.end.value, FHIRDateTime("2017-02-01T07:35:00+10:00").value)
        self.assertEqual(inst.statusHistory[0].period.end.as_json(), "2017-02-01T07:35:00+10:00")
        self.assertEqual(inst.statusHistory[0].period.start.value, FHIRDateTime("2017-02-01T07:15:00+10:00").value)
        self.assertEqual(inst.statusHistory[0].period.start.as_json(), "2017-02-01T07:15:00+10:00")
        self.assertEqual(inst.statusHistory[0].status.value, FHIRCode("arrived").value)
        self.assertEqual(inst.statusHistory[0].status.as_json(), "arrived")
        self.assertEqual(inst.statusHistory[1].period.end.value, FHIRDateTime("2017-02-01T08:45:00+10:00").value)
        self.assertEqual(inst.statusHistory[1].period.end.as_json(), "2017-02-01T08:45:00+10:00")
        self.assertEqual(inst.statusHistory[1].period.start.value, FHIRDateTime("2017-02-01T07:35:00+10:00").value)
        self.assertEqual(inst.statusHistory[1].period.start.as_json(), "2017-02-01T07:35:00+10:00")
        self.assertEqual(inst.statusHistory[1].status.value, FHIRCode("triaged").value)
        self.assertEqual(inst.statusHistory[1].status.as_json(), "triaged")
        self.assertEqual(inst.statusHistory[2].period.end.value, FHIRDateTime("2017-02-01T12:15:00+10:00").value)
        self.assertEqual(inst.statusHistory[2].period.end.as_json(), "2017-02-01T12:15:00+10:00")
        self.assertEqual(inst.statusHistory[2].period.start.value, FHIRDateTime("2017-02-01T08:45:00+10:00").value)
        self.assertEqual(inst.statusHistory[2].period.start.as_json(), "2017-02-01T08:45:00+10:00")
        self.assertEqual(inst.statusHistory[2].status.value, FHIRCode("in-progress").value)
        self.assertEqual(inst.statusHistory[2].status.as_json(), "in-progress")
        self.assertEqual(inst.statusHistory[3].period.end.value, FHIRDateTime("2017-02-01T12:45:00+10:00").value)
        self.assertEqual(inst.statusHistory[3].period.end.as_json(), "2017-02-01T12:45:00+10:00")
        self.assertEqual(inst.statusHistory[3].period.start.value, FHIRDateTime("2017-02-01T12:15:00+10:00").value)
        self.assertEqual(inst.statusHistory[3].period.start.as_json(), "2017-02-01T12:15:00+10:00")
        self.assertEqual(inst.statusHistory[3].status.value, FHIRCode("onleave").value)
        self.assertEqual(inst.statusHistory[3].status.as_json(), "onleave")
        self.assertEqual(inst.statusHistory[4].period.start.value, FHIRDateTime("2017-02-01T12:45:00+10:00").value)
        self.assertEqual(inst.statusHistory[4].period.start.as_json(), "2017-02-01T12:45:00+10:00")
        self.assertEqual(inst.statusHistory[4].status.value, FHIRCode("in-progress").value)
        self.assertEqual(inst.statusHistory[4].status.as_json(), "in-progress")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Emergency visit that escalated into inpatient patient @example</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Emergency visit that escalated into inpatient patient @example</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testEncounter3(self):
        inst = self.instantiate_from('encounter-example-f201-20130404.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Encounter instance')
        self.implEncounter3(inst)

        js = inst.as_json()
        self.assertEqual("Encounter", js["resourceType"])
        inst2 = encounter.Encounter(js)
        self.implEncounter3(inst2)

    def implEncounter3(self, inst):
        self.assertEqual(inst.class_fhir.code.value, FHIRCode("AMB").value)
        self.assertEqual(inst.class_fhir.code.as_json(), "AMB")
        self.assertEqual(inst.class_fhir.display.value, FHIRString("ambulatory").value)
        self.assertEqual(inst.class_fhir.display.as_json(), "ambulatory")
        self.assertEqual(inst.class_fhir.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.class_fhir.system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.id.value, FHIRString("f201").value)
        self.assertEqual(inst.id.as_json(), "f201")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("temp").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "temp")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("Encounter_Roel_20130404").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "Encounter_Roel_20130404")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode("17621005").value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), "17621005")
        self.assertEqual(inst.priority.coding[0].display.value, FHIRString("Normal").value)
        self.assertEqual(inst.priority.coding[0].display.as_json(), "Normal")
        self.assertEqual(inst.priority.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.priority.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.reasonCode[0].text.value, FHIRString("The patient had fever peaks over the last couple of days. He is worried about these peaks.").value)
        self.assertEqual(inst.reasonCode[0].text.as_json(), "The patient had fever peaks over the last couple of days. He is worried about these peaks.")
        self.assertEqual(inst.status.value, FHIRCode("finished").value)
        self.assertEqual(inst.status.as_json(), "finished")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode("11429006").value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), "11429006")
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString("Consultation").value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), "Consultation")
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), "http://snomed.info/sct")

    def testEncounter4(self):
        inst = self.instantiate_from('encounter-example-xcda.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Encounter instance')
        self.implEncounter4(inst)

        js = inst.as_json()
        self.assertEqual("Encounter", js["resourceType"])
        inst2 = encounter.Encounter(js)
        self.implEncounter4(inst2)

    def implEncounter4(self, inst):
        self.assertEqual(inst.class_fhir.code.value, FHIRCode("AMB").value)
        self.assertEqual(inst.class_fhir.code.as_json(), "AMB")
        self.assertEqual(inst.class_fhir.display.value, FHIRString("ambulatory").value)
        self.assertEqual(inst.class_fhir.display.as_json(), "ambulatory")
        self.assertEqual(inst.class_fhir.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.class_fhir.system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.id.value, FHIRString("xcda").value)
        self.assertEqual(inst.id.as_json(), "xcda")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://healthcare.example.org/identifiers/enocunter").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://healthcare.example.org/identifiers/enocunter")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("1234213.52345873").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "1234213.52345873")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.reasonCode[0].coding[0].code.value, FHIRCode("T-D8200").value)
        self.assertEqual(inst.reasonCode[0].coding[0].code.as_json(), "T-D8200")
        self.assertEqual(inst.reasonCode[0].coding[0].display.value, FHIRString("Arm").value)
        self.assertEqual(inst.reasonCode[0].coding[0].display.as_json(), "Arm")
        self.assertEqual(inst.reasonCode[0].coding[0].system.value, FHIRUri("http://ihe.net/xds/connectathon/eventCodes").value)
        self.assertEqual(inst.reasonCode[0].coding[0].system.as_json(), "http://ihe.net/xds/connectathon/eventCodes")
        self.assertEqual(inst.status.value, FHIRCode("finished").value)
        self.assertEqual(inst.status.as_json(), "finished")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testEncounter5(self):
        inst = self.instantiate_from('encounter-example-f202-20130128.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Encounter instance')
        self.implEncounter5(inst)

        js = inst.as_json()
        self.assertEqual("Encounter", js["resourceType"])
        inst2 = encounter.Encounter(js)
        self.implEncounter5(inst2)

    def implEncounter5(self, inst):
        self.assertEqual(inst.class_fhir.code.value, FHIRCode("AMB").value)
        self.assertEqual(inst.class_fhir.code.as_json(), "AMB")
        self.assertEqual(inst.class_fhir.display.value, FHIRString("ambulatory").value)
        self.assertEqual(inst.class_fhir.display.as_json(), "ambulatory")
        self.assertEqual(inst.class_fhir.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.class_fhir.system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.diagnosis[0].rank.value, FHIRPositiveInt('2').value)
        self.assertEqual(inst.diagnosis[0].rank.as_json(), 2)
        self.assertEqual(inst.diagnosis[0].use.coding[0].code.value, FHIRCode("AD").value)
        self.assertEqual(inst.diagnosis[0].use.coding[0].code.as_json(), "AD")
        self.assertEqual(inst.diagnosis[0].use.coding[0].display.value, FHIRString("Admission diagnosis").value)
        self.assertEqual(inst.diagnosis[0].use.coding[0].display.as_json(), "Admission diagnosis")
        self.assertEqual(inst.diagnosis[0].use.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/diagnosis-role").value)
        self.assertEqual(inst.diagnosis[0].use.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/diagnosis-role")
        self.assertEqual(inst.diagnosis[1].rank.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.diagnosis[1].rank.as_json(), 1)
        self.assertEqual(inst.diagnosis[1].use.coding[0].code.value, FHIRCode("CC").value)
        self.assertEqual(inst.diagnosis[1].use.coding[0].code.as_json(), "CC")
        self.assertEqual(inst.diagnosis[1].use.coding[0].display.value, FHIRString("Chief complaint").value)
        self.assertEqual(inst.diagnosis[1].use.coding[0].display.as_json(), "Chief complaint")
        self.assertEqual(inst.diagnosis[1].use.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/diagnosis-role").value)
        self.assertEqual(inst.diagnosis[1].use.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/diagnosis-role")
        self.assertEqual(inst.id.value, FHIRString("f202").value)
        self.assertEqual(inst.id.as_json(), "f202")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("temp").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "temp")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("Encounter_Roel_20130128").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "Encounter_Roel_20130128")
        self.assertEqual(inst.length.code.value, FHIRCode("min").value)
        self.assertEqual(inst.length.code.as_json(), "min")
        self.assertEqual(inst.length.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.length.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.length.unit.value, FHIRString("minutes").value)
        self.assertEqual(inst.length.unit.as_json(), "minutes")
        self.assertEqual(inst.length.value, 56)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode("103391001").value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), "103391001")
        self.assertEqual(inst.priority.coding[0].display.value, FHIRString("Urgent").value)
        self.assertEqual(inst.priority.coding[0].display.as_json(), "Urgent")
        self.assertEqual(inst.priority.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.priority.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.reasonCode[0].text.value, FHIRString("The patient is treated for a tumor.").value)
        self.assertEqual(inst.reasonCode[0].text.as_json(), "The patient is treated for a tumor.")
        self.assertEqual(inst.status.value, FHIRCode("finished").value)
        self.assertEqual(inst.status.as_json(), "finished")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode("367336001").value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), "367336001")
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString("Chemotherapy").value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), "Chemotherapy")
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), "http://snomed.info/sct")

    def testEncounter6(self):
        inst = self.instantiate_from('encounter-example-home.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Encounter instance')
        self.implEncounter6(inst)

        js = inst.as_json()
        self.assertEqual("Encounter", js["resourceType"])
        inst2 = encounter.Encounter(js)
        self.implEncounter6(inst2)

    def implEncounter6(self, inst):
        self.assertEqual(inst.class_fhir.code.value, FHIRCode("HH").value)
        self.assertEqual(inst.class_fhir.code.as_json(), "HH")
        self.assertEqual(inst.class_fhir.display.value, FHIRString("home health").value)
        self.assertEqual(inst.class_fhir.display.as_json(), "home health")
        self.assertEqual(inst.class_fhir.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.class_fhir.system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.contained[0].id.value, FHIRString("home").value)
        self.assertEqual(inst.contained[0].id.as_json(), "home")
        self.assertEqual(inst.id.value, FHIRString("home").value)
        self.assertEqual(inst.id.as_json(), "home")
        self.assertEqual(inst.location[0].period.end.value, FHIRDateTime("2015-01-17T16:30:00+10:00").value)
        self.assertEqual(inst.location[0].period.end.as_json(), "2015-01-17T16:30:00+10:00")
        self.assertEqual(inst.location[0].period.start.value, FHIRDateTime("2015-01-17T16:00:00+10:00").value)
        self.assertEqual(inst.location[0].period.start.as_json(), "2015-01-17T16:00:00+10:00")
        self.assertEqual(inst.location[0].status.value, FHIRCode("completed").value)
        self.assertEqual(inst.location[0].status.as_json(), "completed")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.participant[0].period.end.value, FHIRDateTime("2015-01-17T16:30:00+10:00").value)
        self.assertEqual(inst.participant[0].period.end.as_json(), "2015-01-17T16:30:00+10:00")
        self.assertEqual(inst.participant[0].period.start.value, FHIRDateTime("2015-01-17T16:00:00+10:00").value)
        self.assertEqual(inst.participant[0].period.start.as_json(), "2015-01-17T16:00:00+10:00")
        self.assertEqual(inst.period.end.value, FHIRDateTime("2015-01-17T16:30:00+10:00").value)
        self.assertEqual(inst.period.end.as_json(), "2015-01-17T16:30:00+10:00")
        self.assertEqual(inst.period.start.value, FHIRDateTime("2015-01-17T16:00:00+10:00").value)
        self.assertEqual(inst.period.start.as_json(), "2015-01-17T16:00:00+10:00")
        self.assertEqual(inst.status.value, FHIRCode("finished").value)
        self.assertEqual(inst.status.as_json(), "finished")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Encounter with patient @example who is at home</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Encounter with patient @example who is at home</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testEncounter7(self):
        inst = self.instantiate_from('encounter-example-f002-lung.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Encounter instance')
        self.implEncounter7(inst)

        js = inst.as_json()
        self.assertEqual("Encounter", js["resourceType"])
        inst2 = encounter.Encounter(js)
        self.implEncounter7(inst2)

    def implEncounter7(self, inst):
        self.assertEqual(inst.class_fhir.code.value, FHIRCode("AMB").value)
        self.assertEqual(inst.class_fhir.code.as_json(), "AMB")
        self.assertEqual(inst.class_fhir.display.value, FHIRString("ambulatory").value)
        self.assertEqual(inst.class_fhir.display.as_json(), "ambulatory")
        self.assertEqual(inst.class_fhir.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.class_fhir.system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].code.value, FHIRCode("305997006").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].code.as_json(), "305997006")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].display.value, FHIRString("Referral by radiologist").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].display.as_json(), "Referral by radiologist")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].code.value, FHIRCode("306689006").value)
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].code.as_json(), "306689006")
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].display.value, FHIRString("Discharge to home").value)
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].display.as_json(), "Discharge to home")
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.system.value, FHIRUri("http://www.bmc.nl/zorgportal/identifiers/pre-admissions").value)
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.system.as_json(), "http://www.bmc.nl/zorgportal/identifiers/pre-admissions")
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.use.value, FHIRCode("official").value)
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.use.as_json(), "official")
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.value.value, FHIRString("98682").value)
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.value.as_json(), "98682")
        self.assertEqual(inst.id.value, FHIRString("f002").value)
        self.assertEqual(inst.id.as_json(), "f002")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.bmc.nl/zorgportal/identifiers/encounters").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.bmc.nl/zorgportal/identifiers/encounters")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("v3251").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "v3251")
        self.assertEqual(inst.length.code.value, FHIRCode("min").value)
        self.assertEqual(inst.length.code.as_json(), "min")
        self.assertEqual(inst.length.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.length.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.length.unit.value, FHIRString("min").value)
        self.assertEqual(inst.length.unit.as_json(), "min")
        self.assertEqual(inst.length.value, 140)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode("103391001").value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), "103391001")
        self.assertEqual(inst.priority.coding[0].display.value, FHIRString("Urgent").value)
        self.assertEqual(inst.priority.coding[0].display.as_json(), "Urgent")
        self.assertEqual(inst.priority.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.priority.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.reasonCode[0].coding[0].code.value, FHIRCode("34068001").value)
        self.assertEqual(inst.reasonCode[0].coding[0].code.as_json(), "34068001")
        self.assertEqual(inst.reasonCode[0].coding[0].display.value, FHIRString("Partial lobectomy of lung").value)
        self.assertEqual(inst.reasonCode[0].coding[0].display.as_json(), "Partial lobectomy of lung")
        self.assertEqual(inst.reasonCode[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.reasonCode[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.status.value, FHIRCode("finished").value)
        self.assertEqual(inst.status.as_json(), "finished")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode("270427003").value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), "270427003")
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString("Patient-initiated encounter").value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), "Patient-initiated encounter")
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), "http://snomed.info/sct")

    def testEncounter8(self):
        inst = self.instantiate_from('encounter-example-f003-abscess.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Encounter instance')
        self.implEncounter8(inst)

        js = inst.as_json()
        self.assertEqual("Encounter", js["resourceType"])
        inst2 = encounter.Encounter(js)
        self.implEncounter8(inst2)

    def implEncounter8(self, inst):
        self.assertEqual(inst.class_fhir.code.value, FHIRCode("AMB").value)
        self.assertEqual(inst.class_fhir.code.as_json(), "AMB")
        self.assertEqual(inst.class_fhir.display.value, FHIRString("ambulatory").value)
        self.assertEqual(inst.class_fhir.display.as_json(), "ambulatory")
        self.assertEqual(inst.class_fhir.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.class_fhir.system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].code.value, FHIRCode("305956004").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].code.as_json(), "305956004")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].display.value, FHIRString("Referral by physician").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].display.as_json(), "Referral by physician")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].code.value, FHIRCode("306689006").value)
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].code.as_json(), "306689006")
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].display.value, FHIRString("Discharge to home").value)
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].display.as_json(), "Discharge to home")
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.hospitalization.dischargeDisposition.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.system.value, FHIRUri("http://www.bmc.nl/zorgportal/identifiers/pre-admissions").value)
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.system.as_json(), "http://www.bmc.nl/zorgportal/identifiers/pre-admissions")
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.use.value, FHIRCode("official").value)
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.use.as_json(), "official")
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.value.value, FHIRString("93042").value)
        self.assertEqual(inst.hospitalization.preAdmissionIdentifier.value.as_json(), "93042")
        self.assertEqual(inst.id.value, FHIRString("f003").value)
        self.assertEqual(inst.id.as_json(), "f003")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.bmc.nl/zorgportal/identifiers/encounters").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.bmc.nl/zorgportal/identifiers/encounters")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("v6751").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "v6751")
        self.assertEqual(inst.length.code.value, FHIRCode("min").value)
        self.assertEqual(inst.length.code.as_json(), "min")
        self.assertEqual(inst.length.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.length.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.length.unit.value, FHIRString("min").value)
        self.assertEqual(inst.length.unit.as_json(), "min")
        self.assertEqual(inst.length.value, 90)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode("103391001").value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), "103391001")
        self.assertEqual(inst.priority.coding[0].display.value, FHIRString("Non-urgent ear, nose and throat admission").value)
        self.assertEqual(inst.priority.coding[0].display.as_json(), "Non-urgent ear, nose and throat admission")
        self.assertEqual(inst.priority.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.priority.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.reasonCode[0].coding[0].code.value, FHIRCode("18099001").value)
        self.assertEqual(inst.reasonCode[0].coding[0].code.as_json(), "18099001")
        self.assertEqual(inst.reasonCode[0].coding[0].display.value, FHIRString("Retropharyngeal abscess").value)
        self.assertEqual(inst.reasonCode[0].coding[0].display.as_json(), "Retropharyngeal abscess")
        self.assertEqual(inst.reasonCode[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.reasonCode[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.status.value, FHIRCode("finished").value)
        self.assertEqual(inst.status.as_json(), "finished")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode("270427003").value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), "270427003")
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString("Patient-initiated encounter").value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), "Patient-initiated encounter")
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), "http://snomed.info/sct")

    def testEncounter9(self):
        inst = self.instantiate_from('encounter-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Encounter instance')
        self.implEncounter9(inst)

        js = inst.as_json()
        self.assertEqual("Encounter", js["resourceType"])
        inst2 = encounter.Encounter(js)
        self.implEncounter9(inst2)

    def implEncounter9(self, inst):
        self.assertEqual(inst.class_fhir.code.value, FHIRCode("IMP").value)
        self.assertEqual(inst.class_fhir.code.as_json(), "IMP")
        self.assertEqual(inst.class_fhir.display.value, FHIRString("inpatient encounter").value)
        self.assertEqual(inst.class_fhir.display.as_json(), "inpatient encounter")
        self.assertEqual(inst.class_fhir.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.class_fhir.system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.id.value, FHIRString("example").value)
        self.assertEqual(inst.id.as_json(), "example")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("in-progress").value)
        self.assertEqual(inst.status.as_json(), "in-progress")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Encounter with patient @example</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Encounter with patient @example</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testEncounter10(self):
        inst = self.instantiate_from('encounter-example-f203-20130311.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Encounter instance')
        self.implEncounter10(inst)

        js = inst.as_json()
        self.assertEqual("Encounter", js["resourceType"])
        inst2 = encounter.Encounter(js)
        self.implEncounter10(inst2)

    def implEncounter10(self, inst):
        self.assertEqual(inst.class_fhir.code.value, FHIRCode("IMP").value)
        self.assertEqual(inst.class_fhir.code.as_json(), "IMP")
        self.assertEqual(inst.class_fhir.display.value, FHIRString("inpatient encounter").value)
        self.assertEqual(inst.class_fhir.display.as_json(), "inpatient encounter")
        self.assertEqual(inst.class_fhir.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.class_fhir.system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.diagnosis[0].rank.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.diagnosis[0].rank.as_json(), 1)
        self.assertEqual(inst.diagnosis[0].use.coding[0].code.value, FHIRCode("AD").value)
        self.assertEqual(inst.diagnosis[0].use.coding[0].code.as_json(), "AD")
        self.assertEqual(inst.diagnosis[0].use.coding[0].display.value, FHIRString("Admission diagnosis").value)
        self.assertEqual(inst.diagnosis[0].use.coding[0].display.as_json(), "Admission diagnosis")
        self.assertEqual(inst.diagnosis[0].use.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/diagnosis-role").value)
        self.assertEqual(inst.diagnosis[0].use.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/diagnosis-role")
        self.assertEqual(inst.diagnosis[1].use.coding[0].code.value, FHIRCode("DD").value)
        self.assertEqual(inst.diagnosis[1].use.coding[0].code.as_json(), "DD")
        self.assertEqual(inst.diagnosis[1].use.coding[0].display.value, FHIRString("Discharge diagnosis").value)
        self.assertEqual(inst.diagnosis[1].use.coding[0].display.as_json(), "Discharge diagnosis")
        self.assertEqual(inst.diagnosis[1].use.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/diagnosis-role").value)
        self.assertEqual(inst.diagnosis[1].use.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/diagnosis-role")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].code.value, FHIRCode("309902002").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].code.as_json(), "309902002")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].display.value, FHIRString("Clinical Oncology Department").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].display.as_json(), "Clinical Oncology Department")
        self.assertEqual(inst.hospitalization.admitSource.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.hospitalization.admitSource.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.hospitalization.dietPreference[0].coding[0].code.value, FHIRCode("276026009").value)
        self.assertEqual(inst.hospitalization.dietPreference[0].coding[0].code.as_json(), "276026009")
        self.assertEqual(inst.hospitalization.dietPreference[0].coding[0].display.value, FHIRString("Fluid balance regulation").value)
        self.assertEqual(inst.hospitalization.dietPreference[0].coding[0].display.as_json(), "Fluid balance regulation")
        self.assertEqual(inst.hospitalization.dietPreference[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.hospitalization.dietPreference[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.hospitalization.reAdmission.coding[0].display.value, FHIRString("readmitted").value)
        self.assertEqual(inst.hospitalization.reAdmission.coding[0].display.as_json(), "readmitted")
        self.assertEqual(inst.hospitalization.specialArrangement[0].coding[0].code.value, FHIRCode("wheel").value)
        self.assertEqual(inst.hospitalization.specialArrangement[0].coding[0].code.as_json(), "wheel")
        self.assertEqual(inst.hospitalization.specialArrangement[0].coding[0].display.value, FHIRString("Wheelchair").value)
        self.assertEqual(inst.hospitalization.specialArrangement[0].coding[0].display.as_json(), "Wheelchair")
        self.assertEqual(inst.hospitalization.specialArrangement[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/encounter-special-arrangements").value)
        self.assertEqual(inst.hospitalization.specialArrangement[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/encounter-special-arrangements")
        self.assertEqual(inst.hospitalization.specialCourtesy[0].coding[0].code.value, FHIRCode("NRM").value)
        self.assertEqual(inst.hospitalization.specialCourtesy[0].coding[0].code.as_json(), "NRM")
        self.assertEqual(inst.hospitalization.specialCourtesy[0].coding[0].display.value, FHIRString("normal courtesy").value)
        self.assertEqual(inst.hospitalization.specialCourtesy[0].coding[0].display.as_json(), "normal courtesy")
        self.assertEqual(inst.hospitalization.specialCourtesy[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-EncounterSpecialCourtesy").value)
        self.assertEqual(inst.hospitalization.specialCourtesy[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-EncounterSpecialCourtesy")
        self.assertEqual(inst.id.value, FHIRString("f203").value)
        self.assertEqual(inst.id.as_json(), "f203")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("temp").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "temp")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("Encounter_Roel_20130311").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "Encounter_Roel_20130311")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.participant[0].type[0].coding[0].code.value, FHIRCode("PART").value)
        self.assertEqual(inst.participant[0].type[0].coding[0].code.as_json(), "PART")
        self.assertEqual(inst.participant[0].type[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.participant[0].type[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.period.end.value, FHIRDateTime("2013-03-20").value)
        self.assertEqual(inst.period.end.as_json(), "2013-03-20")
        self.assertEqual(inst.period.start.value, FHIRDateTime("2013-03-11").value)
        self.assertEqual(inst.period.start.as_json(), "2013-03-11")
        self.assertEqual(inst.priority.coding[0].code.value, FHIRCode("394849002").value)
        self.assertEqual(inst.priority.coding[0].code.as_json(), "394849002")
        self.assertEqual(inst.priority.coding[0].display.value, FHIRString("High priority").value)
        self.assertEqual(inst.priority.coding[0].display.as_json(), "High priority")
        self.assertEqual(inst.priority.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.priority.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.reasonCode[0].text.value, FHIRString("The patient seems to suffer from bilateral pneumonia and renal insufficiency, most likely due to chemotherapy.").value)
        self.assertEqual(inst.reasonCode[0].text.as_json(), "The patient seems to suffer from bilateral pneumonia and renal insufficiency, most likely due to chemotherapy.")
        self.assertEqual(inst.status.value, FHIRCode("finished").value)
        self.assertEqual(inst.status.as_json(), "finished")
        self.assertEqual(inst.statusHistory[0].period.start.value, FHIRDateTime("2013-03-08").value)
        self.assertEqual(inst.statusHistory[0].period.start.as_json(), "2013-03-08")
        self.assertEqual(inst.statusHistory[0].status.value, FHIRCode("arrived").value)
        self.assertEqual(inst.statusHistory[0].status.as_json(), "arrived")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type[0].coding[0].code.value, FHIRCode("183807002").value)
        self.assertEqual(inst.type[0].coding[0].code.as_json(), "183807002")
        self.assertEqual(inst.type[0].coding[0].display.value, FHIRString("Inpatient stay for nine days").value)
        self.assertEqual(inst.type[0].coding[0].display.as_json(), "Inpatient stay for nine days")
        self.assertEqual(inst.type[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.type[0].coding[0].system.as_json(), "http://snomed.info/sct")


from fhirclient.models.fhirdatatypes import FHIRCode, FHIRString, FHIRUri, FHIRDateTime, FHIRPositiveInt