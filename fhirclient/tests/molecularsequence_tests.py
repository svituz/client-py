#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import molecularsequence

class MolecularSequenceTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("MolecularSequence", js["resourceType"])
        return molecularsequence.MolecularSequence(js)

    def testMolecularSequence1(self):
        inst = self.instantiate_from('sequence-graphic-example-2.json')
        self.assertIsNotNone(inst, 'Must have instantiated a MolecularSequence instance')
        self.implMolecularSequence1(inst)

        js = inst.as_json()
        self.assertEqual("MolecularSequence", js["resourceType"])
        inst2 = molecularsequence.MolecularSequence(js)
        self.implMolecularSequence1(inst2)

    def implMolecularSequence1(self, inst):
        self.assertEqual(inst.coordinateSystem, 0)
        self.assertEqual(inst.id.value, FHIRString("graphic-example-2").value)
        self.assertEqual(inst.id.as_json(), "graphic-example-2")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.referenceSeq.referenceSeqString.value, FHIRString("CGCCATTG").value)
        self.assertEqual(inst.referenceSeq.referenceSeqString.as_json(), "CGCCATTG")
        self.assertEqual(inst.referenceSeq.strand.value, FHIRCode("watson").value)
        self.assertEqual(inst.referenceSeq.strand.as_json(), "watson")
        self.assertEqual(inst.referenceSeq.windowEnd, 8)
        self.assertEqual(inst.referenceSeq.windowStart, 0)
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("dna").value)
        self.assertEqual(inst.type.as_json(), "dna")

    def testMolecularSequence2(self):
        inst = self.instantiate_from('sequence-graphic-example-1.json')
        self.assertIsNotNone(inst, 'Must have instantiated a MolecularSequence instance')
        self.implMolecularSequence2(inst)

        js = inst.as_json()
        self.assertEqual("MolecularSequence", js["resourceType"])
        inst2 = molecularsequence.MolecularSequence(js)
        self.implMolecularSequence2(inst2)

    def implMolecularSequence2(self, inst):
        self.assertEqual(inst.coordinateSystem, 0)
        self.assertEqual(inst.id.value, FHIRString("graphic-example-1").value)
        self.assertEqual(inst.id.as_json(), "graphic-example-1")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].code.value, FHIRCode("NC_000002.12").value)
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].code.as_json(), "NC_000002.12")
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].system.value, FHIRUri("http://www.ncbi.nlm.nih.gov/nuccore").value)
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].system.as_json(), "http://www.ncbi.nlm.nih.gov/nuccore")
        self.assertEqual(inst.referenceSeq.strand.value, FHIRCode("watson").value)
        self.assertEqual(inst.referenceSeq.strand.as_json(), "watson")
        self.assertEqual(inst.referenceSeq.windowEnd, 128273732)
        self.assertEqual(inst.referenceSeq.windowStart, 128273724)
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("dna").value)
        self.assertEqual(inst.type.as_json(), "dna")
        self.assertEqual(inst.variant[0].cigar.value, FHIRString("1M").value)
        self.assertEqual(inst.variant[0].cigar.as_json(), "1M")
        self.assertEqual(inst.variant[0].end, 128273726)
        self.assertEqual(inst.variant[0].observedAllele.value, FHIRString("G").value)
        self.assertEqual(inst.variant[0].observedAllele.as_json(), "G")
        self.assertEqual(inst.variant[0].referenceAllele.value, FHIRString("T").value)
        self.assertEqual(inst.variant[0].referenceAllele.as_json(), "T")
        self.assertEqual(inst.variant[0].start, 128273725)

    def testMolecularSequence3(self):
        inst = self.instantiate_from('coord-0base-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a MolecularSequence instance')
        self.implMolecularSequence3(inst)

        js = inst.as_json()
        self.assertEqual("MolecularSequence", js["resourceType"])
        inst2 = molecularsequence.MolecularSequence(js)
        self.implMolecularSequence3(inst2)

    def implMolecularSequence3(self, inst):
        self.assertEqual(inst.coordinateSystem, 0)
        self.assertEqual(inst.id.value, FHIRString("coord-0-base").value)
        self.assertEqual(inst.id.as_json(), "coord-0-base")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.observedSeq.value, FHIRString("ACATGGTAGC").value)
        self.assertEqual(inst.observedSeq.as_json(), "ACATGGTAGC")
        self.assertEqual(inst.referenceSeq.referenceSeqString.value, FHIRString("ACGTAGTC").value)
        self.assertEqual(inst.referenceSeq.referenceSeqString.as_json(), "ACGTAGTC")
        self.assertEqual(inst.referenceSeq.strand.value, FHIRCode("watson").value)
        self.assertEqual(inst.referenceSeq.strand.as_json(), "watson")
        self.assertEqual(inst.referenceSeq.windowEnd, 8)
        self.assertEqual(inst.referenceSeq.windowStart, 0)
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("dna").value)
        self.assertEqual(inst.type.as_json(), "dna")
        self.assertEqual(inst.variant[0].cigar.value, FHIRString("3I").value)
        self.assertEqual(inst.variant[0].cigar.as_json(), "3I")
        self.assertEqual(inst.variant[0].end, 2)
        self.assertEqual(inst.variant[0].observedAllele.value, FHIRString("ATG").value)
        self.assertEqual(inst.variant[0].observedAllele.as_json(), "ATG")
        self.assertEqual(inst.variant[0].referenceAllele.value, FHIRString("-").value)
        self.assertEqual(inst.variant[0].referenceAllele.as_json(), "-")
        self.assertEqual(inst.variant[0].start, 2)
        self.assertEqual(inst.variant[1].cigar.value, FHIRString("1M").value)
        self.assertEqual(inst.variant[1].cigar.as_json(), "1M")
        self.assertEqual(inst.variant[1].end, 5)
        self.assertEqual(inst.variant[1].observedAllele.value, FHIRString("T").value)
        self.assertEqual(inst.variant[1].observedAllele.as_json(), "T")
        self.assertEqual(inst.variant[1].referenceAllele.value, FHIRString("A").value)
        self.assertEqual(inst.variant[1].referenceAllele.as_json(), "A")
        self.assertEqual(inst.variant[1].start, 4)
        self.assertEqual(inst.variant[2].cigar.value, FHIRString("1D").value)
        self.assertEqual(inst.variant[2].cigar.as_json(), "1D")
        self.assertEqual(inst.variant[2].end, 7)
        self.assertEqual(inst.variant[2].observedAllele.value, FHIRString("-").value)
        self.assertEqual(inst.variant[2].observedAllele.as_json(), "-")
        self.assertEqual(inst.variant[2].referenceAllele.value, FHIRString("T").value)
        self.assertEqual(inst.variant[2].referenceAllele.as_json(), "T")
        self.assertEqual(inst.variant[2].start, 6)

    def testMolecularSequence4(self):
        inst = self.instantiate_from('sequence-example-fda.json')
        self.assertIsNotNone(inst, 'Must have instantiated a MolecularSequence instance')
        self.implMolecularSequence4(inst)

        js = inst.as_json()
        self.assertEqual("MolecularSequence", js["resourceType"])
        inst2 = molecularsequence.MolecularSequence(js)
        self.implMolecularSequence4(inst2)

    def implMolecularSequence4(self, inst):
        self.assertEqual(inst.coordinateSystem, 1)
        self.assertEqual(inst.id.value, FHIRString("fda-example").value)
        self.assertEqual(inst.id.as_json(), "fda-example")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.quality[0].end, 101770080)
        self.assertEqual(inst.quality[0].fScore, 0.545551)
        self.assertEqual(inst.quality[0].gtFP, 2186)
        self.assertEqual(inst.quality[0].method.coding[0].code.value, FHIRCode("job-ByxYPx809jFVy21KJG74Jg3Y").value)
        self.assertEqual(inst.quality[0].method.coding[0].code.as_json(), "job-ByxYPx809jFVy21KJG74Jg3Y")
        self.assertEqual(inst.quality[0].method.coding[0].system.value, FHIRUri("https://precision.fda.gov/jobs/").value)
        self.assertEqual(inst.quality[0].method.coding[0].system.as_json(), "https://precision.fda.gov/jobs/")
        self.assertEqual(inst.quality[0].method.text.value, FHIRString("Vcfeval + Hap.py Comparison").value)
        self.assertEqual(inst.quality[0].method.text.as_json(), "Vcfeval + Hap.py Comparison")
        self.assertEqual(inst.quality[0].precision, 0.428005)
        self.assertEqual(inst.quality[0].queryFP, 10670)
        self.assertEqual(inst.quality[0].queryTP, 7984)
        self.assertEqual(inst.quality[0].recall, 0.752111)
        self.assertEqual(inst.quality[0].standardSequence.coding[0].code.value, FHIRCode("file-Bk50V4Q0qVb65P0v2VPbfYPZ").value)
        self.assertEqual(inst.quality[0].standardSequence.coding[0].code.as_json(), "file-Bk50V4Q0qVb65P0v2VPbfYPZ")
        self.assertEqual(inst.quality[0].standardSequence.coding[0].system.value, FHIRUri("https://precision.fda.gov/files/").value)
        self.assertEqual(inst.quality[0].standardSequence.coding[0].system.as_json(), "https://precision.fda.gov/files/")
        self.assertEqual(inst.quality[0].start, 10453)
        self.assertEqual(inst.quality[0].truthFN, 2554)
        self.assertEqual(inst.quality[0].truthTP, 7749)
        self.assertEqual(inst.quality[0].type.value, FHIRCode("snp").value)
        self.assertEqual(inst.quality[0].type.as_json(), "snp")
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].code.value, FHIRCode("NC_000001.11").value)
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].code.as_json(), "NC_000001.11")
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].system.value, FHIRUri("http://www.ncbi.nlm.nih.gov/nuccore").value)
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].system.as_json(), "http://www.ncbi.nlm.nih.gov/nuccore")
        self.assertEqual(inst.referenceSeq.strand.value, FHIRCode("watson").value)
        self.assertEqual(inst.referenceSeq.strand.as_json(), "watson")
        self.assertEqual(inst.referenceSeq.windowEnd, 101770080)
        self.assertEqual(inst.referenceSeq.windowStart, 10453)
        self.assertEqual(inst.repository[0].name.value, FHIRString("FDA").value)
        self.assertEqual(inst.repository[0].name.as_json(), "FDA")
        self.assertEqual(inst.repository[0].type.value, FHIRCode("login").value)
        self.assertEqual(inst.repository[0].type.as_json(), "login")
        self.assertEqual(inst.repository[0].url.value, FHIRUri("https://precision.fda.gov/files/file-Bx37ZK009P4bX5g3qjkFZV38").value)
        self.assertEqual(inst.repository[0].url.as_json(), "https://precision.fda.gov/files/file-Bx37ZK009P4bX5g3qjkFZV38")
        self.assertEqual(inst.repository[0].variantsetId.value, FHIRString("file-Bx37ZK009P4bX5g3qjkFZV38").value)
        self.assertEqual(inst.repository[0].variantsetId.as_json(), "file-Bx37ZK009P4bX5g3qjkFZV38")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("dna").value)
        self.assertEqual(inst.type.as_json(), "dna")
        self.assertEqual(inst.variant[0].end, 13117)
        self.assertEqual(inst.variant[0].observedAllele.value, FHIRString("T").value)
        self.assertEqual(inst.variant[0].observedAllele.as_json(), "T")
        self.assertEqual(inst.variant[0].referenceAllele.value, FHIRString("G").value)
        self.assertEqual(inst.variant[0].referenceAllele.as_json(), "G")
        self.assertEqual(inst.variant[0].start, 13116)

    def testMolecularSequence5(self):
        inst = self.instantiate_from('sequence-example-pgx-1.json')
        self.assertIsNotNone(inst, 'Must have instantiated a MolecularSequence instance')
        self.implMolecularSequence5(inst)

        js = inst.as_json()
        self.assertEqual("MolecularSequence", js["resourceType"])
        inst2 = molecularsequence.MolecularSequence(js)
        self.implMolecularSequence5(inst2)

    def implMolecularSequence5(self, inst):
        self.assertEqual(inst.coordinateSystem, 0)
        self.assertEqual(inst.id.value, FHIRString("example-pgx-1").value)
        self.assertEqual(inst.id.as_json(), "example-pgx-1")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.referenceSeq.orientation.value, FHIRCode("sense").value)
        self.assertEqual(inst.referenceSeq.orientation.as_json(), "sense")
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].code.value, FHIRCode("NG_007726.3").value)
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].code.as_json(), "NG_007726.3")
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].system.value, FHIRUri("http://www.ncbi.nlm.nih.gov/nuccore").value)
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].system.as_json(), "http://www.ncbi.nlm.nih.gov/nuccore")
        self.assertEqual(inst.referenceSeq.strand.value, FHIRCode("watson").value)
        self.assertEqual(inst.referenceSeq.strand.as_json(), "watson")
        self.assertEqual(inst.referenceSeq.windowEnd, 55227980)
        self.assertEqual(inst.referenceSeq.windowStart, 55227970)
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("dna").value)
        self.assertEqual(inst.type.as_json(), "dna")
        self.assertEqual(inst.variant[0].end, 55227977)
        self.assertEqual(inst.variant[0].observedAllele.value, FHIRString("G").value)
        self.assertEqual(inst.variant[0].observedAllele.as_json(), "G")
        self.assertEqual(inst.variant[0].referenceAllele.value, FHIRString("T").value)
        self.assertEqual(inst.variant[0].referenceAllele.as_json(), "T")
        self.assertEqual(inst.variant[0].start, 55227976)

    def testMolecularSequence6(self):
        inst = self.instantiate_from('sequence-example-fda-comparisons.json')
        self.assertIsNotNone(inst, 'Must have instantiated a MolecularSequence instance')
        self.implMolecularSequence6(inst)

        js = inst.as_json()
        self.assertEqual("MolecularSequence", js["resourceType"])
        inst2 = molecularsequence.MolecularSequence(js)
        self.implMolecularSequence6(inst2)

    def implMolecularSequence6(self, inst):
        self.assertEqual(inst.coordinateSystem, 1)
        self.assertEqual(inst.id.value, FHIRString("fda-vcf-comparison").value)
        self.assertEqual(inst.id.as_json(), "fda-vcf-comparison")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.quality[0].end, 101770080)
        self.assertEqual(inst.quality[0].fScore, 0.9823)
        self.assertEqual(inst.quality[0].gtFP, 2186)
        self.assertEqual(inst.quality[0].method.coding[0].code.value, FHIRCode("app-BqB9XZ8006ZZ2g5KzGXP3fpq").value)
        self.assertEqual(inst.quality[0].method.coding[0].code.as_json(), "app-BqB9XZ8006ZZ2g5KzGXP3fpq")
        self.assertEqual(inst.quality[0].method.coding[0].system.value, FHIRUri("https://precision.fda.gov/apps/").value)
        self.assertEqual(inst.quality[0].method.coding[0].system.as_json(), "https://precision.fda.gov/apps/")
        self.assertEqual(inst.quality[0].method.text.value, FHIRString("VCF Comparison").value)
        self.assertEqual(inst.quality[0].method.text.as_json(), "VCF Comparison")
        self.assertEqual(inst.quality[0].precision, 0.9885)
        self.assertEqual(inst.quality[0].queryFP, 1507)
        self.assertEqual(inst.quality[0].score.value, 5.0)
        self.assertEqual(inst.quality[0].standardSequence.coding[0].code.value, FHIRCode("file-BkZxBZ00bpJVk2q6x43b1YBx").value)
        self.assertEqual(inst.quality[0].standardSequence.coding[0].code.as_json(), "file-BkZxBZ00bpJVk2q6x43b1YBx")
        self.assertEqual(inst.quality[0].standardSequence.coding[0].system.value, FHIRUri("https://precision.fda.gov/files/").value)
        self.assertEqual(inst.quality[0].standardSequence.coding[0].system.as_json(), "https://precision.fda.gov/files/")
        self.assertEqual(inst.quality[0].start, 10453)
        self.assertEqual(inst.quality[0].truthFN, 3168)
        self.assertEqual(inst.quality[0].truthTP, 129481)
        self.assertEqual(inst.quality[0].type.value, FHIRCode("unknown").value)
        self.assertEqual(inst.quality[0].type.as_json(), "unknown")
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].code.value, FHIRCode("NC_000001.11").value)
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].code.as_json(), "NC_000001.11")
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].system.value, FHIRUri("http://www.ncbi.nlm.nih.gov/nuccore").value)
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].system.as_json(), "http://www.ncbi.nlm.nih.gov/nuccore")
        self.assertEqual(inst.referenceSeq.strand.value, FHIRCode("watson").value)
        self.assertEqual(inst.referenceSeq.strand.as_json(), "watson")
        self.assertEqual(inst.referenceSeq.windowEnd, 101770080)
        self.assertEqual(inst.referenceSeq.windowStart, 10453)
        self.assertEqual(inst.repository[0].name.value, FHIRString("FDA").value)
        self.assertEqual(inst.repository[0].name.as_json(), "FDA")
        self.assertEqual(inst.repository[0].type.value, FHIRCode("login").value)
        self.assertEqual(inst.repository[0].type.as_json(), "login")
        self.assertEqual(inst.repository[0].url.value, FHIRUri("https://precision.fda.gov/comparisons/1850").value)
        self.assertEqual(inst.repository[0].url.as_json(), "https://precision.fda.gov/comparisons/1850")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.variant[0].end, 13117)
        self.assertEqual(inst.variant[0].observedAllele.value, FHIRString("T").value)
        self.assertEqual(inst.variant[0].observedAllele.as_json(), "T")
        self.assertEqual(inst.variant[0].referenceAllele.value, FHIRString("G").value)
        self.assertEqual(inst.variant[0].referenceAllele.as_json(), "G")
        self.assertEqual(inst.variant[0].start, 13116)

    def testMolecularSequence7(self):
        inst = self.instantiate_from('molecularsequence-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a MolecularSequence instance')
        self.implMolecularSequence7(inst)

        js = inst.as_json()
        self.assertEqual("MolecularSequence", js["resourceType"])
        inst2 = molecularsequence.MolecularSequence(js)
        self.implMolecularSequence7(inst2)

    def implMolecularSequence7(self, inst):
        self.assertEqual(inst.coordinateSystem, 0)
        self.assertEqual(inst.id.value, FHIRString("example").value)
        self.assertEqual(inst.id.as_json(), "example")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].code.value, FHIRCode("NC_000009.11").value)
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].code.as_json(), "NC_000009.11")
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].system.value, FHIRUri("http://www.ncbi.nlm.nih.gov/nuccore").value)
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].system.as_json(), "http://www.ncbi.nlm.nih.gov/nuccore")
        self.assertEqual(inst.referenceSeq.strand.value, FHIRCode("watson").value)
        self.assertEqual(inst.referenceSeq.strand.as_json(), "watson")
        self.assertEqual(inst.referenceSeq.windowEnd, 22125510)
        self.assertEqual(inst.referenceSeq.windowStart, 22125500)
        self.assertEqual(inst.repository[0].name.value, FHIRString("GA4GH API").value)
        self.assertEqual(inst.repository[0].name.as_json(), "GA4GH API")
        self.assertEqual(inst.repository[0].type.value, FHIRCode("openapi").value)
        self.assertEqual(inst.repository[0].type.as_json(), "openapi")
        self.assertEqual(inst.repository[0].url.value, FHIRUri("http://grch37.rest.ensembl.org/ga4gh/variants/3:rs1333049?content-type=application/json").value)
        self.assertEqual(inst.repository[0].url.as_json(), "http://grch37.rest.ensembl.org/ga4gh/variants/3:rs1333049?content-type=application/json")
        self.assertEqual(inst.repository[0].variantsetId.value, FHIRString("3:rs1333049").value)
        self.assertEqual(inst.repository[0].variantsetId.as_json(), "3:rs1333049")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("dna").value)
        self.assertEqual(inst.type.as_json(), "dna")
        self.assertEqual(inst.variant[0].end, 22125504)
        self.assertEqual(inst.variant[0].observedAllele.value, FHIRString("C").value)
        self.assertEqual(inst.variant[0].observedAllele.as_json(), "C")
        self.assertEqual(inst.variant[0].referenceAllele.value, FHIRString("G").value)
        self.assertEqual(inst.variant[0].referenceAllele.as_json(), "G")
        self.assertEqual(inst.variant[0].start, 22125503)

    def testMolecularSequence8(self):
        inst = self.instantiate_from('sequence-example-TPMT-one.json')
        self.assertIsNotNone(inst, 'Must have instantiated a MolecularSequence instance')
        self.implMolecularSequence8(inst)

        js = inst.as_json()
        self.assertEqual("MolecularSequence", js["resourceType"])
        inst2 = molecularsequence.MolecularSequence(js)
        self.implMolecularSequence8(inst2)

    def implMolecularSequence8(self, inst):
        self.assertEqual(inst.coordinateSystem, 1)
        self.assertEqual(inst.id.value, FHIRString("example-TPMT-one").value)
        self.assertEqual(inst.id.as_json(), "example-TPMT-one")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.observedSeq.value, FHIRString("T-C-C-C-A-C-C-C").value)
        self.assertEqual(inst.observedSeq.as_json(), "T-C-C-C-A-C-C-C")
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].code.value, FHIRCode("NT_007592.15").value)
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].code.as_json(), "NT_007592.15")
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].system.value, FHIRUri("http://www.ncbi.nlm.nih.gov/nuccore").value)
        self.assertEqual(inst.referenceSeq.referenceSeqId.coding[0].system.as_json(), "http://www.ncbi.nlm.nih.gov/nuccore")
        self.assertEqual(inst.referenceSeq.strand.value, FHIRCode("watson").value)
        self.assertEqual(inst.referenceSeq.strand.as_json(), "watson")
        self.assertEqual(inst.referenceSeq.windowEnd, 18143955)
        self.assertEqual(inst.referenceSeq.windowStart, 18130918)
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("dna").value)
        self.assertEqual(inst.type.as_json(), "dna")
        self.assertEqual(inst.variant[0].end, 18139214)
        self.assertEqual(inst.variant[0].observedAllele.value, FHIRString("A").value)
        self.assertEqual(inst.variant[0].observedAllele.as_json(), "A")
        self.assertEqual(inst.variant[0].referenceAllele.value, FHIRString("G").value)
        self.assertEqual(inst.variant[0].referenceAllele.as_json(), "G")
        self.assertEqual(inst.variant[0].start, 18139214)

    def testMolecularSequence9(self):
        inst = self.instantiate_from('coord-1base-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a MolecularSequence instance')
        self.implMolecularSequence9(inst)

        js = inst.as_json()
        self.assertEqual("MolecularSequence", js["resourceType"])
        inst2 = molecularsequence.MolecularSequence(js)
        self.implMolecularSequence9(inst2)

    def implMolecularSequence9(self, inst):
        self.assertEqual(inst.coordinateSystem, 1)
        self.assertEqual(inst.id.value, FHIRString("coord-1-base").value)
        self.assertEqual(inst.id.as_json(), "coord-1-base")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.observedSeq.value, FHIRString("ACATGGTAGC").value)
        self.assertEqual(inst.observedSeq.as_json(), "ACATGGTAGC")
        self.assertEqual(inst.referenceSeq.referenceSeqString.value, FHIRString("ACGTAGTC").value)
        self.assertEqual(inst.referenceSeq.referenceSeqString.as_json(), "ACGTAGTC")
        self.assertEqual(inst.referenceSeq.strand.value, FHIRCode("watson").value)
        self.assertEqual(inst.referenceSeq.strand.as_json(), "watson")
        self.assertEqual(inst.referenceSeq.windowEnd, 8)
        self.assertEqual(inst.referenceSeq.windowStart, 1)
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("dna").value)
        self.assertEqual(inst.type.as_json(), "dna")
        self.assertEqual(inst.variant[0].cigar.value, FHIRString("3I").value)
        self.assertEqual(inst.variant[0].cigar.as_json(), "3I")
        self.assertEqual(inst.variant[0].end, 3)
        self.assertEqual(inst.variant[0].observedAllele.value, FHIRString("ATG").value)
        self.assertEqual(inst.variant[0].observedAllele.as_json(), "ATG")
        self.assertEqual(inst.variant[0].referenceAllele.value, FHIRString("-").value)
        self.assertEqual(inst.variant[0].referenceAllele.as_json(), "-")
        self.assertEqual(inst.variant[0].start, 2)
        self.assertEqual(inst.variant[1].cigar.value, FHIRString("3I").value)
        self.assertEqual(inst.variant[1].cigar.as_json(), "3I")
        self.assertEqual(inst.variant[1].end, 5)
        self.assertEqual(inst.variant[1].observedAllele.value, FHIRString("T").value)
        self.assertEqual(inst.variant[1].observedAllele.as_json(), "T")
        self.assertEqual(inst.variant[1].referenceAllele.value, FHIRString("A").value)
        self.assertEqual(inst.variant[1].referenceAllele.as_json(), "A")
        self.assertEqual(inst.variant[1].start, 5)
        self.assertEqual(inst.variant[2].cigar.value, FHIRString("1D").value)
        self.assertEqual(inst.variant[2].cigar.as_json(), "1D")
        self.assertEqual(inst.variant[2].end, 7)
        self.assertEqual(inst.variant[2].observedAllele.value, FHIRString("-").value)
        self.assertEqual(inst.variant[2].observedAllele.as_json(), "-")
        self.assertEqual(inst.variant[2].referenceAllele.value, FHIRString("T").value)
        self.assertEqual(inst.variant[2].referenceAllele.as_json(), "T")
        self.assertEqual(inst.variant[2].start, 7)

    def testMolecularSequence10(self):
        inst = self.instantiate_from('sequence-graphic-example-4.json')
        self.assertIsNotNone(inst, 'Must have instantiated a MolecularSequence instance')
        self.implMolecularSequence10(inst)

        js = inst.as_json()
        self.assertEqual("MolecularSequence", js["resourceType"])
        inst2 = molecularsequence.MolecularSequence(js)
        self.implMolecularSequence10(inst2)

    def implMolecularSequence10(self, inst):
        self.assertEqual(inst.coordinateSystem, 0)
        self.assertEqual(inst.id.value, FHIRString("graphic-example-4").value)
        self.assertEqual(inst.id.as_json(), "graphic-example-4")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.referenceSeq.chromosome.coding[0].code.value, FHIRCode("2").value)
        self.assertEqual(inst.referenceSeq.chromosome.coding[0].code.as_json(), "2")
        self.assertEqual(inst.referenceSeq.chromosome.coding[0].display.value, FHIRString("chromosome 2").value)
        self.assertEqual(inst.referenceSeq.chromosome.coding[0].display.as_json(), "chromosome 2")
        self.assertEqual(inst.referenceSeq.chromosome.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/chromosome-human").value)
        self.assertEqual(inst.referenceSeq.chromosome.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/chromosome-human")
        self.assertEqual(inst.referenceSeq.genomeBuild.value, FHIRString("GRCh 38").value)
        self.assertEqual(inst.referenceSeq.genomeBuild.as_json(), "GRCh 38")
        self.assertEqual(inst.referenceSeq.strand.value, FHIRCode("watson").value)
        self.assertEqual(inst.referenceSeq.strand.as_json(), "watson")
        self.assertEqual(inst.referenceSeq.windowEnd, 128273740)
        self.assertEqual(inst.referenceSeq.windowStart, 128273736)
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.value, FHIRCode("dna").value)
        self.assertEqual(inst.type.as_json(), "dna")


from fhirclient.models.fhirdatatypes import FHIRString, FHIRCode, FHIRUri