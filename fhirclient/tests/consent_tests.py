#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import consent

class ConsentTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Consent", js["resourceType"])
        return consent.Consent(js)

    def testConsent1(self):
        inst = self.instantiate_from('consent-example-notOrg.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Consent instance')
        self.implConsent1(inst)

        js = inst.as_json()
        self.assertEqual("Consent", js["resourceType"])
        inst2 = consent.Consent(js)
        self.implConsent1(inst2)

    def implConsent1(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("59284-0").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "59284-0")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2015-11-18").value)
        self.assertEqual(inst.dateTime.as_json(), "2015-11-18")
        self.assertEqual(inst.id.value, FHIRString("consent-example-notOrg").value)
        self.assertEqual(inst.id.as_json(), "consent-example-notOrg")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.policyRule.coding[0].code.value, FHIRCode("OPTIN").value)
        self.assertEqual(inst.policyRule.coding[0].code.as_json(), "OPTIN")
        self.assertEqual(inst.policyRule.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.policyRule.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.action[1].coding[0].code.value, FHIRCode("correct").value)
        self.assertEqual(inst.provision.action[1].coding[0].code.as_json(), "correct")
        self.assertEqual(inst.provision.action[1].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.action[1].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.actor[0].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.actor[0].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.type.value, FHIRCode("deny").value)
        self.assertEqual(inst.provision.type.as_json(), "deny")
        self.assertEqual(inst.scope.coding[0].code.value, FHIRCode("patient-privacy").value)
        self.assertEqual(inst.scope.coding[0].code.as_json(), "patient-privacy")
        self.assertEqual(inst.scope.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentscope").value)
        self.assertEqual(inst.scope.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentscope")
        self.assertEqual(inst.sourceAttachment.title.value, FHIRString("The terms of the consent in lawyer speak.").value)
        self.assertEqual(inst.sourceAttachment.title.as_json(), "The terms of the consent in lawyer speak.")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testConsent2(self):
        inst = self.instantiate_from('consent-example-notAuthor.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Consent instance')
        self.implConsent2(inst)

        js = inst.as_json()
        self.assertEqual("Consent", js["resourceType"])
        inst2 = consent.Consent(js)
        self.implConsent2(inst2)

    def implConsent2(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("59284-0").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "59284-0")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2015-11-18").value)
        self.assertEqual(inst.dateTime.as_json(), "2015-11-18")
        self.assertEqual(inst.id.value, FHIRString("consent-example-notAuthor").value)
        self.assertEqual(inst.id.as_json(), "consent-example-notAuthor")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.policyRule.coding[0].code.value, FHIRCode("OPTIN").value)
        self.assertEqual(inst.policyRule.coding[0].code.as_json(), "OPTIN")
        self.assertEqual(inst.policyRule.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.policyRule.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.actor[0].role.coding[0].code.value, FHIRCode("CST").value)
        self.assertEqual(inst.provision.actor[0].role.coding[0].code.as_json(), "CST")
        self.assertEqual(inst.provision.actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.scope.coding[0].code.value, FHIRCode("patient-privacy").value)
        self.assertEqual(inst.scope.coding[0].code.as_json(), "patient-privacy")
        self.assertEqual(inst.scope.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentscope").value)
        self.assertEqual(inst.scope.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentscope")
        self.assertEqual(inst.sourceAttachment.title.value, FHIRString("The terms of the consent in lawyer speak.").value)
        self.assertEqual(inst.sourceAttachment.title.as_json(), "The terms of the consent in lawyer speak.")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testConsent3(self):
        inst = self.instantiate_from('consent-example-notThis.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Consent instance')
        self.implConsent3(inst)

        js = inst.as_json()
        self.assertEqual("Consent", js["resourceType"])
        inst2 = consent.Consent(js)
        self.implConsent3(inst2)

    def implConsent3(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("59284-0").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "59284-0")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2015-11-18").value)
        self.assertEqual(inst.dateTime.as_json(), "2015-11-18")
        self.assertEqual(inst.id.value, FHIRString("consent-example-notThis").value)
        self.assertEqual(inst.id.as_json(), "consent-example-notThis")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.policyRule.coding[0].code.value, FHIRCode("OPTIN").value)
        self.assertEqual(inst.policyRule.coding[0].code.as_json(), "OPTIN")
        self.assertEqual(inst.policyRule.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.policyRule.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.data[0].meaning.value, FHIRCode("related").value)
        self.assertEqual(inst.provision.data[0].meaning.as_json(), "related")
        self.assertEqual(inst.scope.coding[0].code.value, FHIRCode("patient-privacy").value)
        self.assertEqual(inst.scope.coding[0].code.as_json(), "patient-privacy")
        self.assertEqual(inst.scope.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentscope").value)
        self.assertEqual(inst.scope.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentscope")
        self.assertEqual(inst.sourceAttachment.title.value, FHIRString("The terms of the consent in lawyer speak.").value)
        self.assertEqual(inst.sourceAttachment.title.as_json(), "The terms of the consent in lawyer speak.")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testConsent4(self):
        inst = self.instantiate_from('consent-example-notThem.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Consent instance')
        self.implConsent4(inst)

        js = inst.as_json()
        self.assertEqual("Consent", js["resourceType"])
        inst2 = consent.Consent(js)
        self.implConsent4(inst2)

    def implConsent4(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("59284-0").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "59284-0")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2015-11-18").value)
        self.assertEqual(inst.dateTime.as_json(), "2015-11-18")
        self.assertEqual(inst.id.value, FHIRString("consent-example-notThem").value)
        self.assertEqual(inst.id.as_json(), "consent-example-notThem")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.policyRule.coding[0].code.value, FHIRCode("OPTIN").value)
        self.assertEqual(inst.policyRule.coding[0].code.as_json(), "OPTIN")
        self.assertEqual(inst.policyRule.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.policyRule.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.action[1].coding[0].code.value, FHIRCode("correct").value)
        self.assertEqual(inst.provision.action[1].coding[0].code.as_json(), "correct")
        self.assertEqual(inst.provision.action[1].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.action[1].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.actor[0].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.actor[0].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.scope.coding[0].code.value, FHIRCode("patient-privacy").value)
        self.assertEqual(inst.scope.coding[0].code.as_json(), "patient-privacy")
        self.assertEqual(inst.scope.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentscope").value)
        self.assertEqual(inst.scope.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentscope")
        self.assertEqual(inst.sourceAttachment.title.value, FHIRString("The terms of the consent in lawyer speak.").value)
        self.assertEqual(inst.sourceAttachment.title.as_json(), "The terms of the consent in lawyer speak.")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testConsent5(self):
        inst = self.instantiate_from('consent-example-smartonfhir.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Consent instance')
        self.implConsent5(inst)

        js = inst.as_json()
        self.assertEqual("Consent", js["resourceType"])
        inst2 = consent.Consent(js)
        self.implConsent5(inst2)

    def implConsent5(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("59284-0").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "59284-0")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2016-06-23T17:02:33+10:00").value)
        self.assertEqual(inst.dateTime.as_json(), "2016-06-23T17:02:33+10:00")
        self.assertEqual(inst.id.value, FHIRString("consent-example-smartonfhir").value)
        self.assertEqual(inst.id.as_json(), "consent-example-smartonfhir")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.policyRule.coding[0].code.value, FHIRCode("OPTIN").value)
        self.assertEqual(inst.policyRule.coding[0].code.as_json(), "OPTIN")
        self.assertEqual(inst.policyRule.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.policyRule.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.period.end.value, FHIRDateTime("2016-06-23T17:32:33+10:00").value)
        self.assertEqual(inst.provision.period.end.as_json(), "2016-06-23T17:32:33+10:00")
        self.assertEqual(inst.provision.period.start.value, FHIRDateTime("2016-06-23T17:02:33+10:00").value)
        self.assertEqual(inst.provision.period.start.as_json(), "2016-06-23T17:02:33+10:00")
        self.assertEqual(inst.provision.provision[0].action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.provision[0].action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.provision[0].action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.provision[0].action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.provision[0].class_fhir[0].code.value, FHIRCode("MedicationRequest").value)
        self.assertEqual(inst.provision.provision[0].class_fhir[0].code.as_json(), "MedicationRequest")
        self.assertEqual(inst.provision.provision[0].class_fhir[0].system.value, FHIRUri("http://hl7.org/fhir/resource-types").value)
        self.assertEqual(inst.provision.provision[0].class_fhir[0].system.as_json(), "http://hl7.org/fhir/resource-types")
        self.assertEqual(inst.provision.provision[0].type.value, FHIRCode("permit").value)
        self.assertEqual(inst.provision.provision[0].type.as_json(), "permit")
        self.assertEqual(inst.scope.coding[0].code.value, FHIRCode("patient-privacy").value)
        self.assertEqual(inst.scope.coding[0].code.as_json(), "patient-privacy")
        self.assertEqual(inst.scope.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentscope").value)
        self.assertEqual(inst.scope.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentscope")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testConsent6(self):
        inst = self.instantiate_from('consent-example-signature.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Consent instance')
        self.implConsent6(inst)

        js = inst.as_json()
        self.assertEqual("Consent", js["resourceType"])
        inst2 = consent.Consent(js)
        self.implConsent6(inst2)

    def implConsent6(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("npp").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "npp")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentcategorycodes").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentcategorycodes")
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2016-05-26T00:41:10-04:00").value)
        self.assertEqual(inst.dateTime.as_json(), "2016-05-26T00:41:10-04:00")
        self.assertEqual(inst.id.value, FHIRString("consent-example-signature").value)
        self.assertEqual(inst.id.as_json(), "consent-example-signature")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:oid:2.16.840.1.113883.3.72.5.9.1").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:oid:2.16.840.1.113883.3.72.5.9.1")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("494e0c7a-a69e-4fb4-9d02-6aae747790d7").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "494e0c7a-a69e-4fb4-9d02-6aae747790d7")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.policyRule.coding[0].code.value, FHIRCode("OPTIN").value)
        self.assertEqual(inst.policyRule.coding[0].code.as_json(), "OPTIN")
        self.assertEqual(inst.policyRule.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.policyRule.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.actor[0].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.actor[0].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.period.end.value, FHIRDateTime("2016-10-10").value)
        self.assertEqual(inst.provision.period.end.as_json(), "2016-10-10")
        self.assertEqual(inst.provision.period.start.value, FHIRDateTime("2015-10-10").value)
        self.assertEqual(inst.provision.period.start.as_json(), "2015-10-10")
        self.assertEqual(inst.provision.provision[0].actor[0].role.coding[0].code.value, FHIRCode("AUT").value)
        self.assertEqual(inst.provision.provision[0].actor[0].role.coding[0].code.as_json(), "AUT")
        self.assertEqual(inst.provision.provision[0].actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.provision[0].actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.provision[0].class_fhir[0].code.value, FHIRCode("application/hl7-cda+xml").value)
        self.assertEqual(inst.provision.provision[0].class_fhir[0].code.as_json(), "application/hl7-cda+xml")
        self.assertEqual(inst.provision.provision[0].class_fhir[0].system.value, FHIRUri("urn:ietf:bcp:13").value)
        self.assertEqual(inst.provision.provision[0].class_fhir[0].system.as_json(), "urn:ietf:bcp:13")
        self.assertEqual(inst.provision.provision[0].code[0].coding[0].code.value, FHIRCode("34133-9").value)
        self.assertEqual(inst.provision.provision[0].code[0].coding[0].code.as_json(), "34133-9")
        self.assertEqual(inst.provision.provision[0].code[0].coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.provision.provision[0].code[0].coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.provision.provision[0].code[1].coding[0].code.value, FHIRCode("18842-5").value)
        self.assertEqual(inst.provision.provision[0].code[1].coding[0].code.as_json(), "18842-5")
        self.assertEqual(inst.provision.provision[0].code[1].coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.provision.provision[0].code[1].coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.provision.provision[0].type.value, FHIRCode("permit").value)
        self.assertEqual(inst.provision.provision[0].type.as_json(), "permit")
        self.assertEqual(inst.scope.coding[0].code.value, FHIRCode("patient-privacy").value)
        self.assertEqual(inst.scope.coding[0].code.as_json(), "patient-privacy")
        self.assertEqual(inst.scope.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentscope").value)
        self.assertEqual(inst.scope.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentscope")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testConsent7(self):
        inst = self.instantiate_from('consent-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Consent instance')
        self.implConsent7(inst)

        js = inst.as_json()
        self.assertEqual("Consent", js["resourceType"])
        inst2 = consent.Consent(js)
        self.implConsent7(inst2)

    def implConsent7(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("59284-0").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "59284-0")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2016-05-11").value)
        self.assertEqual(inst.dateTime.as_json(), "2016-05-11")
        self.assertEqual(inst.id.value, FHIRString("consent-example-basic").value)
        self.assertEqual(inst.id.as_json(), "consent-example-basic")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.policyRule.coding[0].code.value, FHIRCode("OPTIN").value)
        self.assertEqual(inst.policyRule.coding[0].code.as_json(), "OPTIN")
        self.assertEqual(inst.policyRule.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.policyRule.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.period.end.value, FHIRDateTime("2016-01-01").value)
        self.assertEqual(inst.provision.period.end.as_json(), "2016-01-01")
        self.assertEqual(inst.provision.period.start.value, FHIRDateTime("1964-01-01").value)
        self.assertEqual(inst.provision.period.start.as_json(), "1964-01-01")
        self.assertEqual(inst.scope.coding[0].code.value, FHIRCode("patient-privacy").value)
        self.assertEqual(inst.scope.coding[0].code.as_json(), "patient-privacy")
        self.assertEqual(inst.scope.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentscope").value)
        self.assertEqual(inst.scope.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentscope")
        self.assertEqual(inst.sourceAttachment.title.value, FHIRString("The terms of the consent in lawyer speak.").value)
        self.assertEqual(inst.sourceAttachment.title.as_json(), "The terms of the consent in lawyer speak.")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testConsent8(self):
        inst = self.instantiate_from('consent-example-pkb.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Consent instance')
        self.implConsent8(inst)

        js = inst.as_json()
        self.assertEqual("Consent", js["resourceType"])
        inst2 = consent.Consent(js)
        self.implConsent8(inst2)

    def implConsent8(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("59284-0").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "59284-0")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2016-06-16").value)
        self.assertEqual(inst.dateTime.as_json(), "2016-06-16")
        self.assertEqual(inst.id.value, FHIRString("consent-example-pkb").value)
        self.assertEqual(inst.id.as_json(), "consent-example-pkb")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.policyRule.coding[0].code.value, FHIRCode("OPTOUT").value)
        self.assertEqual(inst.policyRule.coding[0].code.as_json(), "OPTOUT")
        self.assertEqual(inst.policyRule.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.policyRule.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.actor[0].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.actor[0].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.provision[0].action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.provision[0].action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.provision[0].action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.provision[0].action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.provision[0].actor[0].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.provision[0].actor[0].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.provision[0].actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.provision[0].actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.provision[0].securityLabel[0].code.value, FHIRCode("PSY").value)
        self.assertEqual(inst.provision.provision[0].securityLabel[0].code.as_json(), "PSY")
        self.assertEqual(inst.provision.provision[0].securityLabel[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.provision.provision[0].securityLabel[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.provision[1].action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.provision[1].action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.provision[1].action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.provision[1].action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.provision[1].actor[0].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.provision[1].actor[0].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.provision[1].actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.provision[1].actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.provision[1].securityLabel[0].code.value, FHIRCode("SPI").value)
        self.assertEqual(inst.provision.provision[1].securityLabel[0].code.as_json(), "SPI")
        self.assertEqual(inst.provision.provision[1].securityLabel[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.provision.provision[1].securityLabel[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.provision[2].action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.provision[2].action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.provision[2].action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.provision[2].action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.provision[2].actor[0].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.provision[2].actor[0].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.provision[2].actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.provision[2].actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.provision[2].securityLabel[0].code.value, FHIRCode("N").value)
        self.assertEqual(inst.provision.provision[2].securityLabel[0].code.as_json(), "N")
        self.assertEqual(inst.provision.provision[2].securityLabel[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-Confidentiality").value)
        self.assertEqual(inst.provision.provision[2].securityLabel[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-Confidentiality")
        self.assertEqual(inst.provision.provision[3].action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.provision[3].action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.provision[3].action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.provision[3].action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.provision[3].actor[0].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.provision[3].actor[0].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.provision[3].actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.provision[3].actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.provision[3].securityLabel[0].code.value, FHIRCode("PSY").value)
        self.assertEqual(inst.provision.provision[3].securityLabel[0].code.as_json(), "PSY")
        self.assertEqual(inst.provision.provision[3].securityLabel[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.provision.provision[3].securityLabel[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.provision[4].action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.provision[4].action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.provision[4].action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.provision[4].action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.provision[4].actor[0].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.provision[4].actor[0].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.provision[4].actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.provision[4].actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.provision[4].securityLabel[0].code.value, FHIRCode("SPI").value)
        self.assertEqual(inst.provision.provision[4].securityLabel[0].code.as_json(), "SPI")
        self.assertEqual(inst.provision.provision[4].securityLabel[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.provision.provision[4].securityLabel[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.provision[5].action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.provision[5].action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.provision[5].action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.provision[5].action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.provision[5].actor[0].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.provision[5].actor[0].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.provision[5].actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.provision[5].actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.provision[5].securityLabel[0].code.value, FHIRCode("SEX").value)
        self.assertEqual(inst.provision.provision[5].securityLabel[0].code.as_json(), "SEX")
        self.assertEqual(inst.provision.provision[5].securityLabel[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.provision.provision[5].securityLabel[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.provision[6].action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.provision[6].action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.provision[6].action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.provision[6].action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.provision[6].actor[0].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.provision[6].actor[0].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.provision[6].actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.provision[6].actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.provision[6].securityLabel[0].code.value, FHIRCode("N").value)
        self.assertEqual(inst.provision.provision[6].securityLabel[0].code.as_json(), "N")
        self.assertEqual(inst.provision.provision[6].securityLabel[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-Confidentiality").value)
        self.assertEqual(inst.provision.provision[6].securityLabel[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-Confidentiality")
        self.assertEqual(inst.provision.provision[7].action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.provision[7].action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.provision[7].action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.provision[7].action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.provision[7].actor[0].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.provision[7].actor[0].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.provision[7].actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.provision[7].actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.provision[7].securityLabel[0].code.value, FHIRCode("PSY").value)
        self.assertEqual(inst.provision.provision[7].securityLabel[0].code.as_json(), "PSY")
        self.assertEqual(inst.provision.provision[7].securityLabel[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.provision.provision[7].securityLabel[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.provision[8].action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.provision[8].action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.provision[8].action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.provision[8].action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.provision[8].actor[0].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.provision[8].actor[0].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.provision[8].actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.provision[8].actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.provision[8].securityLabel[0].code.value, FHIRCode("SPI").value)
        self.assertEqual(inst.provision.provision[8].securityLabel[0].code.as_json(), "SPI")
        self.assertEqual(inst.provision.provision[8].securityLabel[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.provision.provision[8].securityLabel[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.provision[9].action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.provision[9].action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.provision[9].action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.provision[9].action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.provision[9].actor[0].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.provision[9].actor[0].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.provision[9].actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.provision[9].actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.provision[9].securityLabel[0].code.value, FHIRCode("SEX").value)
        self.assertEqual(inst.provision.provision[9].securityLabel[0].code.as_json(), "SEX")
        self.assertEqual(inst.provision.provision[9].securityLabel[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.provision.provision[9].securityLabel[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.securityLabel[0].code.value, FHIRCode("N").value)
        self.assertEqual(inst.provision.securityLabel[0].code.as_json(), "N")
        self.assertEqual(inst.provision.securityLabel[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-Confidentiality").value)
        self.assertEqual(inst.provision.securityLabel[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-Confidentiality")
        self.assertEqual(inst.scope.coding[0].code.value, FHIRCode("patient-privacy").value)
        self.assertEqual(inst.scope.coding[0].code.as_json(), "patient-privacy")
        self.assertEqual(inst.scope.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentscope").value)
        self.assertEqual(inst.scope.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentscope")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testConsent9(self):
        inst = self.instantiate_from('consent-example-Out.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Consent instance')
        self.implConsent9(inst)

        js = inst.as_json()
        self.assertEqual("Consent", js["resourceType"])
        inst2 = consent.Consent(js)
        self.implConsent9(inst2)

    def implConsent9(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("59284-0").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "59284-0")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2015-11-18").value)
        self.assertEqual(inst.dateTime.as_json(), "2015-11-18")
        self.assertEqual(inst.id.value, FHIRString("consent-example-Out").value)
        self.assertEqual(inst.id.as_json(), "consent-example-Out")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.policyRule.coding[0].code.value, FHIRCode("OPTOUT").value)
        self.assertEqual(inst.policyRule.coding[0].code.as_json(), "OPTOUT")
        self.assertEqual(inst.policyRule.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.policyRule.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.actor[0].role.coding[0].code.value, FHIRCode("CST").value)
        self.assertEqual(inst.provision.actor[0].role.coding[0].code.as_json(), "CST")
        self.assertEqual(inst.provision.actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.scope.coding[0].code.value, FHIRCode("patient-privacy").value)
        self.assertEqual(inst.scope.coding[0].code.as_json(), "patient-privacy")
        self.assertEqual(inst.scope.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentscope").value)
        self.assertEqual(inst.scope.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentscope")
        self.assertEqual(inst.sourceAttachment.title.value, FHIRString("The terms of the consent in lawyer speak.").value)
        self.assertEqual(inst.sourceAttachment.title.as_json(), "The terms of the consent in lawyer speak.")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testConsent10(self):
        inst = self.instantiate_from('consent-example-grantor.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Consent instance')
        self.implConsent10(inst)

        js = inst.as_json()
        self.assertEqual("Consent", js["resourceType"])
        inst2 = consent.Consent(js)
        self.implConsent10(inst2)

    def implConsent10(self, inst):
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("INFAO").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "INFAO")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.dateTime.value, FHIRDateTime("2015-11-18").value)
        self.assertEqual(inst.dateTime.as_json(), "2015-11-18")
        self.assertEqual(inst.id.value, FHIRString("consent-example-grantor").value)
        self.assertEqual(inst.id.as_json(), "consent-example-grantor")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.policyRule.coding[0].code.value, FHIRCode("OPTOUT").value)
        self.assertEqual(inst.policyRule.coding[0].code.as_json(), "OPTOUT")
        self.assertEqual(inst.policyRule.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.policyRule.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.provision.action[0].coding[0].code.value, FHIRCode("access").value)
        self.assertEqual(inst.provision.action[0].coding[0].code.as_json(), "access")
        self.assertEqual(inst.provision.action[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentaction").value)
        self.assertEqual(inst.provision.action[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentaction")
        self.assertEqual(inst.provision.actor[0].role.coding[0].code.value, FHIRCode("CST").value)
        self.assertEqual(inst.provision.actor[0].role.coding[0].code.as_json(), "CST")
        self.assertEqual(inst.provision.actor[0].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.actor[0].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.provision.actor[1].role.coding[0].code.value, FHIRCode("PRCP").value)
        self.assertEqual(inst.provision.actor[1].role.coding[0].code.as_json(), "PRCP")
        self.assertEqual(inst.provision.actor[1].role.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.provision.actor[1].role.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.scope.coding[0].code.value, FHIRCode("patient-privacy").value)
        self.assertEqual(inst.scope.coding[0].code.as_json(), "patient-privacy")
        self.assertEqual(inst.scope.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/consentscope").value)
        self.assertEqual(inst.scope.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/consentscope")
        self.assertEqual(inst.sourceAttachment.title.value, FHIRString("The terms of the consent in lawyer speak.").value)
        self.assertEqual(inst.sourceAttachment.title.as_json(), "The terms of the consent in lawyer speak.")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")


from fhirclient.models.fhirdatatypes import FHIRCode, FHIRUri, FHIRDateTime, FHIRString