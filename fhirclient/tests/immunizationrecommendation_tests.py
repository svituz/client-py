#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import immunizationrecommendation

class ImmunizationRecommendationTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("ImmunizationRecommendation", js["resourceType"])
        return immunizationrecommendation.ImmunizationRecommendation(js)

    def testImmunizationRecommendation1(self):
        inst = self.instantiate_from('immunizationrecommendation-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ImmunizationRecommendation instance')
        self.implImmunizationRecommendation1(inst)

        js = inst.as_json()
        self.assertEqual("ImmunizationRecommendation", js["resourceType"])
        inst2 = immunizationrecommendation.ImmunizationRecommendation(js)
        self.implImmunizationRecommendation1(inst2)

    def implImmunizationRecommendation1(self, inst):
        self.assertEqual(inst.date.value, FHIRDateTime("2015-02-09T11:04:15.817-05:00").value)
        self.assertEqual(inst.date.as_json(), "2015-02-09T11:04:15.817-05:00")
        self.assertEqual(inst.id.value, FHIRString("example").value)
        self.assertEqual(inst.id.as_json(), "example")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:ietf:rfc:3986").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:ietf:rfc:3986")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("urn:oid:1.3.6.1.4.1.21367.2005.3.7.1235").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "urn:oid:1.3.6.1.4.1.21367.2005.3.7.1235")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.recommendation[0].dateCriterion[0].code.coding[0].code.value, FHIRCode("earliest").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[0].code.coding[0].code.as_json(), "earliest")
        self.assertEqual(inst.recommendation[0].dateCriterion[0].code.coding[0].display.value, FHIRString("Earliest Date").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[0].code.coding[0].display.as_json(), "Earliest Date")
        self.assertEqual(inst.recommendation[0].dateCriterion[0].code.coding[0].system.value, FHIRUri("http://example.org/fhir/CodeSystem/immunization-recommendation-date-criterion").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[0].code.coding[0].system.as_json(), "http://example.org/fhir/CodeSystem/immunization-recommendation-date-criterion")
        self.assertEqual(inst.recommendation[0].dateCriterion[0].value.value, FHIRDateTime("2015-12-01T00:00:00-05:00").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[0].value.as_json(), "2015-12-01T00:00:00-05:00")
        self.assertEqual(inst.recommendation[0].dateCriterion[1].code.coding[0].code.value, FHIRCode("recommended").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[1].code.coding[0].code.as_json(), "recommended")
        self.assertEqual(inst.recommendation[0].dateCriterion[1].code.coding[0].display.value, FHIRString("Recommended").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[1].code.coding[0].display.as_json(), "Recommended")
        self.assertEqual(inst.recommendation[0].dateCriterion[1].code.coding[0].system.value, FHIRUri("http://example.org/fhir/CodeSystem/immunization-recommendation-date-criterion").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[1].code.coding[0].system.as_json(), "http://example.org/fhir/CodeSystem/immunization-recommendation-date-criterion")
        self.assertEqual(inst.recommendation[0].dateCriterion[1].value.value, FHIRDateTime("2015-12-01T00:00:00-05:00").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[1].value.as_json(), "2015-12-01T00:00:00-05:00")
        self.assertEqual(inst.recommendation[0].dateCriterion[2].code.coding[0].code.value, FHIRCode("overdue").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[2].code.coding[0].code.as_json(), "overdue")
        self.assertEqual(inst.recommendation[0].dateCriterion[2].code.coding[0].display.value, FHIRString("Past Due Date").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[2].code.coding[0].display.as_json(), "Past Due Date")
        self.assertEqual(inst.recommendation[0].dateCriterion[2].code.coding[0].system.value, FHIRUri("http://example.org/fhir/CodeSystem/immunization-recommendation-date-criterion").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[2].code.coding[0].system.as_json(), "http://example.org/fhir/CodeSystem/immunization-recommendation-date-criterion")
        self.assertEqual(inst.recommendation[0].dateCriterion[2].value.value, FHIRDateTime("2016-12-28T00:00:00-05:00").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[2].value.as_json(), "2016-12-28T00:00:00-05:00")
        self.assertEqual(inst.recommendation[0].description.value, FHIRString("First sequence in protocol").value)
        self.assertEqual(inst.recommendation[0].description.as_json(), "First sequence in protocol")
        self.assertEqual(inst.recommendation[0].doseNumberPositiveInt.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.recommendation[0].doseNumberPositiveInt.as_json(), 1)
        self.assertEqual(inst.recommendation[0].forecastStatus.text.value, FHIRString("Not Complete").value)
        self.assertEqual(inst.recommendation[0].forecastStatus.text.as_json(), "Not Complete")
        self.assertEqual(inst.recommendation[0].series.value, FHIRString("Vaccination Series 1").value)
        self.assertEqual(inst.recommendation[0].series.as_json(), "Vaccination Series 1")
        self.assertEqual(inst.recommendation[0].seriesDosesPositiveInt.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.recommendation[0].seriesDosesPositiveInt.as_json(), 3)
        self.assertEqual(inst.recommendation[0].vaccineCode[0].coding[0].code.value, FHIRCode("14745005").value)
        self.assertEqual(inst.recommendation[0].vaccineCode[0].coding[0].code.as_json(), "14745005")
        self.assertEqual(inst.recommendation[0].vaccineCode[0].coding[0].display.value, FHIRString("Hepatitis A vaccine").value)
        self.assertEqual(inst.recommendation[0].vaccineCode[0].coding[0].display.as_json(), "Hepatitis A vaccine")
        self.assertEqual(inst.recommendation[0].vaccineCode[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.recommendation[0].vaccineCode[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Authored by Joginder Madra</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Authored by Joginder Madra</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testImmunizationRecommendation2(self):
        inst = self.instantiate_from('immunizationrecommendation-example-target-disease.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ImmunizationRecommendation instance')
        self.implImmunizationRecommendation2(inst)

        js = inst.as_json()
        self.assertEqual("ImmunizationRecommendation", js["resourceType"])
        inst2 = immunizationrecommendation.ImmunizationRecommendation(js)
        self.implImmunizationRecommendation2(inst2)

    def implImmunizationRecommendation2(self, inst):
        self.assertEqual(inst.date.value, FHIRDateTime("2015-02-09T11:04:15.817-05:00").value)
        self.assertEqual(inst.date.as_json(), "2015-02-09T11:04:15.817-05:00")
        self.assertEqual(inst.id.value, FHIRString("example").value)
        self.assertEqual(inst.id.as_json(), "example")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:ietf:rfc:3986").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:ietf:rfc:3986")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("urn:oid:1.3.6.1.4.1.21367.2005.3.7.1235").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "urn:oid:1.3.6.1.4.1.21367.2005.3.7.1235")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.recommendation[0].dateCriterion[0].code.coding[0].code.value, FHIRCode("30981-5").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[0].code.coding[0].code.as_json(), "30981-5")
        self.assertEqual(inst.recommendation[0].dateCriterion[0].code.coding[0].display.value, FHIRString("Earliest date to give").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[0].code.coding[0].display.as_json(), "Earliest date to give")
        self.assertEqual(inst.recommendation[0].dateCriterion[0].code.coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[0].code.coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.recommendation[0].dateCriterion[0].value.value, FHIRDateTime("2015-12-01T00:00:00-05:00").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[0].value.as_json(), "2015-12-01T00:00:00-05:00")
        self.assertEqual(inst.recommendation[0].dateCriterion[1].code.coding[0].code.value, FHIRCode("recommended").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[1].code.coding[0].code.as_json(), "recommended")
        self.assertEqual(inst.recommendation[0].dateCriterion[1].code.coding[0].display.value, FHIRString("Recommended").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[1].code.coding[0].display.as_json(), "Recommended")
        self.assertEqual(inst.recommendation[0].dateCriterion[1].code.coding[0].system.value, FHIRUri("http://example.org/fhir/CodeSystem/immunization-recommendation-date-criterion").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[1].code.coding[0].system.as_json(), "http://example.org/fhir/CodeSystem/immunization-recommendation-date-criterion")
        self.assertEqual(inst.recommendation[0].dateCriterion[1].value.value, FHIRDateTime("2015-12-01T00:00:00-05:00").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[1].value.as_json(), "2015-12-01T00:00:00-05:00")
        self.assertEqual(inst.recommendation[0].dateCriterion[2].code.coding[0].code.value, FHIRCode("overdue").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[2].code.coding[0].code.as_json(), "overdue")
        self.assertEqual(inst.recommendation[0].dateCriterion[2].code.coding[0].display.value, FHIRString("Past Due Date").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[2].code.coding[0].display.as_json(), "Past Due Date")
        self.assertEqual(inst.recommendation[0].dateCriterion[2].code.coding[0].system.value, FHIRUri("http://example.org/fhir/CodeSystem/immunization-recommendation-date-criterion").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[2].code.coding[0].system.as_json(), "http://example.org/fhir/CodeSystem/immunization-recommendation-date-criterion")
        self.assertEqual(inst.recommendation[0].dateCriterion[2].value.value, FHIRDateTime("2016-12-28T00:00:00-05:00").value)
        self.assertEqual(inst.recommendation[0].dateCriterion[2].value.as_json(), "2016-12-28T00:00:00-05:00")
        self.assertEqual(inst.recommendation[0].description.value, FHIRString("First sequence in protocol").value)
        self.assertEqual(inst.recommendation[0].description.as_json(), "First sequence in protocol")
        self.assertEqual(inst.recommendation[0].doseNumberPositiveInt.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.recommendation[0].doseNumberPositiveInt.as_json(), 1)
        self.assertEqual(inst.recommendation[0].forecastStatus.text.value, FHIRString("Not Complete").value)
        self.assertEqual(inst.recommendation[0].forecastStatus.text.as_json(), "Not Complete")
        self.assertEqual(inst.recommendation[0].series.value, FHIRString("Vaccination Series 1").value)
        self.assertEqual(inst.recommendation[0].series.as_json(), "Vaccination Series 1")
        self.assertEqual(inst.recommendation[0].seriesDosesPositiveInt.value, FHIRPositiveInt('3').value)
        self.assertEqual(inst.recommendation[0].seriesDosesPositiveInt.as_json(), 3)
        self.assertEqual(inst.recommendation[0].targetDisease.coding[0].code.value, FHIRCode("40468003").value)
        self.assertEqual(inst.recommendation[0].targetDisease.coding[0].code.as_json(), "40468003")
        self.assertEqual(inst.recommendation[0].targetDisease.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.recommendation[0].targetDisease.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Authored by Joginder Madra</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Authored by Joginder Madra</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")


from fhirclient.models.fhirdatatypes import FHIRDateTime, FHIRString, FHIRUri, FHIRCode, FHIRPositiveInt