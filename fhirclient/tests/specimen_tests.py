#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import specimen

class SpecimenTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Specimen", js["resourceType"])
        return specimen.Specimen(js)

    def testSpecimen1(self):
        inst = self.instantiate_from('specimen-example-pooled-serum.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Specimen instance')
        self.implSpecimen1(inst)

        js = inst.as_json()
        self.assertEqual("Specimen", js["resourceType"])
        inst2 = specimen.Specimen(js)
        self.implSpecimen1(inst2)

    def implSpecimen1(self, inst):
        self.assertEqual(inst.accessionIdentifier.system.value, FHIRUri("https://vetmed.iastate.edu/vdl").value)
        self.assertEqual(inst.accessionIdentifier.system.as_json(), "https://vetmed.iastate.edu/vdl")
        self.assertEqual(inst.accessionIdentifier.value.value, FHIRString("20171120-1234").value)
        self.assertEqual(inst.accessionIdentifier.value.as_json(), "20171120-1234")
        self.assertEqual(inst.collection.collectedDateTime.value, FHIRDateTime("2017-11-14").value)
        self.assertEqual(inst.collection.collectedDateTime.as_json(), "2017-11-14")
        self.assertEqual(inst.container[0].type.coding[0].code.value, FHIRCode("RTT").value)
        self.assertEqual(inst.container[0].type.coding[0].code.as_json(), "RTT")
        self.assertEqual(inst.container[0].type.coding[0].display.value, FHIRString("Red Top Tube").value)
        self.assertEqual(inst.container[0].type.coding[0].display.as_json(), "Red Top Tube")
        self.assertEqual(inst.container[0].type.coding[0].system.value, FHIRUri("https://vetmed.iastate.edu/vdl").value)
        self.assertEqual(inst.container[0].type.coding[0].system.as_json(), "https://vetmed.iastate.edu/vdl")
        self.assertEqual(inst.container[0].type.text.value, FHIRString("Red Top Blood Collection Tube").value)
        self.assertEqual(inst.container[0].type.text.as_json(), "Red Top Blood Collection Tube")
        self.assertEqual(inst.id.value, FHIRString("pooled-serum").value)
        self.assertEqual(inst.id.as_json(), "pooled-serum")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.note[0].text.value, FHIRMarkdown("Pooled serum sample from 30 individuals").value)
        self.assertEqual(inst.note[0].text.as_json(), "Pooled serum sample from 30 individuals")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("Serum sample, pooled").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "Serum sample, pooled")
        self.assertEqual(inst.type.coding[0].display.value, FHIRString("Serum sample, pooled").value)
        self.assertEqual(inst.type.coding[0].display.as_json(), "Serum sample, pooled")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("https://vetmed.iastate.edu/vdl").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "https://vetmed.iastate.edu/vdl")
        self.assertEqual(inst.type.text.value, FHIRString("Pooled serum sample").value)
        self.assertEqual(inst.type.text.as_json(), "Pooled serum sample")

    def testSpecimen2(self):
        inst = self.instantiate_from('specimen-example-serum.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Specimen instance')
        self.implSpecimen2(inst)

        js = inst.as_json()
        self.assertEqual("Specimen", js["resourceType"])
        inst2 = specimen.Specimen(js)
        self.implSpecimen2(inst2)

    def implSpecimen2(self, inst):
        self.assertEqual(inst.accessionIdentifier.system.value, FHIRUri("http://acme.com/labs/accession-ids").value)
        self.assertEqual(inst.accessionIdentifier.system.as_json(), "http://acme.com/labs/accession-ids")
        self.assertEqual(inst.accessionIdentifier.value.value, FHIRString("20150816-00124").value)
        self.assertEqual(inst.accessionIdentifier.value.as_json(), "20150816-00124")
        self.assertEqual(inst.collection.collectedDateTime.value, FHIRDateTime("2015-08-16T06:40:17Z").value)
        self.assertEqual(inst.collection.collectedDateTime.as_json(), "2015-08-16T06:40:17Z")
        self.assertEqual(inst.container[0].type.coding[0].code.value, FHIRCode("SST").value)
        self.assertEqual(inst.container[0].type.coding[0].code.as_json(), "SST")
        self.assertEqual(inst.container[0].type.coding[0].display.value, FHIRString("Serum Separator Tube").value)
        self.assertEqual(inst.container[0].type.coding[0].display.as_json(), "Serum Separator Tube")
        self.assertEqual(inst.container[0].type.coding[0].system.value, FHIRUri("http://acme.com/labs").value)
        self.assertEqual(inst.container[0].type.coding[0].system.as_json(), "http://acme.com/labs")
        self.assertEqual(inst.id.value, FHIRString("sst").value)
        self.assertEqual(inst.id.as_json(), "sst")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("119364003").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "119364003")
        self.assertEqual(inst.type.coding[0].display.value, FHIRString("Serum sample").value)
        self.assertEqual(inst.type.coding[0].display.as_json(), "Serum sample")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://snomed.info/sct")

    def testSpecimen3(self):
        inst = self.instantiate_from('specimen-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Specimen instance')
        self.implSpecimen3(inst)

        js = inst.as_json()
        self.assertEqual("Specimen", js["resourceType"])
        inst2 = specimen.Specimen(js)
        self.implSpecimen3(inst2)

    def implSpecimen3(self, inst):
        self.assertEqual(inst.accessionIdentifier.system.value, FHIRUri("http://lab.acme.org/specimens/2011").value)
        self.assertEqual(inst.accessionIdentifier.system.as_json(), "http://lab.acme.org/specimens/2011")
        self.assertEqual(inst.accessionIdentifier.value.value, FHIRString("X352356").value)
        self.assertEqual(inst.accessionIdentifier.value.as_json(), "X352356")
        self.assertEqual(inst.collection.bodySite.coding[0].code.value, FHIRCode("49852007").value)
        self.assertEqual(inst.collection.bodySite.coding[0].code.as_json(), "49852007")
        self.assertEqual(inst.collection.bodySite.coding[0].display.value, FHIRString("Structure of median cubital vein (body structure)").value)
        self.assertEqual(inst.collection.bodySite.coding[0].display.as_json(), "Structure of median cubital vein (body structure)")
        self.assertEqual(inst.collection.bodySite.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.collection.bodySite.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.collection.bodySite.text.value, FHIRString("Right median cubital vein").value)
        self.assertEqual(inst.collection.bodySite.text.as_json(), "Right median cubital vein")
        self.assertEqual(inst.collection.collectedDateTime.value, FHIRDateTime("2011-05-30T06:15:00Z").value)
        self.assertEqual(inst.collection.collectedDateTime.as_json(), "2011-05-30T06:15:00Z")
        self.assertEqual(inst.collection.method.coding[0].code.value, FHIRCode("LNV").value)
        self.assertEqual(inst.collection.method.coding[0].code.as_json(), "LNV")
        self.assertEqual(inst.collection.method.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0488").value)
        self.assertEqual(inst.collection.method.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0488")
        self.assertEqual(inst.collection.quantity.unit.value, FHIRString("mL").value)
        self.assertEqual(inst.collection.quantity.unit.as_json(), "mL")
        self.assertEqual(inst.collection.quantity.value, 6)
        self.assertEqual(inst.contained[0].id.value, FHIRString("hep").value)
        self.assertEqual(inst.contained[0].id.as_json(), "hep")
        self.assertEqual(inst.container[0].capacity.unit.value, FHIRString("mL").value)
        self.assertEqual(inst.container[0].capacity.unit.as_json(), "mL")
        self.assertEqual(inst.container[0].capacity.value, 10)
        self.assertEqual(inst.container[0].description.value, FHIRString("Green Gel tube").value)
        self.assertEqual(inst.container[0].description.as_json(), "Green Gel tube")
        self.assertEqual(inst.container[0].identifier[0].value.value, FHIRString("48736-15394-75465").value)
        self.assertEqual(inst.container[0].identifier[0].value.as_json(), "48736-15394-75465")
        self.assertEqual(inst.container[0].specimenQuantity.unit.value, FHIRString("mL").value)
        self.assertEqual(inst.container[0].specimenQuantity.unit.as_json(), "mL")
        self.assertEqual(inst.container[0].specimenQuantity.value, 6)
        self.assertEqual(inst.container[0].type.text.value, FHIRString("Vacutainer").value)
        self.assertEqual(inst.container[0].type.text.as_json(), "Vacutainer")
        self.assertEqual(inst.id.value, FHIRString("101").value)
        self.assertEqual(inst.id.as_json(), "101")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://ehr.acme.org/identifiers/collections").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://ehr.acme.org/identifiers/collections")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("23234352356").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "23234352356")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.note[0].text.value, FHIRMarkdown("Specimen is grossly lipemic").value)
        self.assertEqual(inst.note[0].text.as_json(), "Specimen is grossly lipemic")
        self.assertEqual(inst.receivedTime.value, FHIRDateTime("2011-03-04T07:03:00Z").value)
        self.assertEqual(inst.receivedTime.as_json(), "2011-03-04T07:03:00Z")
        self.assertEqual(inst.status.value, FHIRCode("available").value)
        self.assertEqual(inst.status.as_json(), "available")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("122555007").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "122555007")
        self.assertEqual(inst.type.coding[0].display.value, FHIRString("Venous blood specimen").value)
        self.assertEqual(inst.type.coding[0].display.as_json(), "Venous blood specimen")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://snomed.info/sct")

    def testSpecimen4(self):
        inst = self.instantiate_from('specimen-example-urine.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Specimen instance')
        self.implSpecimen4(inst)

        js = inst.as_json()
        self.assertEqual("Specimen", js["resourceType"])
        inst2 = specimen.Specimen(js)
        self.implSpecimen4(inst2)

    def implSpecimen4(self, inst):
        self.assertEqual(inst.accessionIdentifier.system.value, FHIRUri("http://lab.acme.org/specimens/2015").value)
        self.assertEqual(inst.accessionIdentifier.system.as_json(), "http://lab.acme.org/specimens/2015")
        self.assertEqual(inst.accessionIdentifier.value.value, FHIRString("X352356").value)
        self.assertEqual(inst.accessionIdentifier.value.as_json(), "X352356")
        self.assertEqual(inst.collection.collectedDateTime.value, FHIRDateTime("2015-08-18T07:03:00Z").value)
        self.assertEqual(inst.collection.collectedDateTime.as_json(), "2015-08-18T07:03:00Z")
        self.assertEqual(inst.container[0].capacity.unit.value, FHIRString("mls").value)
        self.assertEqual(inst.container[0].capacity.unit.as_json(), "mls")
        self.assertEqual(inst.container[0].capacity.value, 50)
        self.assertEqual(inst.container[0].specimenQuantity.unit.value, FHIRString("mls").value)
        self.assertEqual(inst.container[0].specimenQuantity.unit.as_json(), "mls")
        self.assertEqual(inst.container[0].specimenQuantity.value, 10)
        self.assertEqual(inst.container[0].type.text.value, FHIRString("Non-sterile specimen container").value)
        self.assertEqual(inst.container[0].type.text.as_json(), "Non-sterile specimen container")
        self.assertEqual(inst.id.value, FHIRString("vma-urine").value)
        self.assertEqual(inst.id.as_json(), "vma-urine")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.processing[0].description.value, FHIRString("Acidify to pH < 3.0 with 6 N HCl.").value)
        self.assertEqual(inst.processing[0].description.as_json(), "Acidify to pH < 3.0 with 6 N HCl.")
        self.assertEqual(inst.processing[0].procedure.coding[0].code.value, FHIRCode("ACID").value)
        self.assertEqual(inst.processing[0].procedure.coding[0].code.as_json(), "ACID")
        self.assertEqual(inst.processing[0].procedure.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0373").value)
        self.assertEqual(inst.processing[0].procedure.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0373")
        self.assertEqual(inst.processing[0].timeDateTime.value, FHIRDateTime("2015-08-18T08:10:00Z").value)
        self.assertEqual(inst.processing[0].timeDateTime.as_json(), "2015-08-18T08:10:00Z")
        self.assertEqual(inst.receivedTime.value, FHIRDateTime("2015-08-18T07:03:00Z").value)
        self.assertEqual(inst.receivedTime.as_json(), "2015-08-18T07:03:00Z")
        self.assertEqual(inst.status.value, FHIRCode("available").value)
        self.assertEqual(inst.status.as_json(), "available")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("RANDU").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "RANDU")
        self.assertEqual(inst.type.coding[0].display.value, FHIRString("Urine, Random").value)
        self.assertEqual(inst.type.coding[0].display.as_json(), "Urine, Random")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0487").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0487")

    def testSpecimen5(self):
        inst = self.instantiate_from('specimen-example-isolate.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Specimen instance')
        self.implSpecimen5(inst)

        js = inst.as_json()
        self.assertEqual("Specimen", js["resourceType"])
        inst2 = specimen.Specimen(js)
        self.implSpecimen5(inst2)

    def implSpecimen5(self, inst):
        self.assertEqual(inst.accessionIdentifier.system.value, FHIRUri("http://lab.acme.org/specimens/2011").value)
        self.assertEqual(inst.accessionIdentifier.system.as_json(), "http://lab.acme.org/specimens/2011")
        self.assertEqual(inst.accessionIdentifier.value.value, FHIRString("X352356-ISO1").value)
        self.assertEqual(inst.accessionIdentifier.value.as_json(), "X352356-ISO1")
        self.assertEqual(inst.collection.collectedDateTime.value, FHIRDateTime("2015-08-16T07:03:00Z").value)
        self.assertEqual(inst.collection.collectedDateTime.as_json(), "2015-08-16T07:03:00Z")
        self.assertEqual(inst.collection.method.coding[0].code.value, FHIRCode("BAP").value)
        self.assertEqual(inst.collection.method.coding[0].code.as_json(), "BAP")
        self.assertEqual(inst.collection.method.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0488").value)
        self.assertEqual(inst.collection.method.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0488")
        self.assertEqual(inst.contained[0].id.value, FHIRString("stool").value)
        self.assertEqual(inst.contained[0].id.as_json(), "stool")
        self.assertEqual(inst.id.value, FHIRString("isolate").value)
        self.assertEqual(inst.id.as_json(), "isolate")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.note[0].text.value, FHIRMarkdown("Patient dropped off specimen").value)
        self.assertEqual(inst.note[0].text.as_json(), "Patient dropped off specimen")
        self.assertEqual(inst.receivedTime.value, FHIRDateTime("2015-08-18T07:03:00Z").value)
        self.assertEqual(inst.receivedTime.as_json(), "2015-08-18T07:03:00Z")
        self.assertEqual(inst.status.value, FHIRCode("available").value)
        self.assertEqual(inst.status.as_json(), "available")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("429951000124103").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "429951000124103")
        self.assertEqual(inst.type.coding[0].display.value, FHIRString("Bacterial isolate specimen").value)
        self.assertEqual(inst.type.coding[0].display.as_json(), "Bacterial isolate specimen")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://snomed.info/sct")


from fhirclient.models.fhirdatatypes import FHIRUri, FHIRString, FHIRDateTime, FHIRCode, FHIRMarkdown