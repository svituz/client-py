#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import questionnaire

class QuestionnaireTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Questionnaire", js["resourceType"])
        return questionnaire.Questionnaire(js)

    def testQuestionnaire1(self):
        inst = self.instantiate_from('questionnaire-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Questionnaire instance')
        self.implQuestionnaire1(inst)

        js = inst.as_json()
        self.assertEqual("Questionnaire", js["resourceType"])
        inst2 = questionnaire.Questionnaire(js)
        self.implQuestionnaire1(inst2)

    def implQuestionnaire1(self, inst):
        self.assertEqual(inst.date.value, FHIRDateTime("2012-01").value)
        self.assertEqual(inst.date.as_json(), "2012-01")
        self.assertEqual(inst.item[0].code[0].code.value, FHIRCode("COMORBIDITY").value)
        self.assertEqual(inst.item[0].code[0].code.as_json(), "COMORBIDITY")
        self.assertEqual(inst.item[0].code[0].system.value, FHIRUri("http://example.org/system/code/sections").value)
        self.assertEqual(inst.item[0].code[0].system.as_json(), "http://example.org/system/code/sections")
        self.assertEqual(inst.item[0].item[0].answerValueSet.value, FHIRCanonical("http://hl7.org/fhir/ValueSet/yesnodontknow").value)
        self.assertEqual(inst.item[0].item[0].answerValueSet.as_json(), "http://hl7.org/fhir/ValueSet/yesnodontknow")
        self.assertEqual(inst.item[0].item[0].code[0].code.value, FHIRCode("COMORB").value)
        self.assertEqual(inst.item[0].item[0].code[0].code.as_json(), "COMORB")
        self.assertEqual(inst.item[0].item[0].code[0].system.value, FHIRUri("http://example.org/system/code/questions").value)
        self.assertEqual(inst.item[0].item[0].code[0].system.as_json(), "http://example.org/system/code/questions")
        self.assertEqual(inst.item[0].item[0].item[0].code[0].code.value, FHIRCode("CARDIAL").value)
        self.assertEqual(inst.item[0].item[0].item[0].code[0].code.as_json(), "CARDIAL")
        self.assertEqual(inst.item[0].item[0].item[0].code[0].system.value, FHIRUri("http://example.org/system/code/sections").value)
        self.assertEqual(inst.item[0].item[0].item[0].code[0].system.as_json(), "http://example.org/system/code/sections")
        self.assertEqual(inst.item[0].item[0].item[0].enableWhen[0].answerCoding.code.value, FHIRCode("Y").value)
        self.assertEqual(inst.item[0].item[0].item[0].enableWhen[0].answerCoding.code.as_json(), "Y")
        self.assertEqual(inst.item[0].item[0].item[0].enableWhen[0].answerCoding.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0136").value)
        self.assertEqual(inst.item[0].item[0].item[0].enableWhen[0].answerCoding.system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0136")
        self.assertEqual(inst.item[0].item[0].item[0].enableWhen[0].operator.value, FHIRCode("=").value)
        self.assertEqual(inst.item[0].item[0].item[0].enableWhen[0].operator.as_json(), "=")
        self.assertEqual(inst.item[0].item[0].item[0].enableWhen[0].question.value, FHIRString("1.1").value)
        self.assertEqual(inst.item[0].item[0].item[0].enableWhen[0].question.as_json(), "1.1")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].answerValueSet.value, FHIRCanonical("http://hl7.org/fhir/ValueSet/yesnodontknow").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].answerValueSet.as_json(), "http://hl7.org/fhir/ValueSet/yesnodontknow")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].code[0].code.value, FHIRCode("COMORBCAR").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].code[0].code.as_json(), "COMORBCAR")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].code[0].system.value, FHIRUri("http://example.org/system/code/questions").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].code[0].system.as_json(), "http://example.org/system/code/questions")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].answerValueSet.value, FHIRCanonical("http://hl7.org/fhir/ValueSet/yesnodontknow").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].answerValueSet.as_json(), "http://hl7.org/fhir/ValueSet/yesnodontknow")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[0].code.value, FHIRCode("COMCAR00").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[0].code.as_json(), "COMCAR00")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[0].display.value, FHIRString("Angina Pectoris").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[0].display.as_json(), "Angina Pectoris")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[0].system.value, FHIRUri("http://example.org/system/code/questions").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[0].system.as_json(), "http://example.org/system/code/questions")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[1].code.value, FHIRCode("194828000").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[1].code.as_json(), "194828000")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[1].display.value, FHIRString("Angina (disorder)").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[1].display.as_json(), "Angina (disorder)")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[1].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[1].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].linkId.value, FHIRString("1.1.1.1.1").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].linkId.as_json(), "1.1.1.1.1")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].prefix.value, FHIRString("1.1.1").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].prefix.as_json(), "1.1.1")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].type.as_json(), "choice")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].answerValueSet.value, FHIRCanonical("http://hl7.org/fhir/ValueSet/yesnodontknow").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].answerValueSet.as_json(), "http://hl7.org/fhir/ValueSet/yesnodontknow")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].code[0].code.value, FHIRCode("22298006").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].code[0].code.as_json(), "22298006")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].code[0].display.value, FHIRString("Myocardial infarction (disorder)").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].code[0].display.as_json(), "Myocardial infarction (disorder)")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].code[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].code[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].linkId.value, FHIRString("1.1.1.1.2").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].linkId.as_json(), "1.1.1.1.2")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].prefix.value, FHIRString("1.1.2").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].prefix.as_json(), "1.1.2")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].type.as_json(), "choice")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].linkId.value, FHIRString("1.1.1.1").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].linkId.as_json(), "1.1.1.1")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].prefix.value, FHIRString("1.1").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].prefix.as_json(), "1.1")
        self.assertEqual(inst.item[0].item[0].item[0].item[0].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[0].type.as_json(), "choice")
        self.assertEqual(inst.item[0].item[0].item[0].item[1].answerValueSet.value, FHIRCanonical("http://hl7.org/fhir/ValueSet/yesnodontknow").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[1].answerValueSet.as_json(), "http://hl7.org/fhir/ValueSet/yesnodontknow")
        self.assertEqual(inst.item[0].item[0].item[0].item[1].code[0].code.value, FHIRCode("COMORBVAS").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[1].code[0].code.as_json(), "COMORBVAS")
        self.assertEqual(inst.item[0].item[0].item[0].item[1].code[0].system.value, FHIRUri("http://example.org/system/code/questions").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[1].code[0].system.as_json(), "http://example.org/system/code/questions")
        self.assertEqual(inst.item[0].item[0].item[0].item[1].linkId.value, FHIRString("1.1.1.2").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[1].linkId.as_json(), "1.1.1.2")
        self.assertEqual(inst.item[0].item[0].item[0].item[1].prefix.value, FHIRString("1.2").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[1].prefix.as_json(), "1.2")
        self.assertEqual(inst.item[0].item[0].item[0].item[1].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[0].item[0].item[0].item[1].type.as_json(), "choice")
        self.assertEqual(inst.item[0].item[0].item[0].linkId.value, FHIRString("1.1.1").value)
        self.assertEqual(inst.item[0].item[0].item[0].linkId.as_json(), "1.1.1")
        self.assertEqual(inst.item[0].item[0].item[0].type.value, FHIRCode("group").value)
        self.assertEqual(inst.item[0].item[0].item[0].type.as_json(), "group")
        self.assertEqual(inst.item[0].item[0].linkId.value, FHIRString("1.1").value)
        self.assertEqual(inst.item[0].item[0].linkId.as_json(), "1.1")
        self.assertEqual(inst.item[0].item[0].maxLength, 100)
        self.assertEqual(inst.item[0].item[0].prefix.value, FHIRString("1").value)
        self.assertEqual(inst.item[0].item[0].prefix.as_json(), "1")
        self.assertEqual(inst.item[0].item[0].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[0].item[0].type.as_json(), "choice")
        self.assertEqual(inst.item[0].linkId.value, FHIRString("1").value)
        self.assertEqual(inst.item[0].linkId.as_json(), "1")
        self.assertEqual(inst.item[0].type.value, FHIRCode("group").value)
        self.assertEqual(inst.item[0].type.as_json(), "group")
        self.assertEqual(inst.item[1].code[0].code.value, FHIRCode("HISTOPATHOLOGY").value)
        self.assertEqual(inst.item[1].code[0].code.as_json(), "HISTOPATHOLOGY")
        self.assertEqual(inst.item[1].code[0].system.value, FHIRUri("http://example.org/system/code/sections").value)
        self.assertEqual(inst.item[1].code[0].system.as_json(), "http://example.org/system/code/sections")
        self.assertEqual(inst.item[1].item[0].code[0].code.value, FHIRCode("ABDOMINAL").value)
        self.assertEqual(inst.item[1].item[0].code[0].code.as_json(), "ABDOMINAL")
        self.assertEqual(inst.item[1].item[0].code[0].system.value, FHIRUri("http://example.org/system/code/sections").value)
        self.assertEqual(inst.item[1].item[0].code[0].system.as_json(), "http://example.org/system/code/sections")
        self.assertEqual(inst.item[1].item[0].item[0].code[0].code.value, FHIRCode("STADPT").value)
        self.assertEqual(inst.item[1].item[0].item[0].code[0].code.as_json(), "STADPT")
        self.assertEqual(inst.item[1].item[0].item[0].code[0].display.value, FHIRString("pT category").value)
        self.assertEqual(inst.item[1].item[0].item[0].code[0].display.as_json(), "pT category")
        self.assertEqual(inst.item[1].item[0].item[0].code[0].system.value, FHIRUri("http://example.org/system/code/questions").value)
        self.assertEqual(inst.item[1].item[0].item[0].code[0].system.as_json(), "http://example.org/system/code/questions")
        self.assertEqual(inst.item[1].item[0].item[0].linkId.value, FHIRString("2.1.2").value)
        self.assertEqual(inst.item[1].item[0].item[0].linkId.as_json(), "2.1.2")
        self.assertEqual(inst.item[1].item[0].item[0].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[1].item[0].item[0].type.as_json(), "choice")
        self.assertEqual(inst.item[1].item[0].linkId.value, FHIRString("2.1").value)
        self.assertEqual(inst.item[1].item[0].linkId.as_json(), "2.1")
        self.assertEqual(inst.item[1].item[0].type.value, FHIRCode("group").value)
        self.assertEqual(inst.item[1].item[0].type.as_json(), "group")
        self.assertEqual(inst.item[1].linkId.value, FHIRString("2").value)
        self.assertEqual(inst.item[1].linkId.as_json(), "2")
        self.assertEqual(inst.item[1].type.value, FHIRCode("group").value)
        self.assertEqual(inst.item[1].type.as_json(), "group")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.subjectType[0].value, FHIRCode("Patient").value)
        self.assertEqual(inst.subjectType[0].as_json(), "Patient")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Cancer Quality Forum Questionnaire 2012").value)
        self.assertEqual(inst.title.as_json(), "Cancer Quality Forum Questionnaire 2012")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/Questionnaire/3141").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/Questionnaire/3141")

    def testQuestionnaire2(self):
        inst = self.instantiate_from('questionnaire-example-f201-lifelines.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Questionnaire instance')
        self.implQuestionnaire2(inst)

        js = inst.as_json()
        self.assertEqual("Questionnaire", js["resourceType"])
        inst2 = questionnaire.Questionnaire(js)
        self.implQuestionnaire2(inst2)

    def implQuestionnaire2(self, inst):
        self.assertEqual(inst.code[0].code.value, FHIRCode("VL 1-1, 18-65_1.2.2").value)
        self.assertEqual(inst.code[0].code.as_json(), "VL 1-1, 18-65_1.2.2")
        self.assertEqual(inst.code[0].display.value, FHIRString("Lifelines Questionnaire 1 part 1").value)
        self.assertEqual(inst.code[0].display.as_json(), "Lifelines Questionnaire 1 part 1")
        self.assertEqual(inst.code[0].system.value, FHIRUri("http://example.org/system/code/lifelines/nl").value)
        self.assertEqual(inst.code[0].system.as_json(), "http://example.org/system/code/lifelines/nl")
        self.assertEqual(inst.date.value, FHIRDateTime("2010").value)
        self.assertEqual(inst.date.as_json(), "2010")
        self.assertEqual(inst.item[0].linkId.value, FHIRString("1").value)
        self.assertEqual(inst.item[0].linkId.as_json(), "1")
        self.assertEqual(inst.item[0].text.value, FHIRString("Do you have allergies?").value)
        self.assertEqual(inst.item[0].text.as_json(), "Do you have allergies?")
        self.assertEqual(inst.item[0].type.value, FHIRCode("boolean").value)
        self.assertEqual(inst.item[0].type.as_json(), "boolean")
        self.assertEqual(inst.item[1].item[0].linkId.value, FHIRString("2.1").value)
        self.assertEqual(inst.item[1].item[0].linkId.as_json(), "2.1")
        self.assertEqual(inst.item[1].item[0].text.value, FHIRString("What is your gender?").value)
        self.assertEqual(inst.item[1].item[0].text.as_json(), "What is your gender?")
        self.assertEqual(inst.item[1].item[0].type.value, FHIRCode("string").value)
        self.assertEqual(inst.item[1].item[0].type.as_json(), "string")
        self.assertEqual(inst.item[1].item[1].linkId.value, FHIRString("2.2").value)
        self.assertEqual(inst.item[1].item[1].linkId.as_json(), "2.2")
        self.assertEqual(inst.item[1].item[1].text.value, FHIRString("What is your date of birth?").value)
        self.assertEqual(inst.item[1].item[1].text.as_json(), "What is your date of birth?")
        self.assertEqual(inst.item[1].item[1].type.value, FHIRCode("date").value)
        self.assertEqual(inst.item[1].item[1].type.as_json(), "date")
        self.assertEqual(inst.item[1].item[2].linkId.value, FHIRString("2.3").value)
        self.assertEqual(inst.item[1].item[2].linkId.as_json(), "2.3")
        self.assertEqual(inst.item[1].item[2].text.value, FHIRString("What is your country of birth?").value)
        self.assertEqual(inst.item[1].item[2].text.as_json(), "What is your country of birth?")
        self.assertEqual(inst.item[1].item[2].type.value, FHIRCode("string").value)
        self.assertEqual(inst.item[1].item[2].type.as_json(), "string")
        self.assertEqual(inst.item[1].item[3].linkId.value, FHIRString("2.4").value)
        self.assertEqual(inst.item[1].item[3].linkId.as_json(), "2.4")
        self.assertEqual(inst.item[1].item[3].text.value, FHIRString("What is your marital status?").value)
        self.assertEqual(inst.item[1].item[3].text.as_json(), "What is your marital status?")
        self.assertEqual(inst.item[1].item[3].type.value, FHIRCode("string").value)
        self.assertEqual(inst.item[1].item[3].type.as_json(), "string")
        self.assertEqual(inst.item[1].linkId.value, FHIRString("2").value)
        self.assertEqual(inst.item[1].linkId.as_json(), "2")
        self.assertEqual(inst.item[1].text.value, FHIRString("General questions").value)
        self.assertEqual(inst.item[1].text.as_json(), "General questions")
        self.assertEqual(inst.item[1].type.value, FHIRCode("group").value)
        self.assertEqual(inst.item[1].type.as_json(), "group")
        self.assertEqual(inst.item[2].item[0].linkId.value, FHIRString("3.1").value)
        self.assertEqual(inst.item[2].item[0].linkId.as_json(), "3.1")
        self.assertEqual(inst.item[2].item[0].text.value, FHIRString("Do you smoke?").value)
        self.assertEqual(inst.item[2].item[0].text.as_json(), "Do you smoke?")
        self.assertEqual(inst.item[2].item[0].type.value, FHIRCode("boolean").value)
        self.assertEqual(inst.item[2].item[0].type.as_json(), "boolean")
        self.assertEqual(inst.item[2].item[1].linkId.value, FHIRString("3.2").value)
        self.assertEqual(inst.item[2].item[1].linkId.as_json(), "3.2")
        self.assertEqual(inst.item[2].item[1].text.value, FHIRString("Do you drink alchohol?").value)
        self.assertEqual(inst.item[2].item[1].text.as_json(), "Do you drink alchohol?")
        self.assertEqual(inst.item[2].item[1].type.value, FHIRCode("boolean").value)
        self.assertEqual(inst.item[2].item[1].type.as_json(), "boolean")
        self.assertEqual(inst.item[2].linkId.value, FHIRString("3").value)
        self.assertEqual(inst.item[2].linkId.as_json(), "3")
        self.assertEqual(inst.item[2].text.value, FHIRString("Intoxications").value)
        self.assertEqual(inst.item[2].text.as_json(), "Intoxications")
        self.assertEqual(inst.item[2].type.value, FHIRCode("group").value)
        self.assertEqual(inst.item[2].type.as_json(), "group")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.subjectType[0].value, FHIRCode("Patient").value)
        self.assertEqual(inst.subjectType[0].as_json(), "Patient")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/Questionnaire/f201").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/Questionnaire/f201")

    def testQuestionnaire3(self):
        inst = self.instantiate_from('questionnaire-example-bluebook.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Questionnaire instance')
        self.implQuestionnaire3(inst)

        js = inst.as_json()
        self.assertEqual("Questionnaire", js["resourceType"])
        inst2 = questionnaire.Questionnaire(js)
        self.implQuestionnaire3(inst2)

    def implQuestionnaire3(self, inst):
        self.assertEqual(inst.date.value, FHIRDateTime("2013-02-19").value)
        self.assertEqual(inst.date.as_json(), "2013-02-19")
        self.assertEqual(inst.item[0].item[0].item[0].linkId.value, FHIRString("nameOfChild").value)
        self.assertEqual(inst.item[0].item[0].item[0].linkId.as_json(), "nameOfChild")
        self.assertEqual(inst.item[0].item[0].item[0].text.value, FHIRString("Name of child").value)
        self.assertEqual(inst.item[0].item[0].item[0].text.as_json(), "Name of child")
        self.assertEqual(inst.item[0].item[0].item[0].type.value, FHIRCode("string").value)
        self.assertEqual(inst.item[0].item[0].item[0].type.as_json(), "string")
        self.assertEqual(inst.item[0].item[0].item[1].answerOption[0].valueCoding.code.value, FHIRCode("F").value)
        self.assertEqual(inst.item[0].item[0].item[1].answerOption[0].valueCoding.code.as_json(), "F")
        self.assertEqual(inst.item[0].item[0].item[1].answerOption[1].valueCoding.code.value, FHIRCode("M").value)
        self.assertEqual(inst.item[0].item[0].item[1].answerOption[1].valueCoding.code.as_json(), "M")
        self.assertEqual(inst.item[0].item[0].item[1].linkId.value, FHIRString("sex").value)
        self.assertEqual(inst.item[0].item[0].item[1].linkId.as_json(), "sex")
        self.assertEqual(inst.item[0].item[0].item[1].text.value, FHIRString("Sex").value)
        self.assertEqual(inst.item[0].item[0].item[1].text.as_json(), "Sex")
        self.assertEqual(inst.item[0].item[0].item[1].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[0].item[0].item[1].type.as_json(), "choice")
        self.assertEqual(inst.item[0].item[0].linkId.value, FHIRString("group").value)
        self.assertEqual(inst.item[0].item[0].linkId.as_json(), "group")
        self.assertEqual(inst.item[0].item[0].type.value, FHIRCode("group").value)
        self.assertEqual(inst.item[0].item[0].type.as_json(), "group")
        self.assertEqual(inst.item[0].item[1].item[0].linkId.value, FHIRString("birthWeight").value)
        self.assertEqual(inst.item[0].item[1].item[0].linkId.as_json(), "birthWeight")
        self.assertEqual(inst.item[0].item[1].item[0].text.value, FHIRString("Birth weight (kg)").value)
        self.assertEqual(inst.item[0].item[1].item[0].text.as_json(), "Birth weight (kg)")
        self.assertEqual(inst.item[0].item[1].item[0].type.value, FHIRCode("decimal").value)
        self.assertEqual(inst.item[0].item[1].item[0].type.as_json(), "decimal")
        self.assertEqual(inst.item[0].item[1].item[1].linkId.value, FHIRString("birthLength").value)
        self.assertEqual(inst.item[0].item[1].item[1].linkId.as_json(), "birthLength")
        self.assertEqual(inst.item[0].item[1].item[1].text.value, FHIRString("Birth length (cm)").value)
        self.assertEqual(inst.item[0].item[1].item[1].text.as_json(), "Birth length (cm)")
        self.assertEqual(inst.item[0].item[1].item[1].type.value, FHIRCode("decimal").value)
        self.assertEqual(inst.item[0].item[1].item[1].type.as_json(), "decimal")
        self.assertEqual(inst.item[0].item[1].item[2].answerOption[0].valueCoding.code.value, FHIRCode("INJECTION").value)
        self.assertEqual(inst.item[0].item[1].item[2].answerOption[0].valueCoding.code.as_json(), "INJECTION")
        self.assertEqual(inst.item[0].item[1].item[2].answerOption[1].valueCoding.code.value, FHIRCode("INTRAVENOUS").value)
        self.assertEqual(inst.item[0].item[1].item[2].answerOption[1].valueCoding.code.as_json(), "INTRAVENOUS")
        self.assertEqual(inst.item[0].item[1].item[2].answerOption[2].valueCoding.code.value, FHIRCode("ORAL").value)
        self.assertEqual(inst.item[0].item[1].item[2].answerOption[2].valueCoding.code.as_json(), "ORAL")
        self.assertTrue(inst.item[0].item[1].item[2].item[0].enableWhen[0].answerBoolean)
        self.assertEqual(inst.item[0].item[1].item[2].item[0].enableWhen[0].operator.value, FHIRCode("exists").value)
        self.assertEqual(inst.item[0].item[1].item[2].item[0].enableWhen[0].operator.as_json(), "exists")
        self.assertEqual(inst.item[0].item[1].item[2].item[0].enableWhen[0].question.value, FHIRString("vitaminKgiven").value)
        self.assertEqual(inst.item[0].item[1].item[2].item[0].enableWhen[0].question.as_json(), "vitaminKgiven")
        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[0].linkId.value, FHIRString("vitaminiKDose1").value)
        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[0].linkId.as_json(), "vitaminiKDose1")
        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[0].text.value, FHIRString("1st dose").value)
        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[0].text.as_json(), "1st dose")
        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[0].type.value, FHIRCode("dateTime").value)
        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[0].type.as_json(), "dateTime")
        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[1].linkId.value, FHIRString("vitaminiKDose2").value)
        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[1].linkId.as_json(), "vitaminiKDose2")
        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[1].text.value, FHIRString("2nd dose").value)
        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[1].text.as_json(), "2nd dose")
        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[1].type.value, FHIRCode("dateTime").value)
        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[1].type.as_json(), "dateTime")
        self.assertEqual(inst.item[0].item[1].item[2].item[0].linkId.value, FHIRString("vitaminKgivenDoses").value)
        self.assertEqual(inst.item[0].item[1].item[2].item[0].linkId.as_json(), "vitaminKgivenDoses")
        self.assertEqual(inst.item[0].item[1].item[2].item[0].type.value, FHIRCode("group").value)
        self.assertEqual(inst.item[0].item[1].item[2].item[0].type.as_json(), "group")
        self.assertEqual(inst.item[0].item[1].item[2].linkId.value, FHIRString("vitaminKgiven").value)
        self.assertEqual(inst.item[0].item[1].item[2].linkId.as_json(), "vitaminKgiven")
        self.assertEqual(inst.item[0].item[1].item[2].text.value, FHIRString("Vitamin K given").value)
        self.assertEqual(inst.item[0].item[1].item[2].text.as_json(), "Vitamin K given")
        self.assertEqual(inst.item[0].item[1].item[2].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[0].item[1].item[2].type.as_json(), "choice")
        self.assertEqual(inst.item[0].item[1].item[3].item[0].linkId.value, FHIRString("hepBgivenDate").value)
        self.assertEqual(inst.item[0].item[1].item[3].item[0].linkId.as_json(), "hepBgivenDate")
        self.assertEqual(inst.item[0].item[1].item[3].item[0].text.value, FHIRString("Date given").value)
        self.assertEqual(inst.item[0].item[1].item[3].item[0].text.as_json(), "Date given")
        self.assertEqual(inst.item[0].item[1].item[3].item[0].type.value, FHIRCode("date").value)
        self.assertEqual(inst.item[0].item[1].item[3].item[0].type.as_json(), "date")
        self.assertEqual(inst.item[0].item[1].item[3].linkId.value, FHIRString("hepBgiven").value)
        self.assertEqual(inst.item[0].item[1].item[3].linkId.as_json(), "hepBgiven")
        self.assertEqual(inst.item[0].item[1].item[3].text.value, FHIRString("Hep B given y / n").value)
        self.assertEqual(inst.item[0].item[1].item[3].text.as_json(), "Hep B given y / n")
        self.assertEqual(inst.item[0].item[1].item[3].type.value, FHIRCode("boolean").value)
        self.assertEqual(inst.item[0].item[1].item[3].type.as_json(), "boolean")
        self.assertEqual(inst.item[0].item[1].item[4].linkId.value, FHIRString("abnormalitiesAtBirth").value)
        self.assertEqual(inst.item[0].item[1].item[4].linkId.as_json(), "abnormalitiesAtBirth")
        self.assertEqual(inst.item[0].item[1].item[4].text.value, FHIRString("Abnormalities noted at birth").value)
        self.assertEqual(inst.item[0].item[1].item[4].text.as_json(), "Abnormalities noted at birth")
        self.assertEqual(inst.item[0].item[1].item[4].type.value, FHIRCode("string").value)
        self.assertEqual(inst.item[0].item[1].item[4].type.as_json(), "string")
        self.assertEqual(inst.item[0].item[1].linkId.value, FHIRString("neonatalInformation").value)
        self.assertEqual(inst.item[0].item[1].linkId.as_json(), "neonatalInformation")
        self.assertEqual(inst.item[0].item[1].text.value, FHIRString("Neonatal Information").value)
        self.assertEqual(inst.item[0].item[1].text.as_json(), "Neonatal Information")
        self.assertEqual(inst.item[0].item[1].type.value, FHIRCode("group").value)
        self.assertEqual(inst.item[0].item[1].type.as_json(), "group")
        self.assertEqual(inst.item[0].linkId.value, FHIRString("birthDetails").value)
        self.assertEqual(inst.item[0].linkId.as_json(), "birthDetails")
        self.assertEqual(inst.item[0].text.value, FHIRString("Birth details - To be completed by health professional").value)
        self.assertEqual(inst.item[0].text.as_json(), "Birth details - To be completed by health professional")
        self.assertEqual(inst.item[0].type.value, FHIRCode("group").value)
        self.assertEqual(inst.item[0].type.as_json(), "group")
        self.assertEqual(inst.jurisdiction[0].coding[0].code.value, FHIRCode("AU").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].code.as_json(), "AU")
        self.assertEqual(inst.jurisdiction[0].coding[0].system.value, FHIRUri("urn:iso:std:iso:3166").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].system.as_json(), "urn:iso:std:iso:3166")
        self.assertEqual(inst.publisher.value, FHIRString("New South Wales Department of Health").value)
        self.assertEqual(inst.publisher.as_json(), "New South Wales Department of Health")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.subjectType[0].value, FHIRCode("Patient").value)
        self.assertEqual(inst.subjectType[0].as_json(), "Patient")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("NSW Government My Personal Health Record").value)
        self.assertEqual(inst.title.as_json(), "NSW Government My Personal Health Record")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/Questionnaire/bb").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/Questionnaire/bb")

    def testQuestionnaire4(self):
        inst = self.instantiate_from('questionnaire-example-gcs.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Questionnaire instance')
        self.implQuestionnaire4(inst)

        js = inst.as_json()
        self.assertEqual("Questionnaire", js["resourceType"])
        inst2 = questionnaire.Questionnaire(js)
        self.implQuestionnaire4(inst2)

    def implQuestionnaire4(self, inst):
        self.assertEqual(inst.code[0].code.value, FHIRCode("9269-2").value)
        self.assertEqual(inst.code[0].code.as_json(), "9269-2")
        self.assertEqual(inst.code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.date.value, FHIRDateTime("2015-08-03").value)
        self.assertEqual(inst.date.as_json(), "2015-08-03")
        self.assertEqual(inst.item[0].answerValueSet.value, FHIRCanonical("#verbal").value)
        self.assertEqual(inst.item[0].answerValueSet.as_json(), "#verbal")
        self.assertEqual(inst.item[0].code[0].code.value, FHIRCode("9270-0").value)
        self.assertEqual(inst.item[0].code[0].code.as_json(), "9270-0")
        self.assertEqual(inst.item[0].code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.item[0].code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.item[0].linkId.value, FHIRString("1.1").value)
        self.assertEqual(inst.item[0].linkId.as_json(), "1.1")
        self.assertEqual(inst.item[0].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[0].type.as_json(), "choice")
        self.assertEqual(inst.item[1].answerValueSet.value, FHIRCanonical("#motor").value)
        self.assertEqual(inst.item[1].answerValueSet.as_json(), "#motor")
        self.assertEqual(inst.item[1].code[0].code.value, FHIRCode("9268-4").value)
        self.assertEqual(inst.item[1].code[0].code.as_json(), "9268-4")
        self.assertEqual(inst.item[1].code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.item[1].code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.item[1].linkId.value, FHIRString("1.2").value)
        self.assertEqual(inst.item[1].linkId.as_json(), "1.2")
        self.assertEqual(inst.item[1].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[1].type.as_json(), "choice")
        self.assertEqual(inst.item[2].answerValueSet.value, FHIRCanonical("#eye").value)
        self.assertEqual(inst.item[2].answerValueSet.as_json(), "#eye")
        self.assertEqual(inst.item[2].code[0].code.value, FHIRCode("9267-6").value)
        self.assertEqual(inst.item[2].code[0].code.as_json(), "9267-6")
        self.assertEqual(inst.item[2].code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.item[2].code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.item[2].linkId.value, FHIRString("1.3").value)
        self.assertEqual(inst.item[2].linkId.as_json(), "1.3")
        self.assertEqual(inst.item[2].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[2].type.as_json(), "choice")
        self.assertEqual(inst.publisher.value, FHIRString("FHIR Project team").value)
        self.assertEqual(inst.publisher.as_json(), "FHIR Project team")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.subjectType[0].value, FHIRCode("Patient").value)
        self.assertEqual(inst.subjectType[0].as_json(), "Patient")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Glasgow Coma Score").value)
        self.assertEqual(inst.title.as_json(), "Glasgow Coma Score")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/Questionnaire/gcs").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/Questionnaire/gcs")

    def testQuestionnaire5(self):
        inst = self.instantiate_from('questionnaire-cqf-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Questionnaire instance')
        self.implQuestionnaire5(inst)

        js = inst.as_json()
        self.assertEqual("Questionnaire", js["resourceType"])
        inst2 = questionnaire.Questionnaire(js)
        self.implQuestionnaire5(inst2)

    def implQuestionnaire5(self, inst):
        self.assertEqual(inst.code[0].code.value, FHIRCode("44249-1").value)
        self.assertEqual(inst.code[0].code.as_json(), "44249-1")
        self.assertEqual(inst.code[0].display.value, FHIRString("PHQ-9 quick depression assessment panel:-:Pt:^Patient:-:Report.PHQ-9").value)
        self.assertEqual(inst.code[0].display.as_json(), "PHQ-9 quick depression assessment panel:-:Pt:^Patient:-:Report.PHQ-9")
        self.assertEqual(inst.code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.extension[0].valueCanonical.value, FHIRCanonical("Library/phq-9-logic").value)
        self.assertEqual(inst.extension[0].valueCanonical.as_json(), "Library/phq-9-logic")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("phq-9").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "phq-9")
        self.assertEqual(inst.item[0].answerValueSet.value, FHIRCanonical("http://loinc.org/vs/LL358-3").value)
        self.assertEqual(inst.item[0].answerValueSet.as_json(), "http://loinc.org/vs/LL358-3")
        self.assertEqual(inst.item[0].code[0].code.value, FHIRCode("44250-9").value)
        self.assertEqual(inst.item[0].code[0].code.as_json(), "44250-9")
        self.assertEqual(inst.item[0].code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.item[0].code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.item[0].linkId.value, FHIRString("LittleInterest").value)
        self.assertEqual(inst.item[0].linkId.as_json(), "LittleInterest")
        self.assertTrue(inst.item[0].required)
        self.assertEqual(inst.item[0].text.value, FHIRString("Little interest or pleasure in doing things").value)
        self.assertEqual(inst.item[0].text.as_json(), "Little interest or pleasure in doing things")
        self.assertEqual(inst.item[0].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[0].type.as_json(), "choice")
        self.assertEqual(inst.item[1].answerValueSet.value, FHIRCanonical("http://loinc.org/vs/LL358-3").value)
        self.assertEqual(inst.item[1].answerValueSet.as_json(), "http://loinc.org/vs/LL358-3")
        self.assertEqual(inst.item[1].code[0].code.value, FHIRCode("44255-8").value)
        self.assertEqual(inst.item[1].code[0].code.as_json(), "44255-8")
        self.assertEqual(inst.item[1].code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.item[1].code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.item[1].linkId.value, FHIRString("FeelingDown").value)
        self.assertEqual(inst.item[1].linkId.as_json(), "FeelingDown")
        self.assertTrue(inst.item[1].required)
        self.assertEqual(inst.item[1].text.value, FHIRString("Feeling down, depressed, or hopeless").value)
        self.assertEqual(inst.item[1].text.as_json(), "Feeling down, depressed, or hopeless")
        self.assertEqual(inst.item[1].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[1].type.as_json(), "choice")
        self.assertEqual(inst.item[2].answerValueSet.value, FHIRCanonical("http://loinc.org/vs/LL358-3").value)
        self.assertEqual(inst.item[2].answerValueSet.as_json(), "http://loinc.org/vs/LL358-3")
        self.assertEqual(inst.item[2].code[0].code.value, FHIRCode("44259-0").value)
        self.assertEqual(inst.item[2].code[0].code.as_json(), "44259-0")
        self.assertEqual(inst.item[2].code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.item[2].code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.item[2].linkId.value, FHIRString("TroubleSleeping").value)
        self.assertEqual(inst.item[2].linkId.as_json(), "TroubleSleeping")
        self.assertTrue(inst.item[2].required)
        self.assertEqual(inst.item[2].text.value, FHIRString("Trouble falling or staying asleep").value)
        self.assertEqual(inst.item[2].text.as_json(), "Trouble falling or staying asleep")
        self.assertEqual(inst.item[2].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[2].type.as_json(), "choice")
        self.assertEqual(inst.item[3].answerValueSet.value, FHIRCanonical("http://loinc.org/vs/LL358-3").value)
        self.assertEqual(inst.item[3].answerValueSet.as_json(), "http://loinc.org/vs/LL358-3")
        self.assertEqual(inst.item[3].code[0].code.value, FHIRCode("44254-1").value)
        self.assertEqual(inst.item[3].code[0].code.as_json(), "44254-1")
        self.assertEqual(inst.item[3].code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.item[3].code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.item[3].linkId.value, FHIRString("FeelingTired").value)
        self.assertEqual(inst.item[3].linkId.as_json(), "FeelingTired")
        self.assertTrue(inst.item[3].required)
        self.assertEqual(inst.item[3].text.value, FHIRString("Feeling tired or having little energy").value)
        self.assertEqual(inst.item[3].text.as_json(), "Feeling tired or having little energy")
        self.assertEqual(inst.item[3].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[3].type.as_json(), "choice")
        self.assertEqual(inst.item[4].answerValueSet.value, FHIRCanonical("http://loinc.org/vs/LL358-3").value)
        self.assertEqual(inst.item[4].answerValueSet.as_json(), "http://loinc.org/vs/LL358-3")
        self.assertEqual(inst.item[4].code[0].code.value, FHIRCode("44251-7").value)
        self.assertEqual(inst.item[4].code[0].code.as_json(), "44251-7")
        self.assertEqual(inst.item[4].code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.item[4].code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.item[4].linkId.value, FHIRString("BadAppetite").value)
        self.assertEqual(inst.item[4].linkId.as_json(), "BadAppetite")
        self.assertTrue(inst.item[4].required)
        self.assertEqual(inst.item[4].text.value, FHIRString("Poor appetite or overeating").value)
        self.assertEqual(inst.item[4].text.as_json(), "Poor appetite or overeating")
        self.assertEqual(inst.item[4].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[4].type.as_json(), "choice")
        self.assertEqual(inst.item[5].answerValueSet.value, FHIRCanonical("http://loinc.org/vs/LL358-3").value)
        self.assertEqual(inst.item[5].answerValueSet.as_json(), "http://loinc.org/vs/LL358-3")
        self.assertEqual(inst.item[5].code[0].code.value, FHIRCode("44258-2").value)
        self.assertEqual(inst.item[5].code[0].code.as_json(), "44258-2")
        self.assertEqual(inst.item[5].code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.item[5].code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.item[5].linkId.value, FHIRString("FeelingBadAboutSelf").value)
        self.assertEqual(inst.item[5].linkId.as_json(), "FeelingBadAboutSelf")
        self.assertTrue(inst.item[5].required)
        self.assertEqual(inst.item[5].text.value, FHIRString("Feeling bad about yourself - or that you are a failure or have let yourself or your family down").value)
        self.assertEqual(inst.item[5].text.as_json(), "Feeling bad about yourself - or that you are a failure or have let yourself or your family down")
        self.assertEqual(inst.item[5].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[5].type.as_json(), "choice")
        self.assertEqual(inst.item[6].answerValueSet.value, FHIRCanonical("http://loinc.org/vs/LL358-3").value)
        self.assertEqual(inst.item[6].answerValueSet.as_json(), "http://loinc.org/vs/LL358-3")
        self.assertEqual(inst.item[6].code[0].code.value, FHIRCode("44252-5").value)
        self.assertEqual(inst.item[6].code[0].code.as_json(), "44252-5")
        self.assertEqual(inst.item[6].code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.item[6].code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.item[6].linkId.value, FHIRString("TroubleConcentrating").value)
        self.assertEqual(inst.item[6].linkId.as_json(), "TroubleConcentrating")
        self.assertTrue(inst.item[6].required)
        self.assertEqual(inst.item[6].text.value, FHIRString("Trouble concentrating on things, such as reading the newspaper or watching television").value)
        self.assertEqual(inst.item[6].text.as_json(), "Trouble concentrating on things, such as reading the newspaper or watching television")
        self.assertEqual(inst.item[6].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[6].type.as_json(), "choice")
        self.assertEqual(inst.item[7].answerValueSet.value, FHIRCanonical("http://loinc.org/vs/LL358-3").value)
        self.assertEqual(inst.item[7].answerValueSet.as_json(), "http://loinc.org/vs/LL358-3")
        self.assertEqual(inst.item[7].code[0].code.value, FHIRCode("44253-3").value)
        self.assertEqual(inst.item[7].code[0].code.as_json(), "44253-3")
        self.assertEqual(inst.item[7].code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.item[7].code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.item[7].linkId.value, FHIRString("MovingSpeaking").value)
        self.assertEqual(inst.item[7].linkId.as_json(), "MovingSpeaking")
        self.assertTrue(inst.item[7].required)
        self.assertEqual(inst.item[7].text.value, FHIRString("Moving or speaking so slowly that other people could have noticed. Or the opposite - being so fidgety or restless that you have been moving around a lot more than usual").value)
        self.assertEqual(inst.item[7].text.as_json(), "Moving or speaking so slowly that other people could have noticed. Or the opposite - being so fidgety or restless that you have been moving around a lot more than usual")
        self.assertEqual(inst.item[7].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[7].type.as_json(), "choice")
        self.assertEqual(inst.item[8].code[0].code.value, FHIRCode("44261-6").value)
        self.assertEqual(inst.item[8].code[0].code.as_json(), "44261-6")
        self.assertEqual(inst.item[8].code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.item[8].code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.item[8].extension[0].valueExpression.expression.value, FHIRString("CalculateTotalScore").value)
        self.assertEqual(inst.item[8].extension[0].valueExpression.expression.as_json(), "CalculateTotalScore")
        self.assertEqual(inst.item[8].extension[0].valueExpression.language.value, FHIRCode("text/cql").value)
        self.assertEqual(inst.item[8].extension[0].valueExpression.language.as_json(), "text/cql")
        self.assertEqual(inst.item[8].linkId.value, FHIRString("TotalScore").value)
        self.assertEqual(inst.item[8].linkId.as_json(), "TotalScore")
        self.assertTrue(inst.item[8].required)
        self.assertEqual(inst.item[8].text.value, FHIRString("Total score").value)
        self.assertEqual(inst.item[8].text.as_json(), "Total score")
        self.assertEqual(inst.item[8].type.value, FHIRCode("integer").value)
        self.assertEqual(inst.item[8].type.as_json(), "integer")
        self.assertEqual(inst.item[9].answerValueSet.value, FHIRCanonical("http://loinc.org/vs/LL358-3").value)
        self.assertEqual(inst.item[9].answerValueSet.as_json(), "http://loinc.org/vs/LL358-3")
        self.assertEqual(inst.item[9].code[0].code.value, FHIRCode("44256-6").value)
        self.assertEqual(inst.item[9].code[0].code.as_json(), "44256-6")
        self.assertEqual(inst.item[9].code[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.item[9].code[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.item[9].linkId.value, FHIRString("Difficulty").value)
        self.assertEqual(inst.item[9].linkId.as_json(), "Difficulty")
        self.assertTrue(inst.item[9].required)
        self.assertEqual(inst.item[9].text.value, FHIRString("If you checked off any problems, how difficult have these problems made it for you to do your work, take care of things at home, or get along with other people").value)
        self.assertEqual(inst.item[9].text.as_json(), "If you checked off any problems, how difficult have these problems made it for you to do your work, take care of things at home, or get along with other people")
        self.assertEqual(inst.item[9].type.value, FHIRCode("choice").value)
        self.assertEqual(inst.item[9].type.as_json(), "choice")
        self.assertEqual(inst.meta.profile[0].value, FHIRCanonical("http://hl7.org/fhir/StructureDefinition/cqf-questionnaire").value)
        self.assertEqual(inst.meta.profile[0].as_json(), "http://hl7.org/fhir/StructureDefinition/cqf-questionnaire")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.subjectType[0].value, FHIRCode("Patient").value)
        self.assertEqual(inst.subjectType[0].as_json(), "Patient")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">PHQ-9 Questionnaire with dynamic logic</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">PHQ-9 Questionnaire with dynamic logic</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Patient Health Questionnaire (PHQ-9)").value)
        self.assertEqual(inst.title.as_json(), "Patient Health Questionnaire (PHQ-9)")
        self.assertEqual(inst.version.value, FHIRString("1.0.0").value)
        self.assertEqual(inst.version.as_json(), "1.0.0")


from fhirclient.models.fhirdatatypes import FHIRDateTime, FHIRCode, FHIRUri, FHIRCanonical, FHIRString