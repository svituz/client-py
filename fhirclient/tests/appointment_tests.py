#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import appointment

class AppointmentTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Appointment", js["resourceType"])
        return appointment.Appointment(js)

    def testAppointment1(self):
        inst = self.instantiate_from('appointment-example-request.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Appointment instance')
        self.implAppointment1(inst)

        js = inst.as_json()
        self.assertEqual("Appointment", js["resourceType"])
        inst2 = appointment.Appointment(js)
        self.implAppointment1(inst2)

    def implAppointment1(self, inst):
        self.assertEqual(inst.appointmentType.coding[0].code.value, FHIRCode("WALKIN").value)
        self.assertEqual(inst.appointmentType.coding[0].code.as_json(), "WALKIN")
        self.assertEqual(inst.appointmentType.coding[0].display.value, FHIRString("A previously unscheduled walk-in visit").value)
        self.assertEqual(inst.appointmentType.coding[0].display.as_json(), "A previously unscheduled walk-in visit")
        self.assertEqual(inst.appointmentType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0276").value)
        self.assertEqual(inst.appointmentType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0276")
        self.assertEqual(inst.comment.value, FHIRString("Further expand on the results of the MRI and determine the next actions that may be appropriate.").value)
        self.assertEqual(inst.comment.as_json(), "Further expand on the results of the MRI and determine the next actions that may be appropriate.")
        self.assertEqual(inst.created.value, FHIRDateTime("2015-12-02").value)
        self.assertEqual(inst.created.as_json(), "2015-12-02")
        self.assertEqual(inst.description.value, FHIRString("Discussion on the results of your recent MRI").value)
        self.assertEqual(inst.description.as_json(), "Discussion on the results of your recent MRI")
        self.assertEqual(inst.id.value, FHIRString("examplereq").value)
        self.assertEqual(inst.id.as_json(), "examplereq")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://example.org/sampleappointment-identifier").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://example.org/sampleappointment-identifier")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("123").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "123")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.minutesDuration.value, FHIRPositiveInt('15').value)
        self.assertEqual(inst.minutesDuration.as_json(), 15)
        self.assertEqual(inst.participant[0].required.value, FHIRCode("required").value)
        self.assertEqual(inst.participant[0].required.as_json(), "required")
        self.assertEqual(inst.participant[0].status.value, FHIRCode("needs-action").value)
        self.assertEqual(inst.participant[0].status.as_json(), "needs-action")
        self.assertEqual(inst.participant[1].required.value, FHIRCode("required").value)
        self.assertEqual(inst.participant[1].required.as_json(), "required")
        self.assertEqual(inst.participant[1].status.value, FHIRCode("needs-action").value)
        self.assertEqual(inst.participant[1].status.as_json(), "needs-action")
        self.assertEqual(inst.participant[1].type[0].coding[0].code.value, FHIRCode("ATND").value)
        self.assertEqual(inst.participant[1].type[0].coding[0].code.as_json(), "ATND")
        self.assertEqual(inst.participant[1].type[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.participant[1].type[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.participant[2].required.value, FHIRCode("required").value)
        self.assertEqual(inst.participant[2].required.as_json(), "required")
        self.assertEqual(inst.participant[2].status.value, FHIRCode("accepted").value)
        self.assertEqual(inst.participant[2].status.as_json(), "accepted")
        self.assertEqual(inst.priority.value, FHIRUnsignedInt('5').value)
        self.assertEqual(inst.priority.as_json(), 5)
        self.assertEqual(inst.reasonCode[0].coding[0].code.value, FHIRCode("413095006").value)
        self.assertEqual(inst.reasonCode[0].coding[0].code.as_json(), "413095006")
        self.assertEqual(inst.reasonCode[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.reasonCode[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.reasonCode[0].text.value, FHIRString("Clinical Review").value)
        self.assertEqual(inst.reasonCode[0].text.as_json(), "Clinical Review")
        self.assertEqual(inst.requestedPeriod[0].end.value, FHIRDateTime("2016-06-09").value)
        self.assertEqual(inst.requestedPeriod[0].end.as_json(), "2016-06-09")
        self.assertEqual(inst.requestedPeriod[0].start.value, FHIRDateTime("2016-06-02").value)
        self.assertEqual(inst.requestedPeriod[0].start.as_json(), "2016-06-02")
        self.assertEqual(inst.serviceCategory[0].coding[0].code.value, FHIRCode("gp").value)
        self.assertEqual(inst.serviceCategory[0].coding[0].code.as_json(), "gp")
        self.assertEqual(inst.serviceCategory[0].coding[0].display.value, FHIRString("General Practice").value)
        self.assertEqual(inst.serviceCategory[0].coding[0].display.as_json(), "General Practice")
        self.assertEqual(inst.serviceCategory[0].coding[0].system.value, FHIRUri("http://example.org/service-category").value)
        self.assertEqual(inst.serviceCategory[0].coding[0].system.as_json(), "http://example.org/service-category")
        self.assertEqual(inst.specialty[0].coding[0].code.value, FHIRCode("394814009").value)
        self.assertEqual(inst.specialty[0].coding[0].code.as_json(), "394814009")
        self.assertEqual(inst.specialty[0].coding[0].display.value, FHIRString("General practice").value)
        self.assertEqual(inst.specialty[0].coding[0].display.as_json(), "General practice")
        self.assertEqual(inst.specialty[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.specialty[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.status.value, FHIRCode("proposed").value)
        self.assertEqual(inst.status.as_json(), "proposed")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Brian MRI results discussion</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Brian MRI results discussion</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testAppointment2(self):
        inst = self.instantiate_from('appointment-example2doctors.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Appointment instance')
        self.implAppointment2(inst)

        js = inst.as_json()
        self.assertEqual("Appointment", js["resourceType"])
        inst2 = appointment.Appointment(js)
        self.implAppointment2(inst2)

    def implAppointment2(self, inst):
        self.assertEqual(inst.appointmentType.coding[0].code.value, FHIRCode("WALKIN").value)
        self.assertEqual(inst.appointmentType.coding[0].code.as_json(), "WALKIN")
        self.assertEqual(inst.appointmentType.coding[0].display.value, FHIRString("A previously unscheduled walk-in visit").value)
        self.assertEqual(inst.appointmentType.coding[0].display.as_json(), "A previously unscheduled walk-in visit")
        self.assertEqual(inst.appointmentType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0276").value)
        self.assertEqual(inst.appointmentType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0276")
        self.assertEqual(inst.comment.value, FHIRString("Clarify the results of the MRI to ensure context of test was correct").value)
        self.assertEqual(inst.comment.as_json(), "Clarify the results of the MRI to ensure context of test was correct")
        self.assertEqual(inst.description.value, FHIRString("Discussion about Peter Chalmers MRI results").value)
        self.assertEqual(inst.description.as_json(), "Discussion about Peter Chalmers MRI results")
        self.assertEqual(inst.end.value, FHIRInstant("2013-12-09T11:00:00Z").value)
        self.assertEqual(inst.end.as_json(), "2013-12-09T11:00:00Z")
        self.assertEqual(inst.end.date, FHIRInstant('2013-12-09T11:00:00Z').date)
        self.assertEqual(inst.id.value, FHIRString("2docs").value)
        self.assertEqual(inst.id.as_json(), "2docs")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.participant[0].required.value, FHIRCode("information-only").value)
        self.assertEqual(inst.participant[0].required.as_json(), "information-only")
        self.assertEqual(inst.participant[0].status.value, FHIRCode("accepted").value)
        self.assertEqual(inst.participant[0].status.as_json(), "accepted")
        self.assertEqual(inst.participant[1].required.value, FHIRCode("required").value)
        self.assertEqual(inst.participant[1].required.as_json(), "required")
        self.assertEqual(inst.participant[1].status.value, FHIRCode("accepted").value)
        self.assertEqual(inst.participant[1].status.as_json(), "accepted")
        self.assertEqual(inst.participant[2].required.value, FHIRCode("required").value)
        self.assertEqual(inst.participant[2].required.as_json(), "required")
        self.assertEqual(inst.participant[2].status.value, FHIRCode("accepted").value)
        self.assertEqual(inst.participant[2].status.as_json(), "accepted")
        self.assertEqual(inst.participant[3].required.value, FHIRCode("information-only").value)
        self.assertEqual(inst.participant[3].required.as_json(), "information-only")
        self.assertEqual(inst.participant[3].status.value, FHIRCode("accepted").value)
        self.assertEqual(inst.participant[3].status.as_json(), "accepted")
        self.assertEqual(inst.priority.value, FHIRUnsignedInt('5').value)
        self.assertEqual(inst.priority.as_json(), 5)
        self.assertEqual(inst.serviceCategory[0].coding[0].code.value, FHIRCode("gp").value)
        self.assertEqual(inst.serviceCategory[0].coding[0].code.as_json(), "gp")
        self.assertEqual(inst.serviceCategory[0].coding[0].display.value, FHIRString("General Practice").value)
        self.assertEqual(inst.serviceCategory[0].coding[0].display.as_json(), "General Practice")
        self.assertEqual(inst.serviceCategory[0].coding[0].system.value, FHIRUri("http://example.org/service-category").value)
        self.assertEqual(inst.serviceCategory[0].coding[0].system.as_json(), "http://example.org/service-category")
        self.assertEqual(inst.serviceType[0].coding[0].code.value, FHIRCode("52").value)
        self.assertEqual(inst.serviceType[0].coding[0].code.as_json(), "52")
        self.assertEqual(inst.serviceType[0].coding[0].display.value, FHIRString("General Discussion").value)
        self.assertEqual(inst.serviceType[0].coding[0].display.as_json(), "General Discussion")
        self.assertEqual(inst.specialty[0].coding[0].code.value, FHIRCode("394814009").value)
        self.assertEqual(inst.specialty[0].coding[0].code.as_json(), "394814009")
        self.assertEqual(inst.specialty[0].coding[0].display.value, FHIRString("General practice").value)
        self.assertEqual(inst.specialty[0].coding[0].display.as_json(), "General practice")
        self.assertEqual(inst.specialty[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.specialty[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.start.value, FHIRInstant("2013-12-09T09:00:00Z").value)
        self.assertEqual(inst.start.as_json(), "2013-12-09T09:00:00Z")
        self.assertEqual(inst.start.date, FHIRInstant('2013-12-09T09:00:00Z').date)
        self.assertEqual(inst.status.value, FHIRCode("booked").value)
        self.assertEqual(inst.status.as_json(), "booked")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Brian MRI results discussion</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Brian MRI results discussion</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testAppointment3(self):
        inst = self.instantiate_from('appointment-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Appointment instance')
        self.implAppointment3(inst)

        js = inst.as_json()
        self.assertEqual("Appointment", js["resourceType"])
        inst2 = appointment.Appointment(js)
        self.implAppointment3(inst2)

    def implAppointment3(self, inst):
        self.assertEqual(inst.appointmentType.coding[0].code.value, FHIRCode("FOLLOWUP").value)
        self.assertEqual(inst.appointmentType.coding[0].code.as_json(), "FOLLOWUP")
        self.assertEqual(inst.appointmentType.coding[0].display.value, FHIRString("A follow up visit from a previous appointment").value)
        self.assertEqual(inst.appointmentType.coding[0].display.as_json(), "A follow up visit from a previous appointment")
        self.assertEqual(inst.appointmentType.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0276").value)
        self.assertEqual(inst.appointmentType.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0276")
        self.assertEqual(inst.comment.value, FHIRString("Further expand on the results of the MRI and determine the next actions that may be appropriate.").value)
        self.assertEqual(inst.comment.as_json(), "Further expand on the results of the MRI and determine the next actions that may be appropriate.")
        self.assertEqual(inst.created.value, FHIRDateTime("2013-10-10").value)
        self.assertEqual(inst.created.as_json(), "2013-10-10")
        self.assertEqual(inst.description.value, FHIRString("Discussion on the results of your recent MRI").value)
        self.assertEqual(inst.description.as_json(), "Discussion on the results of your recent MRI")
        self.assertEqual(inst.end.value, FHIRInstant("2013-12-10T11:00:00Z").value)
        self.assertEqual(inst.end.as_json(), "2013-12-10T11:00:00Z")
        self.assertEqual(inst.end.date, FHIRInstant('2013-12-10T11:00:00Z').date)
        self.assertEqual(inst.id.value, FHIRString("example").value)
        self.assertEqual(inst.id.as_json(), "example")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.participant[0].required.value, FHIRCode("required").value)
        self.assertEqual(inst.participant[0].required.as_json(), "required")
        self.assertEqual(inst.participant[0].status.value, FHIRCode("accepted").value)
        self.assertEqual(inst.participant[0].status.as_json(), "accepted")
        self.assertEqual(inst.participant[1].required.value, FHIRCode("required").value)
        self.assertEqual(inst.participant[1].required.as_json(), "required")
        self.assertEqual(inst.participant[1].status.value, FHIRCode("accepted").value)
        self.assertEqual(inst.participant[1].status.as_json(), "accepted")
        self.assertEqual(inst.participant[1].type[0].coding[0].code.value, FHIRCode("ATND").value)
        self.assertEqual(inst.participant[1].type[0].coding[0].code.as_json(), "ATND")
        self.assertEqual(inst.participant[1].type[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.participant[1].type[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.participant[2].required.value, FHIRCode("required").value)
        self.assertEqual(inst.participant[2].required.as_json(), "required")
        self.assertEqual(inst.participant[2].status.value, FHIRCode("accepted").value)
        self.assertEqual(inst.participant[2].status.as_json(), "accepted")
        self.assertEqual(inst.priority.value, FHIRUnsignedInt('5').value)
        self.assertEqual(inst.priority.as_json(), 5)
        self.assertEqual(inst.serviceCategory[0].coding[0].code.value, FHIRCode("gp").value)
        self.assertEqual(inst.serviceCategory[0].coding[0].code.as_json(), "gp")
        self.assertEqual(inst.serviceCategory[0].coding[0].display.value, FHIRString("General Practice").value)
        self.assertEqual(inst.serviceCategory[0].coding[0].display.as_json(), "General Practice")
        self.assertEqual(inst.serviceCategory[0].coding[0].system.value, FHIRUri("http://example.org/service-category").value)
        self.assertEqual(inst.serviceCategory[0].coding[0].system.as_json(), "http://example.org/service-category")
        self.assertEqual(inst.serviceType[0].coding[0].code.value, FHIRCode("52").value)
        self.assertEqual(inst.serviceType[0].coding[0].code.as_json(), "52")
        self.assertEqual(inst.serviceType[0].coding[0].display.value, FHIRString("General Discussion").value)
        self.assertEqual(inst.serviceType[0].coding[0].display.as_json(), "General Discussion")
        self.assertEqual(inst.specialty[0].coding[0].code.value, FHIRCode("394814009").value)
        self.assertEqual(inst.specialty[0].coding[0].code.as_json(), "394814009")
        self.assertEqual(inst.specialty[0].coding[0].display.value, FHIRString("General practice").value)
        self.assertEqual(inst.specialty[0].coding[0].display.as_json(), "General practice")
        self.assertEqual(inst.specialty[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.specialty[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.start.value, FHIRInstant("2013-12-10T09:00:00Z").value)
        self.assertEqual(inst.start.as_json(), "2013-12-10T09:00:00Z")
        self.assertEqual(inst.start.date, FHIRInstant('2013-12-10T09:00:00Z').date)
        self.assertEqual(inst.status.value, FHIRCode("booked").value)
        self.assertEqual(inst.status.as_json(), "booked")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Brian MRI results discussion</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Brian MRI results discussion</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")


from fhirclient.models.fhirdatatypes import FHIRCode, FHIRString, FHIRUri, FHIRDateTime, FHIRPositiveInt, FHIRUnsignedInt, FHIRInstant