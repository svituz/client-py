#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import procedure

class ProcedureTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Procedure", js["resourceType"])
        return procedure.Procedure(js)

    def testProcedure1(self):
        inst = self.instantiate_from('procedure-example-appendectomy-narrative.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Procedure instance')
        self.implProcedure1(inst)

        js = inst.as_json()
        self.assertEqual("Procedure", js["resourceType"])
        inst2 = procedure.Procedure(js)
        self.implProcedure1(inst2)

    def implProcedure1(self, inst):
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Routine Appendectomy in April 2013 performed by Dr Cecil Surgeon</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Routine Appendectomy in April 2013 performed by Dr Cecil Surgeon</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("additional").value)
        self.assertEqual(inst.text.status.as_json(), "additional")

    def testProcedure2(self):
        inst = self.instantiate_from('procedure-example-ambulation.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Procedure instance')
        self.implProcedure2(inst)

        js = inst.as_json()
        self.assertEqual("Procedure", js["resourceType"])
        inst2 = procedure.Procedure(js)
        self.implProcedure2(inst2)

    def implProcedure2(self, inst):
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("62013009").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "62013009")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Ambulating patient (procedure)").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Ambulating patient (procedure)")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.text.value, FHIRString("Ambulation").value)
        self.assertEqual(inst.code.text.as_json(), "Ambulation")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("12345").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "12345")
        self.assertEqual(inst.instantiatesUri[0].value, FHIRUri("http://example.org/protocol-for-hypertension-during-pregnancy").value)
        self.assertEqual(inst.instantiatesUri[0].as_json(), "http://example.org/protocol-for-hypertension-during-pregnancy")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("not-done").value)
        self.assertEqual(inst.status.as_json(), "not-done")
        self.assertEqual(inst.statusReason.coding[0].code.value, FHIRCode("398254007").value)
        self.assertEqual(inst.statusReason.coding[0].code.as_json(), "398254007")
        self.assertEqual(inst.statusReason.coding[0].display.value, FHIRString("  Pre-eclampsia (disorder)").value)
        self.assertEqual(inst.statusReason.coding[0].display.as_json(), "  Pre-eclampsia (disorder)")
        self.assertEqual(inst.statusReason.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.statusReason.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.statusReason.text.value, FHIRString("Pre-eclampsia").value)
        self.assertEqual(inst.statusReason.text.as_json(), "Pre-eclampsia")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Ambulation procedure was not done</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Ambulation procedure was not done</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testProcedure3(self):
        inst = self.instantiate_from('procedure-example-implant.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Procedure instance')
        self.implProcedure3(inst)

        js = inst.as_json()
        self.assertEqual("Procedure", js["resourceType"])
        inst2 = procedure.Procedure(js)
        self.implProcedure3(inst2)

    def implProcedure3(self, inst):
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("25267002").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "25267002")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Insertion of intracardiac pacemaker (procedure)").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Insertion of intracardiac pacemaker (procedure)")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.text.value, FHIRString("Implant Pacemaker").value)
        self.assertEqual(inst.code.text.as_json(), "Implant Pacemaker")
        self.assertEqual(inst.focalDevice[0].action.coding[0].code.value, FHIRCode("implanted").value)
        self.assertEqual(inst.focalDevice[0].action.coding[0].code.as_json(), "implanted")
        self.assertEqual(inst.focalDevice[0].action.coding[0].system.value, FHIRUri("http://hl7.org/fhir/device-action").value)
        self.assertEqual(inst.focalDevice[0].action.coding[0].system.as_json(), "http://hl7.org/fhir/device-action")
        self.assertEqual(inst.followUp[0].text.value, FHIRString("ROS 5 days  - 2013-04-10").value)
        self.assertEqual(inst.followUp[0].text.as_json(), "ROS 5 days  - 2013-04-10")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.note[0].text.value, FHIRMarkdown("Routine Appendectomy. Appendix was inflamed and in retro-caecal position").value)
        self.assertEqual(inst.note[0].text.as_json(), "Routine Appendectomy. Appendix was inflamed and in retro-caecal position")
        self.assertEqual(inst.performedDateTime.value, FHIRDateTime("2015-04-05").value)
        self.assertEqual(inst.performedDateTime.as_json(), "2015-04-05")
        self.assertEqual(inst.reasonCode[0].text.value, FHIRString("Bradycardia").value)
        self.assertEqual(inst.reasonCode[0].text.as_json(), "Bradycardia")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testProcedure4(self):
        inst = self.instantiate_from('procedure-example-biopsy.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Procedure instance')
        self.implProcedure4(inst)

        js = inst.as_json()
        self.assertEqual("Procedure", js["resourceType"])
        inst2 = procedure.Procedure(js)
        self.implProcedure4(inst2)

    def implProcedure4(self, inst):
        self.assertEqual(inst.bodySite[0].coding[0].code.value, FHIRCode("368225008").value)
        self.assertEqual(inst.bodySite[0].coding[0].code.as_json(), "368225008")
        self.assertEqual(inst.bodySite[0].coding[0].display.value, FHIRString("Entire Left Forearm").value)
        self.assertEqual(inst.bodySite[0].coding[0].display.as_json(), "Entire Left Forearm")
        self.assertEqual(inst.bodySite[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.bodySite[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.bodySite[0].text.value, FHIRString("Left forearm").value)
        self.assertEqual(inst.bodySite[0].text.as_json(), "Left forearm")
        self.assertEqual(inst.category.coding[0].code.value, FHIRCode("103693007").value)
        self.assertEqual(inst.category.coding[0].code.as_json(), "103693007")
        self.assertEqual(inst.category.coding[0].display.value, FHIRString("Diagnostic procedure (procedure)").value)
        self.assertEqual(inst.category.coding[0].display.as_json(), "Diagnostic procedure (procedure)")
        self.assertEqual(inst.category.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.category.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.category.text.value, FHIRString("Diagnostic procedure").value)
        self.assertEqual(inst.category.text.as_json(), "Diagnostic procedure")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("90105005").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "90105005")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Biopsy of soft tissue of forearm (Procedure)").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Biopsy of soft tissue of forearm (Procedure)")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.text.value, FHIRString("Biopsy of suspected melanoma L) arm").value)
        self.assertEqual(inst.code.text.as_json(), "Biopsy of suspected melanoma L) arm")
        self.assertEqual(inst.complication[0].coding[0].code.value, FHIRCode("67750007").value)
        self.assertEqual(inst.complication[0].coding[0].code.as_json(), "67750007")
        self.assertEqual(inst.complication[0].coding[0].display.value, FHIRString("Ineffective airway clearance (finding)").value)
        self.assertEqual(inst.complication[0].coding[0].display.as_json(), "Ineffective airway clearance (finding)")
        self.assertEqual(inst.complication[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.complication[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.complication[0].text.value, FHIRString("Ineffective airway clearance").value)
        self.assertEqual(inst.complication[0].text.as_json(), "Ineffective airway clearance")
        self.assertEqual(inst.followUp[0].text.value, FHIRString("Review in clinic").value)
        self.assertEqual(inst.followUp[0].text.as_json(), "Review in clinic")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.note[0].text.value, FHIRMarkdown("Standard Biopsy").value)
        self.assertEqual(inst.note[0].text.as_json(), "Standard Biopsy")
        self.assertEqual(inst.performedDateTime.value, FHIRDateTime("2014-02-03").value)
        self.assertEqual(inst.performedDateTime.as_json(), "2014-02-03")
        self.assertEqual(inst.reasonCode[0].text.value, FHIRString("Dark lesion l) forearm. getting darker last 3 months.").value)
        self.assertEqual(inst.reasonCode[0].text.as_json(), "Dark lesion l) forearm. getting darker last 3 months.")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Biopsy of suspected melanoma L) arm</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Biopsy of suspected melanoma L) arm</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.usedCode[0].coding[0].code.value, FHIRCode("79068005").value)
        self.assertEqual(inst.usedCode[0].coding[0].code.as_json(), "79068005")
        self.assertEqual(inst.usedCode[0].coding[0].display.value, FHIRString("Needle, device (physical object)").value)
        self.assertEqual(inst.usedCode[0].coding[0].display.as_json(), "Needle, device (physical object)")
        self.assertEqual(inst.usedCode[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.usedCode[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.usedCode[0].text.value, FHIRString("30-guage needle").value)
        self.assertEqual(inst.usedCode[0].text.as_json(), "30-guage needle")

    def testProcedure5(self):
        inst = self.instantiate_from('procedure-example-colonoscopy.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Procedure instance')
        self.implProcedure5(inst)

        js = inst.as_json()
        self.assertEqual("Procedure", js["resourceType"])
        inst2 = procedure.Procedure(js)
        self.implProcedure5(inst2)

    def implProcedure5(self, inst):
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("73761001").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "73761001")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Colonoscopy (procedure)").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Colonoscopy (procedure)")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.text.value, FHIRString("Colonoscopy").value)
        self.assertEqual(inst.code.text.as_json(), "Colonoscopy")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("12345").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "12345")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Colonoscopy with complication</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Colonoscopy with complication</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testProcedure6(self):
        inst = self.instantiate_from('procedure-example-education.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Procedure instance')
        self.implProcedure6(inst)

        js = inst.as_json()
        self.assertEqual("Procedure", js["resourceType"])
        inst2 = procedure.Procedure(js)
        self.implProcedure6(inst2)

    def implProcedure6(self, inst):
        self.assertEqual(inst.category.coding[0].code.value, FHIRCode("311401005").value)
        self.assertEqual(inst.category.coding[0].code.as_json(), "311401005")
        self.assertEqual(inst.category.coding[0].display.value, FHIRString("Patient education (procedure)").value)
        self.assertEqual(inst.category.coding[0].display.as_json(), "Patient education (procedure)")
        self.assertEqual(inst.category.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.category.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.category.text.value, FHIRString("Education").value)
        self.assertEqual(inst.category.text.as_json(), "Education")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("48023004").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "48023004")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Breast self-examination technique education (procedure)").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Breast self-examination technique education (procedure)")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.text.value, FHIRString("Health education - breast examination").value)
        self.assertEqual(inst.code.text.as_json(), "Health education - breast examination")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.performedDateTime.value, FHIRDateTime("2014-08-16").value)
        self.assertEqual(inst.performedDateTime.as_json(), "2014-08-16")
        self.assertEqual(inst.reasonCode[0].text.value, FHIRString("early detection of breast mass").value)
        self.assertEqual(inst.reasonCode[0].text.as_json(), "early detection of breast mass")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">Health education - breast examination for early detection of breast mass</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">Health education - breast examination for early detection of breast mass</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testProcedure7(self):
        inst = self.instantiate_from('procedure-example-f001-heart.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Procedure instance')
        self.implProcedure7(inst)

        js = inst.as_json()
        self.assertEqual("Procedure", js["resourceType"])
        inst2 = procedure.Procedure(js)
        self.implProcedure7(inst2)

    def implProcedure7(self, inst):
        self.assertEqual(inst.bodySite[0].coding[0].code.value, FHIRCode("17401000").value)
        self.assertEqual(inst.bodySite[0].coding[0].code.as_json(), "17401000")
        self.assertEqual(inst.bodySite[0].coding[0].display.value, FHIRString("Heart valve structure").value)
        self.assertEqual(inst.bodySite[0].coding[0].display.as_json(), "Heart valve structure")
        self.assertEqual(inst.bodySite[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.bodySite[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("34068001").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "34068001")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Heart valve replacement").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Heart valve replacement")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.followUp[0].text.value, FHIRString("described in care plan").value)
        self.assertEqual(inst.followUp[0].text.as_json(), "described in care plan")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.outcome.text.value, FHIRString("improved blood circulation").value)
        self.assertEqual(inst.outcome.text.as_json(), "improved blood circulation")
        self.assertEqual(inst.performedPeriod.end.value, FHIRDateTime("2011-06-27").value)
        self.assertEqual(inst.performedPeriod.end.as_json(), "2011-06-27")
        self.assertEqual(inst.performedPeriod.start.value, FHIRDateTime("2011-06-26").value)
        self.assertEqual(inst.performedPeriod.start.as_json(), "2011-06-26")
        self.assertEqual(inst.performer[0].function.coding[0].code.value, FHIRCode("01.000").value)
        self.assertEqual(inst.performer[0].function.coding[0].code.as_json(), "01.000")
        self.assertEqual(inst.performer[0].function.coding[0].display.value, FHIRString("Arts").value)
        self.assertEqual(inst.performer[0].function.coding[0].display.as_json(), "Arts")
        self.assertEqual(inst.performer[0].function.coding[0].system.value, FHIRUri("urn:oid:2.16.840.1.113883.2.4.15.111").value)
        self.assertEqual(inst.performer[0].function.coding[0].system.as_json(), "urn:oid:2.16.840.1.113883.2.4.15.111")
        self.assertEqual(inst.performer[0].function.text.value, FHIRString("Care role").value)
        self.assertEqual(inst.performer[0].function.text.as_json(), "Care role")
        self.assertEqual(inst.reasonCode[0].text.value, FHIRString("Heart valve disorder").value)
        self.assertEqual(inst.reasonCode[0].text.as_json(), "Heart valve disorder")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testProcedure8(self):
        inst = self.instantiate_from('procedure-example-f201-tpf.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Procedure instance')
        self.implProcedure8(inst)

        js = inst.as_json()
        self.assertEqual("Procedure", js["resourceType"])
        inst2 = procedure.Procedure(js)
        self.implProcedure8(inst2)

    def implProcedure8(self, inst):
        self.assertEqual(inst.bodySite[0].coding[0].code.value, FHIRCode("272676008").value)
        self.assertEqual(inst.bodySite[0].coding[0].code.as_json(), "272676008")
        self.assertEqual(inst.bodySite[0].coding[0].display.value, FHIRString("Sphenoid bone").value)
        self.assertEqual(inst.bodySite[0].coding[0].display.as_json(), "Sphenoid bone")
        self.assertEqual(inst.bodySite[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.bodySite[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("367336001").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "367336001")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Chemotherapy").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Chemotherapy")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.instantiatesCanonical[0].value, FHIRCanonical("PlanDefinition/KDN5").value)
        self.assertEqual(inst.instantiatesCanonical[0].as_json(), "PlanDefinition/KDN5")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.note[0].text.value, FHIRMarkdown("Eerste neo-adjuvante TPF-kuur bij groot proces in sphenoid met intracraniale uitbreiding.").value)
        self.assertEqual(inst.note[0].text.as_json(), "Eerste neo-adjuvante TPF-kuur bij groot proces in sphenoid met intracraniale uitbreiding.")
        self.assertEqual(inst.performedPeriod.end.value, FHIRDateTime("2013-01-28T14:27:00+01:00").value)
        self.assertEqual(inst.performedPeriod.end.as_json(), "2013-01-28T14:27:00+01:00")
        self.assertEqual(inst.performedPeriod.start.value, FHIRDateTime("2013-01-28T13:31:00+01:00").value)
        self.assertEqual(inst.performedPeriod.start.as_json(), "2013-01-28T13:31:00+01:00")
        self.assertEqual(inst.performer[0].function.coding[0].code.value, FHIRCode("310512001").value)
        self.assertEqual(inst.performer[0].function.coding[0].code.as_json(), "310512001")
        self.assertEqual(inst.performer[0].function.coding[0].display.value, FHIRString("Medical oncologist").value)
        self.assertEqual(inst.performer[0].function.coding[0].display.as_json(), "Medical oncologist")
        self.assertEqual(inst.performer[0].function.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.performer[0].function.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.reasonCode[0].text.value, FHIRString("DiagnosticReport/f201").value)
        self.assertEqual(inst.reasonCode[0].text.as_json(), "DiagnosticReport/f201")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testProcedure9(self):
        inst = self.instantiate_from('procedure-example-f003-abscess.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Procedure instance')
        self.implProcedure9(inst)

        js = inst.as_json()
        self.assertEqual("Procedure", js["resourceType"])
        inst2 = procedure.Procedure(js)
        self.implProcedure9(inst2)

    def implProcedure9(self, inst):
        self.assertEqual(inst.bodySite[0].coding[0].code.value, FHIRCode("83030008").value)
        self.assertEqual(inst.bodySite[0].coding[0].code.as_json(), "83030008")
        self.assertEqual(inst.bodySite[0].coding[0].display.value, FHIRString("Retropharyngeal area").value)
        self.assertEqual(inst.bodySite[0].coding[0].display.as_json(), "Retropharyngeal area")
        self.assertEqual(inst.bodySite[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.bodySite[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("172960003").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "172960003")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Incision of retropharyngeal abscess").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Incision of retropharyngeal abscess")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.followUp[0].text.value, FHIRString("described in care plan").value)
        self.assertEqual(inst.followUp[0].text.as_json(), "described in care plan")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.outcome.text.value, FHIRString("removal of the retropharyngeal abscess").value)
        self.assertEqual(inst.outcome.text.as_json(), "removal of the retropharyngeal abscess")
        self.assertEqual(inst.performedPeriod.end.value, FHIRDateTime("2013-03-24T10:30:10+01:00").value)
        self.assertEqual(inst.performedPeriod.end.as_json(), "2013-03-24T10:30:10+01:00")
        self.assertEqual(inst.performedPeriod.start.value, FHIRDateTime("2013-03-24T09:30:10+01:00").value)
        self.assertEqual(inst.performedPeriod.start.as_json(), "2013-03-24T09:30:10+01:00")
        self.assertEqual(inst.performer[0].function.coding[0].code.value, FHIRCode("01.000").value)
        self.assertEqual(inst.performer[0].function.coding[0].code.as_json(), "01.000")
        self.assertEqual(inst.performer[0].function.coding[0].display.value, FHIRString("Arts").value)
        self.assertEqual(inst.performer[0].function.coding[0].display.as_json(), "Arts")
        self.assertEqual(inst.performer[0].function.coding[0].system.value, FHIRUri("urn:oid:2.16.840.1.113883.2.4.15.111").value)
        self.assertEqual(inst.performer[0].function.coding[0].system.as_json(), "urn:oid:2.16.840.1.113883.2.4.15.111")
        self.assertEqual(inst.performer[0].function.text.value, FHIRString("Care role").value)
        self.assertEqual(inst.performer[0].function.text.as_json(), "Care role")
        self.assertEqual(inst.reasonCode[0].text.value, FHIRString("abcess in retropharyngeal area").value)
        self.assertEqual(inst.reasonCode[0].text.as_json(), "abcess in retropharyngeal area")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testProcedure10(self):
        inst = self.instantiate_from('procedure-example-f004-tracheotomy.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Procedure instance')
        self.implProcedure10(inst)

        js = inst.as_json()
        self.assertEqual("Procedure", js["resourceType"])
        inst2 = procedure.Procedure(js)
        self.implProcedure10(inst2)

    def implProcedure10(self, inst):
        self.assertEqual(inst.bodySite[0].coding[0].code.value, FHIRCode("83030008").value)
        self.assertEqual(inst.bodySite[0].coding[0].code.as_json(), "83030008")
        self.assertEqual(inst.bodySite[0].coding[0].display.value, FHIRString("Retropharyngeal area").value)
        self.assertEqual(inst.bodySite[0].coding[0].display.as_json(), "Retropharyngeal area")
        self.assertEqual(inst.bodySite[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.bodySite[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode("48387007").value)
        self.assertEqual(inst.code.coding[0].code.as_json(), "48387007")
        self.assertEqual(inst.code.coding[0].display.value, FHIRString("Tracheotomy").value)
        self.assertEqual(inst.code.coding[0].display.as_json(), "Tracheotomy")
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.followUp[0].text.value, FHIRString("described in care plan").value)
        self.assertEqual(inst.followUp[0].text.as_json(), "described in care plan")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.outcome.text.value, FHIRString("removal of the retropharyngeal abscess").value)
        self.assertEqual(inst.outcome.text.as_json(), "removal of the retropharyngeal abscess")
        self.assertEqual(inst.performedPeriod.end.value, FHIRDateTime("2013-03-22T10:30:10+01:00").value)
        self.assertEqual(inst.performedPeriod.end.as_json(), "2013-03-22T10:30:10+01:00")
        self.assertEqual(inst.performedPeriod.start.value, FHIRDateTime("2013-03-22T09:30:10+01:00").value)
        self.assertEqual(inst.performedPeriod.start.as_json(), "2013-03-22T09:30:10+01:00")
        self.assertEqual(inst.performer[0].function.coding[0].code.value, FHIRCode("01.000").value)
        self.assertEqual(inst.performer[0].function.coding[0].code.as_json(), "01.000")
        self.assertEqual(inst.performer[0].function.coding[0].display.value, FHIRString("Arts").value)
        self.assertEqual(inst.performer[0].function.coding[0].display.as_json(), "Arts")
        self.assertEqual(inst.performer[0].function.coding[0].system.value, FHIRUri("urn:oid:2.16.840.1.113883.2.4.15.111").value)
        self.assertEqual(inst.performer[0].function.coding[0].system.as_json(), "urn:oid:2.16.840.1.113883.2.4.15.111")
        self.assertEqual(inst.performer[0].function.text.value, FHIRString("Care role").value)
        self.assertEqual(inst.performer[0].function.text.as_json(), "Care role")
        self.assertEqual(inst.reasonCode[0].text.value, FHIRString("ensure breathing during surgery").value)
        self.assertEqual(inst.reasonCode[0].text.as_json(), "ensure breathing during surgery")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")


from fhirclient.models.fhirdatatypes import FHIRCode, FHIRString, FHIRUri, FHIRMarkdown, FHIRDateTime, FHIRCanonical