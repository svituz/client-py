#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import imagingstudy

class ImagingStudyTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("ImagingStudy", js["resourceType"])
        return imagingstudy.ImagingStudy(js)

    def testImagingStudy1(self):
        inst = self.instantiate_from('imagingstudy-example-xr.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ImagingStudy instance')
        self.implImagingStudy1(inst)

        js = inst.as_json()
        self.assertEqual("ImagingStudy", js["resourceType"])
        inst2 = imagingstudy.ImagingStudy(js)
        self.implImagingStudy1(inst2)

    def implImagingStudy1(self, inst):
        self.assertEqual(inst.id.value, FHIRString("example-xr").value)
        self.assertEqual(inst.id.as_json(), "example-xr")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:dicom:uid").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:dicom:uid")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430046").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430046")
        self.assertEqual(inst.identifier[1].type.coding[0].code.value, FHIRCode("ACSN").value)
        self.assertEqual(inst.identifier[1].type.coding[0].code.as_json(), "ACSN")
        self.assertEqual(inst.identifier[1].type.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0203").value)
        self.assertEqual(inst.identifier[1].type.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0203")
        self.assertEqual(inst.identifier[1].use.value, FHIRCode("usual").value)
        self.assertEqual(inst.identifier[1].use.as_json(), "usual")
        self.assertEqual(inst.identifier[1].value.value, FHIRString("W12342398").value)
        self.assertEqual(inst.identifier[1].value.as_json(), "W12342398")
        self.assertEqual(inst.identifier[2].use.value, FHIRCode("secondary").value)
        self.assertEqual(inst.identifier[2].use.as_json(), "secondary")
        self.assertEqual(inst.identifier[2].value.value, FHIRString("55551234").value)
        self.assertEqual(inst.identifier[2].value.as_json(), "55551234")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.modality[0].code.value, FHIRCode("DX").value)
        self.assertEqual(inst.modality[0].code.as_json(), "DX")
        self.assertEqual(inst.modality[0].system.value, FHIRUri("http://dicom.nema.org/resources/ontology/DCM").value)
        self.assertEqual(inst.modality[0].system.as_json(), "http://dicom.nema.org/resources/ontology/DCM")
        self.assertEqual(inst.note[0].text.value, FHIRMarkdown("XR Wrist 3+ Views").value)
        self.assertEqual(inst.note[0].text.as_json(), "XR Wrist 3+ Views")
        self.assertEqual(inst.numberOfInstances.value, FHIRUnsignedInt('2').value)
        self.assertEqual(inst.numberOfInstances.as_json(), 2)
        self.assertEqual(inst.numberOfSeries.value, FHIRUnsignedInt('1').value)
        self.assertEqual(inst.numberOfSeries.as_json(), 1)
        self.assertEqual(inst.procedureCode[0].coding[0].code.value, FHIRCode("RPID2589").value)
        self.assertEqual(inst.procedureCode[0].coding[0].code.as_json(), "RPID2589")
        self.assertEqual(inst.procedureCode[0].coding[0].display.value, FHIRString("XR Wrist 3+ Views").value)
        self.assertEqual(inst.procedureCode[0].coding[0].display.as_json(), "XR Wrist 3+ Views")
        self.assertEqual(inst.procedureCode[0].coding[0].system.value, FHIRUri("http://www.radlex.org").value)
        self.assertEqual(inst.procedureCode[0].coding[0].system.as_json(), "http://www.radlex.org")
        self.assertEqual(inst.procedureCode[0].text.value, FHIRString("XR Wrist 3+ Views").value)
        self.assertEqual(inst.procedureCode[0].text.as_json(), "XR Wrist 3+ Views")
        self.assertEqual(inst.reasonCode[0].coding[0].code.value, FHIRCode("357009").value)
        self.assertEqual(inst.reasonCode[0].coding[0].code.as_json(), "357009")
        self.assertEqual(inst.reasonCode[0].coding[0].display.value, FHIRString("Closed fracture of trapezoidal bone of wrist").value)
        self.assertEqual(inst.reasonCode[0].coding[0].display.as_json(), "Closed fracture of trapezoidal bone of wrist")
        self.assertEqual(inst.reasonCode[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.reasonCode[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.series[0].bodySite.code.value, FHIRCode("T-15460").value)
        self.assertEqual(inst.series[0].bodySite.code.as_json(), "T-15460")
        self.assertEqual(inst.series[0].bodySite.display.value, FHIRString("Wrist Joint").value)
        self.assertEqual(inst.series[0].bodySite.display.as_json(), "Wrist Joint")
        self.assertEqual(inst.series[0].bodySite.system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.series[0].bodySite.system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.series[0].description.value, FHIRString("XR Wrist 3+ Views").value)
        self.assertEqual(inst.series[0].description.as_json(), "XR Wrist 3+ Views")
        self.assertEqual(inst.series[0].instance[0].number.value, FHIRUnsignedInt('1').value)
        self.assertEqual(inst.series[0].instance[0].number.as_json(), 1)
        self.assertEqual(inst.series[0].instance[0].sopClass.code.value, FHIRCode("urn:oid:1.2.840.10008.5.1.4.1.1.2").value)
        self.assertEqual(inst.series[0].instance[0].sopClass.code.as_json(), "urn:oid:1.2.840.10008.5.1.4.1.1.2")
        self.assertEqual(inst.series[0].instance[0].sopClass.system.value, FHIRUri("urn:ietf:rfc:3986").value)
        self.assertEqual(inst.series[0].instance[0].sopClass.system.as_json(), "urn:ietf:rfc:3986")
        self.assertEqual(inst.series[0].instance[0].title.value, FHIRString("PA VIEW").value)
        self.assertEqual(inst.series[0].instance[0].title.as_json(), "PA VIEW")
        self.assertEqual(inst.series[0].instance[0].uid.value, FHIRId("2.16.124.113543.6003.1154777499.30246.19789.3503430045.1.1").value)
        self.assertEqual(inst.series[0].instance[0].uid.as_json(), "2.16.124.113543.6003.1154777499.30246.19789.3503430045.1.1")
        self.assertEqual(inst.series[0].instance[1].number.value, FHIRUnsignedInt('2').value)
        self.assertEqual(inst.series[0].instance[1].number.as_json(), 2)
        self.assertEqual(inst.series[0].instance[1].sopClass.code.value, FHIRCode("urn:oid:1.2.840.10008.5.1.4.1.1.2").value)
        self.assertEqual(inst.series[0].instance[1].sopClass.code.as_json(), "urn:oid:1.2.840.10008.5.1.4.1.1.2")
        self.assertEqual(inst.series[0].instance[1].sopClass.system.value, FHIRUri("urn:ietf:rfc:3986").value)
        self.assertEqual(inst.series[0].instance[1].sopClass.system.as_json(), "urn:ietf:rfc:3986")
        self.assertEqual(inst.series[0].instance[1].title.value, FHIRString("LL VIEW").value)
        self.assertEqual(inst.series[0].instance[1].title.as_json(), "LL VIEW")
        self.assertEqual(inst.series[0].instance[1].uid.value, FHIRId("2.16.124.113543.6003.1154777499.30246.19789.3503430045.1.2").value)
        self.assertEqual(inst.series[0].instance[1].uid.as_json(), "2.16.124.113543.6003.1154777499.30246.19789.3503430045.1.2")
        self.assertEqual(inst.series[0].laterality.code.value, FHIRCode("419161000").value)
        self.assertEqual(inst.series[0].laterality.code.as_json(), "419161000")
        self.assertEqual(inst.series[0].laterality.display.value, FHIRString("Unilateral left").value)
        self.assertEqual(inst.series[0].laterality.display.as_json(), "Unilateral left")
        self.assertEqual(inst.series[0].laterality.system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.series[0].laterality.system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.series[0].modality.code.value, FHIRCode("DX").value)
        self.assertEqual(inst.series[0].modality.code.as_json(), "DX")
        self.assertEqual(inst.series[0].modality.system.value, FHIRUri("http://dicom.nema.org/resources/ontology/DCM").value)
        self.assertEqual(inst.series[0].modality.system.as_json(), "http://dicom.nema.org/resources/ontology/DCM")
        self.assertEqual(inst.series[0].number.value, FHIRUnsignedInt('3').value)
        self.assertEqual(inst.series[0].number.as_json(), 3)
        self.assertEqual(inst.series[0].numberOfInstances.value, FHIRUnsignedInt('2').value)
        self.assertEqual(inst.series[0].numberOfInstances.as_json(), 2)
        self.assertEqual(inst.series[0].performer[0].function.coding[0].code.value, FHIRCode("PRF").value)
        self.assertEqual(inst.series[0].performer[0].function.coding[0].code.as_json(), "PRF")
        self.assertEqual(inst.series[0].performer[0].function.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ParticipationType").value)
        self.assertEqual(inst.series[0].performer[0].function.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ParticipationType")
        self.assertEqual(inst.series[0].started.value, FHIRDateTime("2011-01-01T11:01:20+03:00").value)
        self.assertEqual(inst.series[0].started.as_json(), "2011-01-01T11:01:20+03:00")
        self.assertEqual(inst.series[0].uid.value, FHIRId("2.16.124.113543.6003.1154777499.30246.19789.3503430045.1").value)
        self.assertEqual(inst.series[0].uid.as_json(), "2.16.124.113543.6003.1154777499.30246.19789.3503430045.1")
        self.assertEqual(inst.started.value, FHIRDateTime("2017-01-01T11:01:20+03:00").value)
        self.assertEqual(inst.started.as_json(), "2017-01-01T11:01:20+03:00")
        self.assertEqual(inst.status.value, FHIRCode("available").value)
        self.assertEqual(inst.status.as_json(), "available")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">XR Wrist 3+ Views. John Smith (MRN: 09236). Accession: W12342398. Performed: 2017-01-01. 1 series, 2 images.</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">XR Wrist 3+ Views. John Smith (MRN: 09236). Accession: W12342398. Performed: 2017-01-01. 1 series, 2 images.</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testImagingStudy2(self):
        inst = self.instantiate_from('imagingstudy-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ImagingStudy instance')
        self.implImagingStudy2(inst)

        js = inst.as_json()
        self.assertEqual("ImagingStudy", js["resourceType"])
        inst2 = imagingstudy.ImagingStudy(js)
        self.implImagingStudy2(inst2)

    def implImagingStudy2(self, inst):
        self.assertEqual(inst.id.value, FHIRString("example").value)
        self.assertEqual(inst.id.as_json(), "example")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:dicom:uid").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:dicom:uid")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.numberOfInstances.value, FHIRUnsignedInt('1').value)
        self.assertEqual(inst.numberOfInstances.as_json(), 1)
        self.assertEqual(inst.numberOfSeries.value, FHIRUnsignedInt('1').value)
        self.assertEqual(inst.numberOfSeries.as_json(), 1)
        self.assertEqual(inst.series[0].bodySite.code.value, FHIRCode("67734004").value)
        self.assertEqual(inst.series[0].bodySite.code.as_json(), "67734004")
        self.assertEqual(inst.series[0].bodySite.display.value, FHIRString("Upper Trunk Structure").value)
        self.assertEqual(inst.series[0].bodySite.display.as_json(), "Upper Trunk Structure")
        self.assertEqual(inst.series[0].bodySite.system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.series[0].bodySite.system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.series[0].description.value, FHIRString("CT Surview 180").value)
        self.assertEqual(inst.series[0].description.as_json(), "CT Surview 180")
        self.assertEqual(inst.series[0].instance[0].number.value, FHIRUnsignedInt('1').value)
        self.assertEqual(inst.series[0].instance[0].number.as_json(), 1)
        self.assertEqual(inst.series[0].instance[0].sopClass.code.value, FHIRCode("urn:oid:1.2.840.10008.5.1.4.1.1.2").value)
        self.assertEqual(inst.series[0].instance[0].sopClass.code.as_json(), "urn:oid:1.2.840.10008.5.1.4.1.1.2")
        self.assertEqual(inst.series[0].instance[0].sopClass.system.value, FHIRUri("urn:ietf:rfc:3986").value)
        self.assertEqual(inst.series[0].instance[0].sopClass.system.as_json(), "urn:ietf:rfc:3986")
        self.assertEqual(inst.series[0].instance[0].uid.value, FHIRId("2.16.124.113543.6003.189642796.63084.16748.2599092903").value)
        self.assertEqual(inst.series[0].instance[0].uid.as_json(), "2.16.124.113543.6003.189642796.63084.16748.2599092903")
        self.assertEqual(inst.series[0].modality.code.value, FHIRCode("CT").value)
        self.assertEqual(inst.series[0].modality.code.as_json(), "CT")
        self.assertEqual(inst.series[0].modality.system.value, FHIRUri("http://dicom.nema.org/resources/ontology/DCM").value)
        self.assertEqual(inst.series[0].modality.system.as_json(), "http://dicom.nema.org/resources/ontology/DCM")
        self.assertEqual(inst.series[0].number.value, FHIRUnsignedInt('3').value)
        self.assertEqual(inst.series[0].number.as_json(), 3)
        self.assertEqual(inst.series[0].numberOfInstances.value, FHIRUnsignedInt('1').value)
        self.assertEqual(inst.series[0].numberOfInstances.as_json(), 1)
        self.assertEqual(inst.series[0].uid.value, FHIRId("2.16.124.113543.6003.2588828330.45298.17418.2723805630").value)
        self.assertEqual(inst.series[0].uid.as_json(), "2.16.124.113543.6003.2588828330.45298.17418.2723805630")
        self.assertEqual(inst.started.value, FHIRDateTime("2011-01-01T11:01:20+03:00").value)
        self.assertEqual(inst.started.as_json(), "2011-01-01T11:01:20+03:00")
        self.assertEqual(inst.status.value, FHIRCode("available").value)
        self.assertEqual(inst.status.as_json(), "available")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">CT Chest.  John Smith (MRN: 09236). Accession: W12342398. Performed: 2011-01-01. 3 series, 12 images.</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">CT Chest.  John Smith (MRN: 09236). Accession: W12342398. Performed: 2011-01-01. 3 series, 12 images.</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")


from fhirclient.models.fhirdatatypes import FHIRString, FHIRUri, FHIRCode, FHIRMarkdown, FHIRUnsignedInt, FHIRId, FHIRDateTime