#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import coverageeligibilityresponse

class CoverageEligibilityResponseTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("CoverageEligibilityResponse", js["resourceType"])
        return coverageeligibilityresponse.CoverageEligibilityResponse(js)

    def testCoverageEligibilityResponse1(self):
        inst = self.instantiate_from('coverageeligibilityresponse-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CoverageEligibilityResponse instance')
        self.implCoverageEligibilityResponse1(inst)

        js = inst.as_json()
        self.assertEqual("CoverageEligibilityResponse", js["resourceType"])
        inst2 = coverageeligibilityresponse.CoverageEligibilityResponse(js)
        self.implCoverageEligibilityResponse1(inst2)

    def implCoverageEligibilityResponse1(self, inst):
        self.assertEqual(inst.created.value, FHIRDateTime("2014-08-16").value)
        self.assertEqual(inst.created.as_json(), "2014-08-16")
        self.assertEqual(inst.disposition.value, FHIRString("Policy is currently in-force.").value)
        self.assertEqual(inst.disposition.as_json(), "Policy is currently in-force.")
        self.assertEqual(inst.id.value, FHIRString("E2500").value)
        self.assertEqual(inst.id.as_json(), "E2500")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.BenefitsInc.com/fhir/coverageeligibilityresponse").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.BenefitsInc.com/fhir/coverageeligibilityresponse")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("881234").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "881234")
        self.assertTrue(inst.insurance[0].inforce)
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.outcome.value, FHIRCode("complete").value)
        self.assertEqual(inst.outcome.as_json(), "complete")
        self.assertEqual(inst.purpose[0].value, FHIRCode("validation").value)
        self.assertEqual(inst.purpose[0].as_json(), "validation")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the CoverageEligibilityResponse.</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the CoverageEligibilityResponse.</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testCoverageEligibilityResponse2(self):
        inst = self.instantiate_from('coverageeligibilityresponse-example-benefits.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CoverageEligibilityResponse instance')
        self.implCoverageEligibilityResponse2(inst)

        js = inst.as_json()
        self.assertEqual("CoverageEligibilityResponse", js["resourceType"])
        inst2 = coverageeligibilityresponse.CoverageEligibilityResponse(js)
        self.implCoverageEligibilityResponse2(inst2)

    def implCoverageEligibilityResponse2(self, inst):
        self.assertEqual(inst.created.value, FHIRDateTime("2014-08-16").value)
        self.assertEqual(inst.created.as_json(), "2014-08-16")
        self.assertEqual(inst.disposition.value, FHIRString("Policy is currently in-force.").value)
        self.assertEqual(inst.disposition.as_json(), "Policy is currently in-force.")
        self.assertEqual(inst.id.value, FHIRString("E2501").value)
        self.assertEqual(inst.id.as_json(), "E2501")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.BenefitsInc.com/fhir/coverageeligibilityresponse").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.BenefitsInc.com/fhir/coverageeligibilityresponse")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("881234").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "881234")
        self.assertTrue(inst.insurance[0].inforce)
        self.assertEqual(inst.insurance[0].item[0].benefit[0].allowedMoney.currency.value, FHIRCode("SAR").value)
        self.assertEqual(inst.insurance[0].item[0].benefit[0].allowedMoney.currency.as_json(), "SAR")
        self.assertEqual(inst.insurance[0].item[0].benefit[0].allowedMoney.value, 500000)
        self.assertEqual(inst.insurance[0].item[0].benefit[0].type.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.insurance[0].item[0].benefit[0].type.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.insurance[0].item[0].benefit[1].allowedMoney.currency.value, FHIRCode("SAR").value)
        self.assertEqual(inst.insurance[0].item[0].benefit[1].allowedMoney.currency.as_json(), "SAR")
        self.assertEqual(inst.insurance[0].item[0].benefit[1].allowedMoney.value, 100)
        self.assertEqual(inst.insurance[0].item[0].benefit[1].type.coding[0].code.value, FHIRCode("copay-maximum").value)
        self.assertEqual(inst.insurance[0].item[0].benefit[1].type.coding[0].code.as_json(), "copay-maximum")
        self.assertEqual(inst.insurance[0].item[0].benefit[2].allowedUnsignedInt.value, FHIRUnsignedInt('20').value)
        self.assertEqual(inst.insurance[0].item[0].benefit[2].allowedUnsignedInt.as_json(), 20)
        self.assertEqual(inst.insurance[0].item[0].benefit[2].type.coding[0].code.value, FHIRCode("copay-percent").value)
        self.assertEqual(inst.insurance[0].item[0].benefit[2].type.coding[0].code.as_json(), "copay-percent")
        self.assertEqual(inst.insurance[0].item[0].category.coding[0].code.value, FHIRCode("30").value)
        self.assertEqual(inst.insurance[0].item[0].category.coding[0].code.as_json(), "30")
        self.assertEqual(inst.insurance[0].item[0].category.coding[0].display.value, FHIRString("Health Benefit Plan Coverage").value)
        self.assertEqual(inst.insurance[0].item[0].category.coding[0].display.as_json(), "Health Benefit Plan Coverage")
        self.assertEqual(inst.insurance[0].item[0].category.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-benefitcategory").value)
        self.assertEqual(inst.insurance[0].item[0].category.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-benefitcategory")
        self.assertEqual(inst.insurance[0].item[0].network.coding[0].code.value, FHIRCode("in").value)
        self.assertEqual(inst.insurance[0].item[0].network.coding[0].code.as_json(), "in")
        self.assertEqual(inst.insurance[0].item[0].network.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-network").value)
        self.assertEqual(inst.insurance[0].item[0].network.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-network")
        self.assertEqual(inst.insurance[0].item[0].term.coding[0].code.value, FHIRCode("annual").value)
        self.assertEqual(inst.insurance[0].item[0].term.coding[0].code.as_json(), "annual")
        self.assertEqual(inst.insurance[0].item[0].term.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-term").value)
        self.assertEqual(inst.insurance[0].item[0].term.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-term")
        self.assertEqual(inst.insurance[0].item[0].unit.coding[0].code.value, FHIRCode("individual").value)
        self.assertEqual(inst.insurance[0].item[0].unit.coding[0].code.as_json(), "individual")
        self.assertEqual(inst.insurance[0].item[0].unit.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-unit").value)
        self.assertEqual(inst.insurance[0].item[0].unit.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-unit")
        self.assertEqual(inst.insurance[0].item[1].benefit[0].allowedMoney.currency.value, FHIRCode("SAR").value)
        self.assertEqual(inst.insurance[0].item[1].benefit[0].allowedMoney.currency.as_json(), "SAR")
        self.assertEqual(inst.insurance[0].item[1].benefit[0].allowedMoney.value, 15000)
        self.assertEqual(inst.insurance[0].item[1].benefit[0].type.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.insurance[0].item[1].benefit[0].type.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.insurance[0].item[1].category.coding[0].code.value, FHIRCode("69").value)
        self.assertEqual(inst.insurance[0].item[1].category.coding[0].code.as_json(), "69")
        self.assertEqual(inst.insurance[0].item[1].category.coding[0].display.value, FHIRString("Maternity").value)
        self.assertEqual(inst.insurance[0].item[1].category.coding[0].display.as_json(), "Maternity")
        self.assertEqual(inst.insurance[0].item[1].category.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-benefitcategory").value)
        self.assertEqual(inst.insurance[0].item[1].category.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-benefitcategory")
        self.assertEqual(inst.insurance[0].item[1].network.coding[0].code.value, FHIRCode("in").value)
        self.assertEqual(inst.insurance[0].item[1].network.coding[0].code.as_json(), "in")
        self.assertEqual(inst.insurance[0].item[1].network.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-network").value)
        self.assertEqual(inst.insurance[0].item[1].network.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-network")
        self.assertEqual(inst.insurance[0].item[1].term.coding[0].code.value, FHIRCode("annual").value)
        self.assertEqual(inst.insurance[0].item[1].term.coding[0].code.as_json(), "annual")
        self.assertEqual(inst.insurance[0].item[1].term.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-term").value)
        self.assertEqual(inst.insurance[0].item[1].term.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-term")
        self.assertEqual(inst.insurance[0].item[1].unit.coding[0].code.value, FHIRCode("individual").value)
        self.assertEqual(inst.insurance[0].item[1].unit.coding[0].code.as_json(), "individual")
        self.assertEqual(inst.insurance[0].item[1].unit.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-unit").value)
        self.assertEqual(inst.insurance[0].item[1].unit.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-unit")
        self.assertEqual(inst.insurance[0].item[2].benefit[0].allowedMoney.currency.value, FHIRCode("SAR").value)
        self.assertEqual(inst.insurance[0].item[2].benefit[0].allowedMoney.currency.as_json(), "SAR")
        self.assertEqual(inst.insurance[0].item[2].benefit[0].allowedMoney.value, 2000)
        self.assertEqual(inst.insurance[0].item[2].benefit[0].type.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.insurance[0].item[2].benefit[0].type.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.insurance[0].item[2].category.coding[0].code.value, FHIRCode("F3").value)
        self.assertEqual(inst.insurance[0].item[2].category.coding[0].code.as_json(), "F3")
        self.assertEqual(inst.insurance[0].item[2].category.coding[0].display.value, FHIRString("Dental Coverage").value)
        self.assertEqual(inst.insurance[0].item[2].category.coding[0].display.as_json(), "Dental Coverage")
        self.assertEqual(inst.insurance[0].item[2].category.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-benefitcategory").value)
        self.assertEqual(inst.insurance[0].item[2].category.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-benefitcategory")
        self.assertEqual(inst.insurance[0].item[2].network.coding[0].code.value, FHIRCode("in").value)
        self.assertEqual(inst.insurance[0].item[2].network.coding[0].code.as_json(), "in")
        self.assertEqual(inst.insurance[0].item[2].network.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-network").value)
        self.assertEqual(inst.insurance[0].item[2].network.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-network")
        self.assertEqual(inst.insurance[0].item[2].term.coding[0].code.value, FHIRCode("annual").value)
        self.assertEqual(inst.insurance[0].item[2].term.coding[0].code.as_json(), "annual")
        self.assertEqual(inst.insurance[0].item[2].term.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-term").value)
        self.assertEqual(inst.insurance[0].item[2].term.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-term")
        self.assertEqual(inst.insurance[0].item[2].unit.coding[0].code.value, FHIRCode("individual").value)
        self.assertEqual(inst.insurance[0].item[2].unit.coding[0].code.as_json(), "individual")
        self.assertEqual(inst.insurance[0].item[2].unit.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-unit").value)
        self.assertEqual(inst.insurance[0].item[2].unit.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-unit")
        self.assertEqual(inst.insurance[0].item[3].benefit[0].allowedMoney.currency.value, FHIRCode("SAR").value)
        self.assertEqual(inst.insurance[0].item[3].benefit[0].allowedMoney.currency.as_json(), "SAR")
        self.assertEqual(inst.insurance[0].item[3].benefit[0].allowedMoney.value, 400)
        self.assertEqual(inst.insurance[0].item[3].benefit[0].type.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.insurance[0].item[3].benefit[0].type.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.insurance[0].item[3].category.coding[0].code.value, FHIRCode("F6").value)
        self.assertEqual(inst.insurance[0].item[3].category.coding[0].code.as_json(), "F6")
        self.assertEqual(inst.insurance[0].item[3].category.coding[0].display.value, FHIRString("Vision Coverage").value)
        self.assertEqual(inst.insurance[0].item[3].category.coding[0].display.as_json(), "Vision Coverage")
        self.assertEqual(inst.insurance[0].item[3].category.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-benefitcategory").value)
        self.assertEqual(inst.insurance[0].item[3].category.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-benefitcategory")
        self.assertEqual(inst.insurance[0].item[3].network.coding[0].code.value, FHIRCode("in").value)
        self.assertEqual(inst.insurance[0].item[3].network.coding[0].code.as_json(), "in")
        self.assertEqual(inst.insurance[0].item[3].network.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-network").value)
        self.assertEqual(inst.insurance[0].item[3].network.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-network")
        self.assertEqual(inst.insurance[0].item[3].term.coding[0].code.value, FHIRCode("annual").value)
        self.assertEqual(inst.insurance[0].item[3].term.coding[0].code.as_json(), "annual")
        self.assertEqual(inst.insurance[0].item[3].term.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-term").value)
        self.assertEqual(inst.insurance[0].item[3].term.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-term")
        self.assertEqual(inst.insurance[0].item[3].unit.coding[0].code.value, FHIRCode("individual").value)
        self.assertEqual(inst.insurance[0].item[3].unit.coding[0].code.as_json(), "individual")
        self.assertEqual(inst.insurance[0].item[3].unit.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-unit").value)
        self.assertEqual(inst.insurance[0].item[3].unit.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-unit")
        self.assertEqual(inst.insurance[0].item[4].benefit[0].allowedString.value, FHIRString("shared").value)
        self.assertEqual(inst.insurance[0].item[4].benefit[0].allowedString.as_json(), "shared")
        self.assertEqual(inst.insurance[0].item[4].benefit[0].type.coding[0].code.value, FHIRCode("room").value)
        self.assertEqual(inst.insurance[0].item[4].benefit[0].type.coding[0].code.as_json(), "room")
        self.assertEqual(inst.insurance[0].item[4].benefit[1].allowedMoney.currency.value, FHIRCode("SAR").value)
        self.assertEqual(inst.insurance[0].item[4].benefit[1].allowedMoney.currency.as_json(), "SAR")
        self.assertEqual(inst.insurance[0].item[4].benefit[1].allowedMoney.value, 600)
        self.assertEqual(inst.insurance[0].item[4].benefit[1].type.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.insurance[0].item[4].benefit[1].type.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.insurance[0].item[4].category.coding[0].code.value, FHIRCode("49").value)
        self.assertEqual(inst.insurance[0].item[4].category.coding[0].code.as_json(), "49")
        self.assertEqual(inst.insurance[0].item[4].category.coding[0].display.value, FHIRString("Hospital Room and Board").value)
        self.assertEqual(inst.insurance[0].item[4].category.coding[0].display.as_json(), "Hospital Room and Board")
        self.assertEqual(inst.insurance[0].item[4].category.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-benefitcategory").value)
        self.assertEqual(inst.insurance[0].item[4].category.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-benefitcategory")
        self.assertEqual(inst.insurance[0].item[4].network.coding[0].code.value, FHIRCode("in").value)
        self.assertEqual(inst.insurance[0].item[4].network.coding[0].code.as_json(), "in")
        self.assertEqual(inst.insurance[0].item[4].network.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-network").value)
        self.assertEqual(inst.insurance[0].item[4].network.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-network")
        self.assertEqual(inst.insurance[0].item[4].term.coding[0].code.value, FHIRCode("day").value)
        self.assertEqual(inst.insurance[0].item[4].term.coding[0].code.as_json(), "day")
        self.assertEqual(inst.insurance[0].item[4].term.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-term").value)
        self.assertEqual(inst.insurance[0].item[4].term.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-term")
        self.assertEqual(inst.insurance[0].item[4].unit.coding[0].code.value, FHIRCode("individual").value)
        self.assertEqual(inst.insurance[0].item[4].unit.coding[0].code.as_json(), "individual")
        self.assertEqual(inst.insurance[0].item[4].unit.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-unit").value)
        self.assertEqual(inst.insurance[0].item[4].unit.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-unit")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.outcome.value, FHIRCode("complete").value)
        self.assertEqual(inst.outcome.as_json(), "complete")
        self.assertEqual(inst.purpose[0].value, FHIRCode("validation").value)
        self.assertEqual(inst.purpose[0].as_json(), "validation")
        self.assertEqual(inst.purpose[1].value, FHIRCode("benefits").value)
        self.assertEqual(inst.purpose[1].as_json(), "benefits")
        self.assertEqual(inst.servicedDate.value, FHIRDate("2014-09-17").value)
        self.assertEqual(inst.servicedDate.as_json(), "2014-09-17")
        self.assertEqual(inst.servicedDate.date, FHIRDate('2014-09-17').date)
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the CoverageEligibilityResponse.</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the CoverageEligibilityResponse.</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testCoverageEligibilityResponse3(self):
        inst = self.instantiate_from('coverageeligibilityresponse-example-error.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CoverageEligibilityResponse instance')
        self.implCoverageEligibilityResponse3(inst)

        js = inst.as_json()
        self.assertEqual("CoverageEligibilityResponse", js["resourceType"])
        inst2 = coverageeligibilityresponse.CoverageEligibilityResponse(js)
        self.implCoverageEligibilityResponse3(inst2)

    def implCoverageEligibilityResponse3(self, inst):
        self.assertEqual(inst.created.value, FHIRDateTime("2014-09-16").value)
        self.assertEqual(inst.created.as_json(), "2014-09-16")
        self.assertEqual(inst.disposition.value, FHIRString("Eligibiliy request could not be processed, please address errors before submitting.").value)
        self.assertEqual(inst.disposition.as_json(), "Eligibiliy request could not be processed, please address errors before submitting.")
        self.assertEqual(inst.error[0].code.coding[0].code.value, FHIRCode("a001").value)
        self.assertEqual(inst.error[0].code.coding[0].code.as_json(), "a001")
        self.assertEqual(inst.error[0].code.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/adjudication-error").value)
        self.assertEqual(inst.error[0].code.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/adjudication-error")
        self.assertEqual(inst.form.coding[0].code.value, FHIRCode("ELRSP/2017/01").value)
        self.assertEqual(inst.form.coding[0].code.as_json(), "ELRSP/2017/01")
        self.assertEqual(inst.form.coding[0].system.value, FHIRUri("http://national.org/form").value)
        self.assertEqual(inst.form.coding[0].system.as_json(), "http://national.org/form")
        self.assertEqual(inst.id.value, FHIRString("E2503").value)
        self.assertEqual(inst.id.as_json(), "E2503")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.BenefitsInc.com/fhir/coverageeligibilityresponse").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.BenefitsInc.com/fhir/coverageeligibilityresponse")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("8812343").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "8812343")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.outcome.value, FHIRCode("error").value)
        self.assertEqual(inst.outcome.as_json(), "error")
        self.assertEqual(inst.purpose[0].value, FHIRCode("validation").value)
        self.assertEqual(inst.purpose[0].as_json(), "validation")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the CoverageEligibilityResponse.</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the CoverageEligibilityResponse.</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testCoverageEligibilityResponse4(self):
        inst = self.instantiate_from('coverageeligibilityresponse-example-benefits-2.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CoverageEligibilityResponse instance')
        self.implCoverageEligibilityResponse4(inst)

        js = inst.as_json()
        self.assertEqual("CoverageEligibilityResponse", js["resourceType"])
        inst2 = coverageeligibilityresponse.CoverageEligibilityResponse(js)
        self.implCoverageEligibilityResponse4(inst2)

    def implCoverageEligibilityResponse4(self, inst):
        self.assertEqual(inst.contained[0].id.value, FHIRString("coverage-1").value)
        self.assertEqual(inst.contained[0].id.as_json(), "coverage-1")
        self.assertEqual(inst.created.value, FHIRDateTime("2014-09-16").value)
        self.assertEqual(inst.created.as_json(), "2014-09-16")
        self.assertEqual(inst.disposition.value, FHIRString("Policy is currently in-force.").value)
        self.assertEqual(inst.disposition.as_json(), "Policy is currently in-force.")
        self.assertEqual(inst.form.coding[0].code.value, FHIRCode("ELRSP/2017/01").value)
        self.assertEqual(inst.form.coding[0].code.as_json(), "ELRSP/2017/01")
        self.assertEqual(inst.form.coding[0].system.value, FHIRUri("http://national.org/form").value)
        self.assertEqual(inst.form.coding[0].system.as_json(), "http://national.org/form")
        self.assertEqual(inst.id.value, FHIRString("E2502").value)
        self.assertEqual(inst.id.as_json(), "E2502")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.BenefitsInc.com/fhir/coverageeligibilityresponse").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.BenefitsInc.com/fhir/coverageeligibilityresponse")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("8812342").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "8812342")
        self.assertTrue(inst.insurance[0].inforce)
        self.assertEqual(inst.insurance[0].item[0].benefit[0].allowedMoney.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.insurance[0].item[0].benefit[0].allowedMoney.currency.as_json(), "USD")
        self.assertEqual(inst.insurance[0].item[0].benefit[0].allowedMoney.value, 500000)
        self.assertEqual(inst.insurance[0].item[0].benefit[0].type.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.insurance[0].item[0].benefit[0].type.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.insurance[0].item[0].benefit[0].usedMoney.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.insurance[0].item[0].benefit[0].usedMoney.currency.as_json(), "USD")
        self.assertEqual(inst.insurance[0].item[0].benefit[0].usedMoney.value, 3748.0)
        self.assertEqual(inst.insurance[0].item[0].benefit[1].allowedMoney.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.insurance[0].item[0].benefit[1].allowedMoney.currency.as_json(), "USD")
        self.assertEqual(inst.insurance[0].item[0].benefit[1].allowedMoney.value, 100)
        self.assertEqual(inst.insurance[0].item[0].benefit[1].type.coding[0].code.value, FHIRCode("copay-maximum").value)
        self.assertEqual(inst.insurance[0].item[0].benefit[1].type.coding[0].code.as_json(), "copay-maximum")
        self.assertEqual(inst.insurance[0].item[0].benefit[2].allowedUnsignedInt.value, FHIRUnsignedInt('20').value)
        self.assertEqual(inst.insurance[0].item[0].benefit[2].allowedUnsignedInt.as_json(), 20)
        self.assertEqual(inst.insurance[0].item[0].benefit[2].type.coding[0].code.value, FHIRCode("copay-percent").value)
        self.assertEqual(inst.insurance[0].item[0].benefit[2].type.coding[0].code.as_json(), "copay-percent")
        self.assertEqual(inst.insurance[0].item[0].category.coding[0].code.value, FHIRCode("30").value)
        self.assertEqual(inst.insurance[0].item[0].category.coding[0].code.as_json(), "30")
        self.assertEqual(inst.insurance[0].item[0].category.coding[0].display.value, FHIRString("Health Benefit Plan Coverage").value)
        self.assertEqual(inst.insurance[0].item[0].category.coding[0].display.as_json(), "Health Benefit Plan Coverage")
        self.assertEqual(inst.insurance[0].item[0].category.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-benefitcategory").value)
        self.assertEqual(inst.insurance[0].item[0].category.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-benefitcategory")
        self.assertEqual(inst.insurance[0].item[0].network.coding[0].code.value, FHIRCode("in").value)
        self.assertEqual(inst.insurance[0].item[0].network.coding[0].code.as_json(), "in")
        self.assertEqual(inst.insurance[0].item[0].network.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-network").value)
        self.assertEqual(inst.insurance[0].item[0].network.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-network")
        self.assertEqual(inst.insurance[0].item[0].term.coding[0].code.value, FHIRCode("annual").value)
        self.assertEqual(inst.insurance[0].item[0].term.coding[0].code.as_json(), "annual")
        self.assertEqual(inst.insurance[0].item[0].term.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-term").value)
        self.assertEqual(inst.insurance[0].item[0].term.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-term")
        self.assertEqual(inst.insurance[0].item[0].unit.coding[0].code.value, FHIRCode("individual").value)
        self.assertEqual(inst.insurance[0].item[0].unit.coding[0].code.as_json(), "individual")
        self.assertEqual(inst.insurance[0].item[0].unit.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-unit").value)
        self.assertEqual(inst.insurance[0].item[0].unit.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-unit")
        self.assertEqual(inst.insurance[0].item[1].benefit[0].allowedMoney.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.insurance[0].item[1].benefit[0].allowedMoney.currency.as_json(), "USD")
        self.assertEqual(inst.insurance[0].item[1].benefit[0].allowedMoney.value, 15000)
        self.assertEqual(inst.insurance[0].item[1].benefit[0].type.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.insurance[0].item[1].benefit[0].type.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.insurance[0].item[1].category.coding[0].code.value, FHIRCode("69").value)
        self.assertEqual(inst.insurance[0].item[1].category.coding[0].code.as_json(), "69")
        self.assertEqual(inst.insurance[0].item[1].category.coding[0].display.value, FHIRString("Maternity").value)
        self.assertEqual(inst.insurance[0].item[1].category.coding[0].display.as_json(), "Maternity")
        self.assertEqual(inst.insurance[0].item[1].category.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-benefitcategory").value)
        self.assertEqual(inst.insurance[0].item[1].category.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-benefitcategory")
        self.assertEqual(inst.insurance[0].item[1].network.coding[0].code.value, FHIRCode("in").value)
        self.assertEqual(inst.insurance[0].item[1].network.coding[0].code.as_json(), "in")
        self.assertEqual(inst.insurance[0].item[1].network.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-network").value)
        self.assertEqual(inst.insurance[0].item[1].network.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-network")
        self.assertEqual(inst.insurance[0].item[1].term.coding[0].code.value, FHIRCode("annual").value)
        self.assertEqual(inst.insurance[0].item[1].term.coding[0].code.as_json(), "annual")
        self.assertEqual(inst.insurance[0].item[1].term.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-term").value)
        self.assertEqual(inst.insurance[0].item[1].term.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-term")
        self.assertEqual(inst.insurance[0].item[1].unit.coding[0].code.value, FHIRCode("individual").value)
        self.assertEqual(inst.insurance[0].item[1].unit.coding[0].code.as_json(), "individual")
        self.assertEqual(inst.insurance[0].item[1].unit.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-unit").value)
        self.assertEqual(inst.insurance[0].item[1].unit.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-unit")
        self.assertEqual(inst.insurance[0].item[2].benefit[0].allowedMoney.currency.value, FHIRCode("USD").value)
        self.assertEqual(inst.insurance[0].item[2].benefit[0].allowedMoney.currency.as_json(), "USD")
        self.assertEqual(inst.insurance[0].item[2].benefit[0].allowedMoney.value, 2000)
        self.assertEqual(inst.insurance[0].item[2].benefit[0].type.coding[0].code.value, FHIRCode("benefit").value)
        self.assertEqual(inst.insurance[0].item[2].benefit[0].type.coding[0].code.as_json(), "benefit")
        self.assertEqual(inst.insurance[0].item[2].category.coding[0].code.value, FHIRCode("F3").value)
        self.assertEqual(inst.insurance[0].item[2].category.coding[0].code.as_json(), "F3")
        self.assertEqual(inst.insurance[0].item[2].category.coding[0].display.value, FHIRString("Dental Coverage").value)
        self.assertEqual(inst.insurance[0].item[2].category.coding[0].display.as_json(), "Dental Coverage")
        self.assertEqual(inst.insurance[0].item[2].category.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-benefitcategory").value)
        self.assertEqual(inst.insurance[0].item[2].category.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-benefitcategory")
        self.assertEqual(inst.insurance[0].item[2].network.coding[0].code.value, FHIRCode("in").value)
        self.assertEqual(inst.insurance[0].item[2].network.coding[0].code.as_json(), "in")
        self.assertEqual(inst.insurance[0].item[2].network.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-network").value)
        self.assertEqual(inst.insurance[0].item[2].network.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-network")
        self.assertEqual(inst.insurance[0].item[2].term.coding[0].code.value, FHIRCode("annual").value)
        self.assertEqual(inst.insurance[0].item[2].term.coding[0].code.as_json(), "annual")
        self.assertEqual(inst.insurance[0].item[2].term.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-term").value)
        self.assertEqual(inst.insurance[0].item[2].term.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-term")
        self.assertEqual(inst.insurance[0].item[2].unit.coding[0].code.value, FHIRCode("individual").value)
        self.assertEqual(inst.insurance[0].item[2].unit.coding[0].code.as_json(), "individual")
        self.assertEqual(inst.insurance[0].item[2].unit.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/benefit-unit").value)
        self.assertEqual(inst.insurance[0].item[2].unit.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/benefit-unit")
        self.assertEqual(inst.insurance[0].item[3].category.coding[0].code.value, FHIRCode("F6").value)
        self.assertEqual(inst.insurance[0].item[3].category.coding[0].code.as_json(), "F6")
        self.assertEqual(inst.insurance[0].item[3].category.coding[0].display.value, FHIRString("Vision Coverage").value)
        self.assertEqual(inst.insurance[0].item[3].category.coding[0].display.as_json(), "Vision Coverage")
        self.assertEqual(inst.insurance[0].item[3].category.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/ex-benefitcategory").value)
        self.assertEqual(inst.insurance[0].item[3].category.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/ex-benefitcategory")
        self.assertEqual(inst.insurance[0].item[3].description.value, FHIRString("Vision products and services such as exams, glasses and contact lenses.").value)
        self.assertEqual(inst.insurance[0].item[3].description.as_json(), "Vision products and services such as exams, glasses and contact lenses.")
        self.assertTrue(inst.insurance[0].item[3].excluded)
        self.assertEqual(inst.insurance[0].item[3].name.value, FHIRString("Vision").value)
        self.assertEqual(inst.insurance[0].item[3].name.as_json(), "Vision")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.outcome.value, FHIRCode("complete").value)
        self.assertEqual(inst.outcome.as_json(), "complete")
        self.assertEqual(inst.purpose[0].value, FHIRCode("validation").value)
        self.assertEqual(inst.purpose[0].as_json(), "validation")
        self.assertEqual(inst.purpose[1].value, FHIRCode("benefits").value)
        self.assertEqual(inst.purpose[1].as_json(), "benefits")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.div.value, FHIRString("<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the CoverageEligibilityResponse.</div>").value)
        self.assertEqual(inst.text.div.as_json(), "<div xmlns=\"http://www.w3.org/1999/xhtml\">A human-readable rendering of the CoverageEligibilityResponse.</div>")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")


from fhirclient.models.fhirdatatypes import FHIRDateTime, FHIRString, FHIRUri, FHIRCode, FHIRUnsignedInt, FHIRDate