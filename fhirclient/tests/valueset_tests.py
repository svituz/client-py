#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import valueset

class ValueSetTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("ValueSet", js["resourceType"])
        return valueset.ValueSet(js)

    def testValueSet1(self):
        inst = self.instantiate_from('valueset-example-hierarchical.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ValueSet instance')
        self.implValueSet1(inst)

        js = inst.as_json()
        self.assertEqual("ValueSet", js["resourceType"])
        inst2 = valueset.ValueSet(js)
        self.implValueSet1(inst2)

    def implValueSet1(self, inst):
        self.assertEqual(inst.compose.include[0].concept[0].code.value, FHIRCode("invalid").value)
        self.assertEqual(inst.compose.include[0].concept[0].code.as_json(), "invalid")
        self.assertEqual(inst.compose.include[0].concept[1].code.value, FHIRCode("structure").value)
        self.assertEqual(inst.compose.include[0].concept[1].code.as_json(), "structure")
        self.assertEqual(inst.compose.include[0].concept[2].code.value, FHIRCode("required").value)
        self.assertEqual(inst.compose.include[0].concept[2].code.as_json(), "required")
        self.assertEqual(inst.compose.include[0].concept[3].code.value, FHIRCode("value").value)
        self.assertEqual(inst.compose.include[0].concept[3].code.as_json(), "value")
        self.assertEqual(inst.compose.include[0].concept[4].code.value, FHIRCode("processing").value)
        self.assertEqual(inst.compose.include[0].concept[4].code.as_json(), "processing")
        self.assertEqual(inst.compose.include[0].concept[5].code.value, FHIRCode("duplicate").value)
        self.assertEqual(inst.compose.include[0].concept[5].code.as_json(), "duplicate")
        self.assertEqual(inst.compose.include[0].concept[6].code.value, FHIRCode("not-found").value)
        self.assertEqual(inst.compose.include[0].concept[6].code.as_json(), "not-found")
        self.assertEqual(inst.compose.include[0].concept[7].code.value, FHIRCode("conflict").value)
        self.assertEqual(inst.compose.include[0].concept[7].code.as_json(), "conflict")
        self.assertEqual(inst.compose.include[0].concept[8].code.value, FHIRCode("lock").value)
        self.assertEqual(inst.compose.include[0].concept[8].code.as_json(), "lock")
        self.assertEqual(inst.compose.include[0].concept[9].code.value, FHIRCode("exception").value)
        self.assertEqual(inst.compose.include[0].concept[9].code.as_json(), "exception")
        self.assertEqual(inst.compose.include[0].extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/valueset-expand-rules").value)
        self.assertEqual(inst.compose.include[0].extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/valueset-expand-rules")
        self.assertEqual(inst.compose.include[0].extension[0].valueCode.value, FHIRCode("groups-only").value)
        self.assertEqual(inst.compose.include[0].extension[0].valueCode.as_json(), "groups-only")
        self.assertEqual(inst.compose.include[0].extension[1].extension[0].url.value, FHIRUri("display").value)
        self.assertEqual(inst.compose.include[0].extension[1].extension[0].url.as_json(), "display")
        self.assertEqual(inst.compose.include[0].extension[1].extension[0].valueString.value, FHIRString("(Most common)").value)
        self.assertEqual(inst.compose.include[0].extension[1].extension[0].valueString.as_json(), "(Most common)")
        self.assertEqual(inst.compose.include[0].extension[1].extension[1].url.value, FHIRUri("member").value)
        self.assertEqual(inst.compose.include[0].extension[1].extension[1].url.as_json(), "member")
        self.assertEqual(inst.compose.include[0].extension[1].extension[1].valueCode.value, FHIRCode("login").value)
        self.assertEqual(inst.compose.include[0].extension[1].extension[1].valueCode.as_json(), "login")
        self.assertEqual(inst.compose.include[0].extension[1].extension[2].url.value, FHIRUri("member").value)
        self.assertEqual(inst.compose.include[0].extension[1].extension[2].url.as_json(), "member")
        self.assertEqual(inst.compose.include[0].extension[1].extension[2].valueCode.value, FHIRCode("conflict").value)
        self.assertEqual(inst.compose.include[0].extension[1].extension[2].valueCode.as_json(), "conflict")
        self.assertEqual(inst.compose.include[0].extension[1].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/valueset-expand-group").value)
        self.assertEqual(inst.compose.include[0].extension[1].url.as_json(), "http://hl7.org/fhir/StructureDefinition/valueset-expand-group")
        self.assertEqual(inst.compose.include[0].extension[2].extension[0].url.value, FHIRUri("code").value)
        self.assertEqual(inst.compose.include[0].extension[2].extension[0].url.as_json(), "code")
        self.assertEqual(inst.compose.include[0].extension[2].extension[0].valueCode.value, FHIRCode("processing").value)
        self.assertEqual(inst.compose.include[0].extension[2].extension[0].valueCode.as_json(), "processing")
        self.assertEqual(inst.compose.include[0].extension[2].extension[1].url.value, FHIRUri("member").value)
        self.assertEqual(inst.compose.include[0].extension[2].extension[1].url.as_json(), "member")
        self.assertEqual(inst.compose.include[0].extension[2].extension[1].valueCode.value, FHIRCode("duplicate").value)
        self.assertEqual(inst.compose.include[0].extension[2].extension[1].valueCode.as_json(), "duplicate")
        self.assertEqual(inst.compose.include[0].extension[2].extension[2].url.value, FHIRUri("member").value)
        self.assertEqual(inst.compose.include[0].extension[2].extension[2].url.as_json(), "member")
        self.assertEqual(inst.compose.include[0].extension[2].extension[2].valueCode.value, FHIRCode("not-found").value)
        self.assertEqual(inst.compose.include[0].extension[2].extension[2].valueCode.as_json(), "not-found")
        self.assertEqual(inst.compose.include[0].extension[2].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/valueset-expand-group").value)
        self.assertEqual(inst.compose.include[0].extension[2].url.as_json(), "http://hl7.org/fhir/StructureDefinition/valueset-expand-group")
        self.assertEqual(inst.compose.include[0].extension[3].extension[0].url.value, FHIRUri("code").value)
        self.assertEqual(inst.compose.include[0].extension[3].extension[0].url.as_json(), "code")
        self.assertEqual(inst.compose.include[0].extension[3].extension[0].valueCode.value, FHIRCode("invalid").value)
        self.assertEqual(inst.compose.include[0].extension[3].extension[0].valueCode.as_json(), "invalid")
        self.assertEqual(inst.compose.include[0].extension[3].extension[1].url.value, FHIRUri("member").value)
        self.assertEqual(inst.compose.include[0].extension[3].extension[1].url.as_json(), "member")
        self.assertEqual(inst.compose.include[0].extension[3].extension[1].valueCode.value, FHIRCode("structure").value)
        self.assertEqual(inst.compose.include[0].extension[3].extension[1].valueCode.as_json(), "structure")
        self.assertEqual(inst.compose.include[0].extension[3].extension[2].url.value, FHIRUri("member").value)
        self.assertEqual(inst.compose.include[0].extension[3].extension[2].url.as_json(), "member")
        self.assertEqual(inst.compose.include[0].extension[3].extension[2].valueCode.value, FHIRCode("required").value)
        self.assertEqual(inst.compose.include[0].extension[3].extension[2].valueCode.as_json(), "required")
        self.assertEqual(inst.compose.include[0].extension[3].extension[3].url.value, FHIRUri("member").value)
        self.assertEqual(inst.compose.include[0].extension[3].extension[3].url.as_json(), "member")
        self.assertEqual(inst.compose.include[0].extension[3].extension[3].valueCode.value, FHIRCode("value").value)
        self.assertEqual(inst.compose.include[0].extension[3].extension[3].valueCode.as_json(), "value")
        self.assertEqual(inst.compose.include[0].extension[3].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/valueset-expand-group").value)
        self.assertEqual(inst.compose.include[0].extension[3].url.as_json(), "http://hl7.org/fhir/StructureDefinition/valueset-expand-group")
        self.assertEqual(inst.compose.include[0].extension[4].extension[0].url.value, FHIRUri("code").value)
        self.assertEqual(inst.compose.include[0].extension[4].extension[0].url.as_json(), "code")
        self.assertEqual(inst.compose.include[0].extension[4].extension[0].valueCode.value, FHIRCode("transient").value)
        self.assertEqual(inst.compose.include[0].extension[4].extension[0].valueCode.as_json(), "transient")
        self.assertEqual(inst.compose.include[0].extension[4].extension[1].url.value, FHIRUri("member").value)
        self.assertEqual(inst.compose.include[0].extension[4].extension[1].url.as_json(), "member")
        self.assertEqual(inst.compose.include[0].extension[4].extension[1].valueCode.value, FHIRCode("lock").value)
        self.assertEqual(inst.compose.include[0].extension[4].extension[1].valueCode.as_json(), "lock")
        self.assertEqual(inst.compose.include[0].extension[4].extension[2].url.value, FHIRUri("member").value)
        self.assertEqual(inst.compose.include[0].extension[4].extension[2].url.as_json(), "member")
        self.assertEqual(inst.compose.include[0].extension[4].extension[2].valueCode.value, FHIRCode("exception").value)
        self.assertEqual(inst.compose.include[0].extension[4].extension[2].valueCode.as_json(), "exception")
        self.assertEqual(inst.compose.include[0].extension[4].extension[3].url.value, FHIRUri("member").value)
        self.assertEqual(inst.compose.include[0].extension[4].extension[3].url.as_json(), "member")
        self.assertEqual(inst.compose.include[0].extension[4].extension[3].valueCode.value, FHIRCode("throttled").value)
        self.assertEqual(inst.compose.include[0].extension[4].extension[3].valueCode.as_json(), "throttled")
        self.assertEqual(inst.compose.include[0].extension[4].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/valueset-expand-group").value)
        self.assertEqual(inst.compose.include[0].extension[4].url.as_json(), "http://hl7.org/fhir/StructureDefinition/valueset-expand-group")
        self.assertEqual(inst.compose.include[0].extension[5].extension[0].url.value, FHIRUri("code").value)
        self.assertEqual(inst.compose.include[0].extension[5].extension[0].url.as_json(), "code")
        self.assertEqual(inst.compose.include[0].extension[5].extension[0].valueCode.value, FHIRCode("security").value)
        self.assertEqual(inst.compose.include[0].extension[5].extension[0].valueCode.as_json(), "security")
        self.assertEqual(inst.compose.include[0].extension[5].extension[1].url.value, FHIRUri("member").value)
        self.assertEqual(inst.compose.include[0].extension[5].extension[1].url.as_json(), "member")
        self.assertEqual(inst.compose.include[0].extension[5].extension[1].valueCode.value, FHIRCode("login").value)
        self.assertEqual(inst.compose.include[0].extension[5].extension[1].valueCode.as_json(), "login")
        self.assertEqual(inst.compose.include[0].extension[5].extension[2].url.value, FHIRUri("member").value)
        self.assertEqual(inst.compose.include[0].extension[5].extension[2].url.as_json(), "member")
        self.assertEqual(inst.compose.include[0].extension[5].extension[2].valueCode.value, FHIRCode("unknown").value)
        self.assertEqual(inst.compose.include[0].extension[5].extension[2].valueCode.as_json(), "unknown")
        self.assertEqual(inst.compose.include[0].extension[5].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/valueset-expand-group").value)
        self.assertEqual(inst.compose.include[0].extension[5].url.as_json(), "http://hl7.org/fhir/StructureDefinition/valueset-expand-group")
        self.assertEqual(inst.compose.include[0].system.value, FHIRUri("#hacked").value)
        self.assertEqual(inst.compose.include[0].system.as_json(), "#hacked")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("http://hl7.org/fhir").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "http://hl7.org/fhir")
        self.assertEqual(inst.contained[0].id.value, FHIRString("hacked").value)
        self.assertEqual(inst.contained[0].id.as_json(), "hacked")
        self.assertEqual(inst.date.value, FHIRDateTime("2018-07-20").value)
        self.assertEqual(inst.date.as_json(), "2018-07-20")
        self.assertEqual(inst.description.value, FHIRMarkdown("Demonstration of extensions that build a hierarchical contains").value)
        self.assertEqual(inst.description.as_json(), "Demonstration of extensions that build a hierarchical contains")
        self.assertTrue(inst.expansion.contains[0].abstract)
        self.assertEqual(inst.expansion.contains[0].contains[0].code.value, FHIRCode("login").value)
        self.assertEqual(inst.expansion.contains[0].contains[0].code.as_json(), "login")
        self.assertEqual(inst.expansion.contains[0].contains[0].display.value, FHIRString("Login Required").value)
        self.assertEqual(inst.expansion.contains[0].contains[0].display.as_json(), "Login Required")
        self.assertEqual(inst.expansion.contains[0].contains[0].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[0].contains[0].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertEqual(inst.expansion.contains[0].contains[1].code.value, FHIRCode("conflict").value)
        self.assertEqual(inst.expansion.contains[0].contains[1].code.as_json(), "conflict")
        self.assertEqual(inst.expansion.contains[0].contains[1].display.value, FHIRString("Edit Version Conflict").value)
        self.assertEqual(inst.expansion.contains[0].contains[1].display.as_json(), "Edit Version Conflict")
        self.assertEqual(inst.expansion.contains[0].contains[1].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[0].contains[1].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertEqual(inst.expansion.contains[0].display.value, FHIRString("(Most common)").value)
        self.assertEqual(inst.expansion.contains[0].display.as_json(), "(Most common)")
        self.assertEqual(inst.expansion.contains[1].code.value, FHIRCode("processing").value)
        self.assertEqual(inst.expansion.contains[1].code.as_json(), "processing")
        self.assertEqual(inst.expansion.contains[1].contains[0].code.value, FHIRCode("duplicate").value)
        self.assertEqual(inst.expansion.contains[1].contains[0].code.as_json(), "duplicate")
        self.assertEqual(inst.expansion.contains[1].contains[0].display.value, FHIRString("Duplicate").value)
        self.assertEqual(inst.expansion.contains[1].contains[0].display.as_json(), "Duplicate")
        self.assertEqual(inst.expansion.contains[1].contains[0].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[1].contains[0].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertEqual(inst.expansion.contains[1].contains[1].code.value, FHIRCode("not-found").value)
        self.assertEqual(inst.expansion.contains[1].contains[1].code.as_json(), "not-found")
        self.assertEqual(inst.expansion.contains[1].contains[1].display.value, FHIRString("Not Found").value)
        self.assertEqual(inst.expansion.contains[1].contains[1].display.as_json(), "Not Found")
        self.assertEqual(inst.expansion.contains[1].contains[1].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[1].contains[1].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertEqual(inst.expansion.contains[1].display.value, FHIRString("Processing Failure").value)
        self.assertEqual(inst.expansion.contains[1].display.as_json(), "Processing Failure")
        self.assertEqual(inst.expansion.contains[1].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[1].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertTrue(inst.expansion.contains[2].abstract)
        self.assertEqual(inst.expansion.contains[2].code.value, FHIRCode("invalid").value)
        self.assertEqual(inst.expansion.contains[2].code.as_json(), "invalid")
        self.assertEqual(inst.expansion.contains[2].contains[0].code.value, FHIRCode("structure").value)
        self.assertEqual(inst.expansion.contains[2].contains[0].code.as_json(), "structure")
        self.assertEqual(inst.expansion.contains[2].contains[0].display.value, FHIRString("Structural Issue").value)
        self.assertEqual(inst.expansion.contains[2].contains[0].display.as_json(), "Structural Issue")
        self.assertEqual(inst.expansion.contains[2].contains[0].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[2].contains[0].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertEqual(inst.expansion.contains[2].contains[1].code.value, FHIRCode("required").value)
        self.assertEqual(inst.expansion.contains[2].contains[1].code.as_json(), "required")
        self.assertEqual(inst.expansion.contains[2].contains[1].display.value, FHIRString("Required element missing").value)
        self.assertEqual(inst.expansion.contains[2].contains[1].display.as_json(), "Required element missing")
        self.assertEqual(inst.expansion.contains[2].contains[1].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[2].contains[1].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertEqual(inst.expansion.contains[2].contains[2].code.value, FHIRCode("value").value)
        self.assertEqual(inst.expansion.contains[2].contains[2].code.as_json(), "value")
        self.assertEqual(inst.expansion.contains[2].contains[2].display.value, FHIRString("Element value invalid").value)
        self.assertEqual(inst.expansion.contains[2].contains[2].display.as_json(), "Element value invalid")
        self.assertEqual(inst.expansion.contains[2].contains[2].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[2].contains[2].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertEqual(inst.expansion.contains[2].display.value, FHIRString("Invalid Content").value)
        self.assertEqual(inst.expansion.contains[2].display.as_json(), "Invalid Content")
        self.assertEqual(inst.expansion.contains[2].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[2].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertTrue(inst.expansion.contains[3].abstract)
        self.assertEqual(inst.expansion.contains[3].code.value, FHIRCode("transient").value)
        self.assertEqual(inst.expansion.contains[3].code.as_json(), "transient")
        self.assertEqual(inst.expansion.contains[3].contains[0].code.value, FHIRCode("lock-error").value)
        self.assertEqual(inst.expansion.contains[3].contains[0].code.as_json(), "lock-error")
        self.assertEqual(inst.expansion.contains[3].contains[0].display.value, FHIRString("Lock Error").value)
        self.assertEqual(inst.expansion.contains[3].contains[0].display.as_json(), "Lock Error")
        self.assertEqual(inst.expansion.contains[3].contains[0].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[3].contains[0].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertEqual(inst.expansion.contains[3].contains[1].code.value, FHIRCode("exception").value)
        self.assertEqual(inst.expansion.contains[3].contains[1].code.as_json(), "exception")
        self.assertEqual(inst.expansion.contains[3].contains[1].display.value, FHIRString("Exception").value)
        self.assertEqual(inst.expansion.contains[3].contains[1].display.as_json(), "Exception")
        self.assertEqual(inst.expansion.contains[3].contains[1].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[3].contains[1].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertEqual(inst.expansion.contains[3].contains[2].code.value, FHIRCode("throttled").value)
        self.assertEqual(inst.expansion.contains[3].contains[2].code.as_json(), "throttled")
        self.assertEqual(inst.expansion.contains[3].contains[2].display.value, FHIRString("Throttled").value)
        self.assertEqual(inst.expansion.contains[3].contains[2].display.as_json(), "Throttled")
        self.assertEqual(inst.expansion.contains[3].contains[2].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[3].contains[2].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertEqual(inst.expansion.contains[3].display.value, FHIRString("Transient Issue").value)
        self.assertEqual(inst.expansion.contains[3].display.as_json(), "Transient Issue")
        self.assertEqual(inst.expansion.contains[3].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[3].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertTrue(inst.expansion.contains[4].abstract)
        self.assertEqual(inst.expansion.contains[4].code.value, FHIRCode("security").value)
        self.assertEqual(inst.expansion.contains[4].code.as_json(), "security")
        self.assertEqual(inst.expansion.contains[4].contains[0].code.value, FHIRCode("login").value)
        self.assertEqual(inst.expansion.contains[4].contains[0].code.as_json(), "login")
        self.assertEqual(inst.expansion.contains[4].contains[0].display.value, FHIRString("Login Required").value)
        self.assertEqual(inst.expansion.contains[4].contains[0].display.as_json(), "Login Required")
        self.assertEqual(inst.expansion.contains[4].contains[0].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[4].contains[0].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertEqual(inst.expansion.contains[4].contains[1].code.value, FHIRCode("unknown").value)
        self.assertEqual(inst.expansion.contains[4].contains[1].code.as_json(), "unknown")
        self.assertEqual(inst.expansion.contains[4].contains[1].display.value, FHIRString("Unknown User").value)
        self.assertEqual(inst.expansion.contains[4].contains[1].display.as_json(), "Unknown User")
        self.assertEqual(inst.expansion.contains[4].contains[1].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[4].contains[1].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertEqual(inst.expansion.contains[4].display.value, FHIRString("Security Problem").value)
        self.assertEqual(inst.expansion.contains[4].display.as_json(), "Security Problem")
        self.assertEqual(inst.expansion.contains[4].system.value, FHIRUri("http://hl7.org/fhir/hacked").value)
        self.assertEqual(inst.expansion.contains[4].system.as_json(), "http://hl7.org/fhir/hacked")
        self.assertEqual(inst.expansion.identifier.value, FHIRUri("urn:uuid:42316ff8-2714-4680-9980-f37a6d1a71bc").value)
        self.assertEqual(inst.expansion.identifier.as_json(), "urn:uuid:42316ff8-2714-4680-9980-f37a6d1a71bc")
        self.assertEqual(inst.expansion.parameter[0].name.value, FHIRString("excludeNotForUI").value)
        self.assertEqual(inst.expansion.parameter[0].name.as_json(), "excludeNotForUI")
        self.assertEqual(inst.expansion.parameter[0].valueUri.value, FHIRUri("false").value)
        self.assertEqual(inst.expansion.parameter[0].valueUri.as_json(), "false")
        self.assertEqual(inst.expansion.timestamp.value, FHIRDateTime("2018-07-20T23:14:07+10:00").value)
        self.assertEqual(inst.expansion.timestamp.as_json(), "2018-07-20T23:14:07+10:00")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.id.value, FHIRString("example-hierarchical").value)
        self.assertEqual(inst.id.as_json(), "example-hierarchical")
        self.assertEqual(inst.meta.profile[0].value, FHIRCanonical("http://hl7.org/fhir/StructureDefinition/shareablevalueset").value)
        self.assertEqual(inst.meta.profile[0].as_json(), "http://hl7.org/fhir/StructureDefinition/shareablevalueset")
        self.assertEqual(inst.name.value, FHIRString("Example Hierarchical ValueSet").value)
        self.assertEqual(inst.name.as_json(), "Example Hierarchical ValueSet")
        self.assertEqual(inst.publisher.value, FHIRString("FHIR Project team").value)
        self.assertEqual(inst.publisher.as_json(), "FHIR Project team")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/ValueSet/example-hierarchical").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/ValueSet/example-hierarchical")
        self.assertEqual(inst.version.value, FHIRString("4.0.1").value)
        self.assertEqual(inst.version.as_json(), "4.0.1")

    def testValueSet2(self):
        inst = self.instantiate_from('valueset-list-example-codes.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ValueSet instance')
        self.implValueSet2(inst)

        js = inst.as_json()
        self.assertEqual("ValueSet", js["resourceType"])
        inst2 = valueset.ValueSet(js)
        self.implValueSet2(inst2)

    def implValueSet2(self, inst):
        self.assertEqual(inst.compose.include[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/list-example-use-codes").value)
        self.assertEqual(inst.compose.include[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/list-example-use-codes")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("http://hl7.org/fhir").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "http://hl7.org/fhir")
        self.assertEqual(inst.date.value, FHIRDateTime("2019-11-01T09:29:23+11:00").value)
        self.assertEqual(inst.date.as_json(), "2019-11-01T09:29:23+11:00")
        self.assertEqual(inst.description.value, FHIRMarkdown("Example use codes for the List resource - typical kinds of use.").value)
        self.assertEqual(inst.description.as_json(), "Example use codes for the List resource - typical kinds of use.")
        self.assertFalse(inst.experimental)
        self.assertEqual(inst.extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/structuredefinition-wg").value)
        self.assertEqual(inst.extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/structuredefinition-wg")
        self.assertEqual(inst.extension[0].valueCode.value, FHIRCode("fhir").value)
        self.assertEqual(inst.extension[0].valueCode.as_json(), "fhir")
        self.assertEqual(inst.extension[1].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status").value)
        self.assertEqual(inst.extension[1].url.as_json(), "http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status")
        self.assertEqual(inst.extension[1].valueCode.value, FHIRCode("draft").value)
        self.assertEqual(inst.extension[1].valueCode.as_json(), "draft")
        self.assertEqual(inst.extension[2].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm").value)
        self.assertEqual(inst.extension[2].url.as_json(), "http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm")
        self.assertEqual(inst.extension[2].valueInteger, 1)
        self.assertEqual(inst.id.value, FHIRString("list-example-codes").value)
        self.assertEqual(inst.id.as_json(), "list-example-codes")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:ietf:rfc:3986").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:ietf:rfc:3986")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("urn:oid:2.16.840.1.113883.4.642.3.316").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "urn:oid:2.16.840.1.113883.4.642.3.316")
        self.assertTrue(inst.immutable)
        self.assertEqual(inst.meta.lastUpdated.value, FHIRInstant("2019-11-01T09:29:23.356+11:00").value)
        self.assertEqual(inst.meta.lastUpdated.as_json(), "2019-11-01T09:29:23.356+11:00")
        self.assertEqual(inst.meta.lastUpdated.date, FHIRInstant('2019-11-01T09:29:23.356+11:00').date)
        self.assertEqual(inst.meta.profile[0].value, FHIRCanonical("http://hl7.org/fhir/StructureDefinition/shareablevalueset").value)
        self.assertEqual(inst.meta.profile[0].as_json(), "http://hl7.org/fhir/StructureDefinition/shareablevalueset")
        self.assertEqual(inst.name.value, FHIRString("ExampleUseCodesForList").value)
        self.assertEqual(inst.name.as_json(), "ExampleUseCodesForList")
        self.assertEqual(inst.publisher.value, FHIRString("FHIR Project").value)
        self.assertEqual(inst.publisher.as_json(), "FHIR Project")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Example Use Codes for List").value)
        self.assertEqual(inst.title.as_json(), "Example Use Codes for List")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/ValueSet/list-example-codes").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/ValueSet/list-example-codes")
        self.assertEqual(inst.version.value, FHIRString("4.0.1").value)
        self.assertEqual(inst.version.as_json(), "4.0.1")

    def testValueSet3(self):
        inst = self.instantiate_from('valueset-example-filter.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ValueSet instance')
        self.implValueSet3(inst)

        js = inst.as_json()
        self.assertEqual("ValueSet", js["resourceType"])
        inst2 = valueset.ValueSet(js)
        self.implValueSet3(inst2)

    def implValueSet3(self, inst):
        self.assertEqual(inst.compose.include[0].filter[0].op.value, FHIRCode("=").value)
        self.assertEqual(inst.compose.include[0].filter[0].op.as_json(), "=")
        self.assertEqual(inst.compose.include[0].filter[0].property.value, FHIRCode("acme-plasma").value)
        self.assertEqual(inst.compose.include[0].filter[0].property.as_json(), "acme-plasma")
        self.assertEqual(inst.compose.include[0].filter[0].value.value, FHIRString("true").value)
        self.assertEqual(inst.compose.include[0].filter[0].value.as_json(), "true")
        self.assertEqual(inst.compose.include[0].system.value, FHIRUri("http://hl7.org/fhir/CodeSystem/example").value)
        self.assertEqual(inst.compose.include[0].system.as_json(), "http://hl7.org/fhir/CodeSystem/example")
        self.assertEqual(inst.contact[0].name.value, FHIRString("FHIR project team").value)
        self.assertEqual(inst.contact[0].name.as_json(), "FHIR project team")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("http://hl7.org/fhir").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "http://hl7.org/fhir")
        self.assertEqual(inst.date.value, FHIRDateTime("2018-11-01").value)
        self.assertEqual(inst.date.as_json(), "2018-11-01")
        self.assertEqual(inst.description.value, FHIRMarkdown("ACME Codes for Cholesterol: Plasma only - demonstrating the use of a filter defined in a CodeSystem").value)
        self.assertEqual(inst.description.as_json(), "ACME Codes for Cholesterol: Plasma only - demonstrating the use of a filter defined in a CodeSystem")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.id.value, FHIRString("example-filter").value)
        self.assertEqual(inst.id.as_json(), "example-filter")
        self.assertEqual(inst.name.value, FHIRString("ACMECholCodesPlasma").value)
        self.assertEqual(inst.name.as_json(), "ACMECholCodesPlasma")
        self.assertEqual(inst.publisher.value, FHIRString("HL7 International").value)
        self.assertEqual(inst.publisher.as_json(), "HL7 International")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("ACME Codes for Cholesterol: Plasma only").value)
        self.assertEqual(inst.title.as_json(), "ACME Codes for Cholesterol: Plasma only")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/ValueSet/example-filter").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/ValueSet/example-filter")
        self.assertEqual(inst.version.value, FHIRString("4.0.1").value)
        self.assertEqual(inst.version.as_json(), "4.0.1")

    def testValueSet4(self):
        inst = self.instantiate_from('valueset-example-inactive.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ValueSet instance')
        self.implValueSet4(inst)

        js = inst.as_json()
        self.assertEqual("ValueSet", js["resourceType"])
        inst2 = valueset.ValueSet(js)
        self.implValueSet4(inst2)

    def implValueSet4(self, inst):
        self.assertTrue(inst.compose.inactive)
        self.assertEqual(inst.compose.include[0].filter[0].op.value, FHIRCode("descendent-of").value)
        self.assertEqual(inst.compose.include[0].filter[0].op.as_json(), "descendent-of")
        self.assertEqual(inst.compose.include[0].filter[0].property.value, FHIRCode("concept").value)
        self.assertEqual(inst.compose.include[0].filter[0].property.as_json(), "concept")
        self.assertEqual(inst.compose.include[0].filter[0].value.value, FHIRString("_ActMoodPredicate").value)
        self.assertEqual(inst.compose.include[0].filter[0].value.as_json(), "_ActMoodPredicate")
        self.assertEqual(inst.compose.include[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActMood").value)
        self.assertEqual(inst.compose.include[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActMood")
        self.assertEqual(inst.description.value, FHIRMarkdown("HL7 v3 ActMood Predicate codes, including inactive codes").value)
        self.assertEqual(inst.description.as_json(), "HL7 v3 ActMood Predicate codes, including inactive codes")
        self.assertEqual(inst.expansion.contains[0].code.value, FHIRCode("CRT").value)
        self.assertEqual(inst.expansion.contains[0].code.as_json(), "CRT")
        self.assertEqual(inst.expansion.contains[0].display.value, FHIRString("criterion").value)
        self.assertEqual(inst.expansion.contains[0].display.as_json(), "criterion")
        self.assertTrue(inst.expansion.contains[0].inactive)
        self.assertEqual(inst.expansion.contains[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActMood").value)
        self.assertEqual(inst.expansion.contains[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActMood")
        self.assertEqual(inst.expansion.contains[1].code.value, FHIRCode("EXPEC").value)
        self.assertEqual(inst.expansion.contains[1].code.as_json(), "EXPEC")
        self.assertEqual(inst.expansion.contains[1].contains[0].code.value, FHIRCode("GOL").value)
        self.assertEqual(inst.expansion.contains[1].contains[0].code.as_json(), "GOL")
        self.assertEqual(inst.expansion.contains[1].contains[0].display.value, FHIRString("goal").value)
        self.assertEqual(inst.expansion.contains[1].contains[0].display.as_json(), "goal")
        self.assertEqual(inst.expansion.contains[1].contains[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActMood").value)
        self.assertEqual(inst.expansion.contains[1].contains[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActMood")
        self.assertEqual(inst.expansion.contains[1].contains[1].code.value, FHIRCode("RSK").value)
        self.assertEqual(inst.expansion.contains[1].contains[1].code.as_json(), "RSK")
        self.assertEqual(inst.expansion.contains[1].contains[1].display.value, FHIRString("risk").value)
        self.assertEqual(inst.expansion.contains[1].contains[1].display.as_json(), "risk")
        self.assertEqual(inst.expansion.contains[1].contains[1].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActMood").value)
        self.assertEqual(inst.expansion.contains[1].contains[1].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActMood")
        self.assertEqual(inst.expansion.contains[1].display.value, FHIRString("expectation").value)
        self.assertEqual(inst.expansion.contains[1].display.as_json(), "expectation")
        self.assertEqual(inst.expansion.contains[1].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActMood").value)
        self.assertEqual(inst.expansion.contains[1].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActMood")
        self.assertEqual(inst.expansion.contains[2].code.value, FHIRCode("OPT").value)
        self.assertEqual(inst.expansion.contains[2].code.as_json(), "OPT")
        self.assertEqual(inst.expansion.contains[2].display.value, FHIRString("option").value)
        self.assertEqual(inst.expansion.contains[2].display.as_json(), "option")
        self.assertEqual(inst.expansion.contains[2].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActMood").value)
        self.assertEqual(inst.expansion.contains[2].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActMood")
        self.assertEqual(inst.expansion.identifier.value, FHIRUri("urn:uuid:46c00b3f-003a-4f31-9d4b-ea2de58b2a99").value)
        self.assertEqual(inst.expansion.identifier.as_json(), "urn:uuid:46c00b3f-003a-4f31-9d4b-ea2de58b2a99")
        self.assertEqual(inst.expansion.timestamp.value, FHIRDateTime("2017-02-26T10:00:00Z").value)
        self.assertEqual(inst.expansion.timestamp.as_json(), "2017-02-26T10:00:00Z")
        self.assertEqual(inst.id.value, FHIRString("inactive").value)
        self.assertEqual(inst.id.as_json(), "inactive")
        self.assertEqual(inst.name.value, FHIRString("Example-inactive").value)
        self.assertEqual(inst.name.as_json(), "Example-inactive")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Example with inactive codes").value)
        self.assertEqual(inst.title.as_json(), "Example with inactive codes")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/ValueSet/inactive").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/ValueSet/inactive")
        self.assertEqual(inst.version.value, FHIRString("4.0.1").value)
        self.assertEqual(inst.version.as_json(), "4.0.1")

    def testValueSet5(self):
        inst = self.instantiate_from('valueset-example-intensional.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ValueSet instance')
        self.implValueSet5(inst)

        js = inst.as_json()
        self.assertEqual("ValueSet", js["resourceType"])
        inst2 = valueset.ValueSet(js)
        self.implValueSet5(inst2)

    def implValueSet5(self, inst):
        self.assertEqual(inst.compose.exclude[0].concept[0].code.value, FHIRCode("5932-9").value)
        self.assertEqual(inst.compose.exclude[0].concept[0].code.as_json(), "5932-9")
        self.assertEqual(inst.compose.exclude[0].concept[0].display.value, FHIRString("Cholesterol [Presence] in Blood by Test strip").value)
        self.assertEqual(inst.compose.exclude[0].concept[0].display.as_json(), "Cholesterol [Presence] in Blood by Test strip")
        self.assertEqual(inst.compose.exclude[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.compose.exclude[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.compose.include[0].filter[0].op.value, FHIRCode("=").value)
        self.assertEqual(inst.compose.include[0].filter[0].op.as_json(), "=")
        self.assertEqual(inst.compose.include[0].filter[0].property.value, FHIRCode("parent").value)
        self.assertEqual(inst.compose.include[0].filter[0].property.as_json(), "parent")
        self.assertEqual(inst.compose.include[0].filter[0].value.value, FHIRString("LP43571-6").value)
        self.assertEqual(inst.compose.include[0].filter[0].value.as_json(), "LP43571-6")
        self.assertEqual(inst.compose.include[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.compose.include[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.contact[0].name.value, FHIRString("FHIR project team").value)
        self.assertEqual(inst.contact[0].name.as_json(), "FHIR project team")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("http://hl7.org/fhir").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "http://hl7.org/fhir")
        self.assertEqual(inst.copyright.value, FHIRMarkdown("This content from LOINCÂ® is copyright Â© 1995 Regenstrief Institute, Inc. and the LOINC Committee, and available at no cost under the license at http://loinc.org/terms-of-use").value)
        self.assertEqual(inst.copyright.as_json(), "This content from LOINCÂ® is copyright Â© 1995 Regenstrief Institute, Inc. and the LOINC Committee, and available at no cost under the license at http://loinc.org/terms-of-use")
        self.assertEqual(inst.date.value, FHIRDateTime("2015-06-22").value)
        self.assertEqual(inst.date.as_json(), "2015-06-22")
        self.assertEqual(inst.description.value, FHIRMarkdown("This is an example value set that includes all the LOINC codes for serum/plasma cholesterol from v2.36.").value)
        self.assertEqual(inst.description.as_json(), "This is an example value set that includes all the LOINC codes for serum/plasma cholesterol from v2.36.")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.id.value, FHIRString("example-intensional").value)
        self.assertEqual(inst.id.as_json(), "example-intensional")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://acme.com/identifiers/valuesets").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://acme.com/identifiers/valuesets")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("loinc-cholesterol-ext").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "loinc-cholesterol-ext")
        self.assertEqual(inst.meta.profile[0].value, FHIRCanonical("http://hl7.org/fhir/StructureDefinition/shareablevalueset").value)
        self.assertEqual(inst.meta.profile[0].as_json(), "http://hl7.org/fhir/StructureDefinition/shareablevalueset")
        self.assertEqual(inst.name.value, FHIRString("LOINC Codes for Cholesterol in Serum/Plasma").value)
        self.assertEqual(inst.name.as_json(), "LOINC Codes for Cholesterol in Serum/Plasma")
        self.assertEqual(inst.publisher.value, FHIRString("HL7 International").value)
        self.assertEqual(inst.publisher.as_json(), "HL7 International")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/ValueSet/example-intensional").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/ValueSet/example-intensional")
        self.assertEqual(inst.version.value, FHIRString("20150622").value)
        self.assertEqual(inst.version.as_json(), "20150622")

    def testValueSet6(self):
        inst = self.instantiate_from('valueset-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ValueSet instance')
        self.implValueSet6(inst)

        js = inst.as_json()
        self.assertEqual("ValueSet", js["resourceType"])
        inst2 = valueset.ValueSet(js)
        self.implValueSet6(inst2)

    def implValueSet6(self, inst):
        self.assertTrue(inst.compose.inactive)
        self.assertEqual(inst.compose.include[0].concept[0].code.value, FHIRCode("14647-2").value)
        self.assertEqual(inst.compose.include[0].concept[0].code.as_json(), "14647-2")
        self.assertEqual(inst.compose.include[0].concept[0].display.value, FHIRString("Cholesterol [Moles/Volume]").value)
        self.assertEqual(inst.compose.include[0].concept[0].display.as_json(), "Cholesterol [Moles/Volume]")
        self.assertEqual(inst.compose.include[0].concept[1].code.value, FHIRCode("2093-3").value)
        self.assertEqual(inst.compose.include[0].concept[1].code.as_json(), "2093-3")
        self.assertEqual(inst.compose.include[0].concept[1].display.value, FHIRString("Cholesterol [Mass/Volume]").value)
        self.assertEqual(inst.compose.include[0].concept[1].display.as_json(), "Cholesterol [Mass/Volume]")
        self.assertEqual(inst.compose.include[0].concept[2].code.value, FHIRCode("35200-5").value)
        self.assertEqual(inst.compose.include[0].concept[2].code.as_json(), "35200-5")
        self.assertEqual(inst.compose.include[0].concept[2].display.value, FHIRString("Cholesterol [Mass Or Moles/Volume]").value)
        self.assertEqual(inst.compose.include[0].concept[2].display.as_json(), "Cholesterol [Mass Or Moles/Volume]")
        self.assertEqual(inst.compose.include[0].concept[3].code.value, FHIRCode("9342-7").value)
        self.assertEqual(inst.compose.include[0].concept[3].code.as_json(), "9342-7")
        self.assertEqual(inst.compose.include[0].concept[3].display.value, FHIRString("Cholesterol [Percentile]").value)
        self.assertEqual(inst.compose.include[0].concept[3].display.as_json(), "Cholesterol [Percentile]")
        self.assertEqual(inst.compose.include[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.compose.include[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.compose.include[0].version.value, FHIRString("2.36").value)
        self.assertEqual(inst.compose.include[0].version.as_json(), "2.36")
        self.assertEqual(inst.compose.lockedDate.value, FHIRDate("2012-06-13").value)
        self.assertEqual(inst.compose.lockedDate.as_json(), "2012-06-13")
        self.assertEqual(inst.compose.lockedDate.date, FHIRDate('2012-06-13').date)
        self.assertEqual(inst.contact[0].name.value, FHIRString("FHIR project team").value)
        self.assertEqual(inst.contact[0].name.as_json(), "FHIR project team")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("http://hl7.org/fhir").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "http://hl7.org/fhir")
        self.assertEqual(inst.copyright.value, FHIRMarkdown("This content from LOINC ® is copyright © 1995 Regenstrief Institute, Inc. and the LOINC Committee, and available at no cost under the license at http://loinc.org/terms-of-use.").value)
        self.assertEqual(inst.copyright.as_json(), "This content from LOINC ® is copyright © 1995 Regenstrief Institute, Inc. and the LOINC Committee, and available at no cost under the license at http://loinc.org/terms-of-use.")
        self.assertEqual(inst.date.value, FHIRDateTime("2015-06-22").value)
        self.assertEqual(inst.date.as_json(), "2015-06-22")
        self.assertEqual(inst.description.value, FHIRMarkdown("This is an example value set that includes all the LOINC codes for serum/plasma cholesterol from v2.36.").value)
        self.assertEqual(inst.description.as_json(), "This is an example value set that includes all the LOINC codes for serum/plasma cholesterol from v2.36.")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.id.value, FHIRString("example-extensional").value)
        self.assertEqual(inst.id.as_json(), "example-extensional")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://acme.com/identifiers/valuesets").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://acme.com/identifiers/valuesets")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("loinc-cholesterol-int").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "loinc-cholesterol-int")
        self.assertEqual(inst.jurisdiction[0].coding[0].code.value, FHIRCode("US").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].code.as_json(), "US")
        self.assertEqual(inst.jurisdiction[0].coding[0].system.value, FHIRUri("urn:iso:std:iso:3166").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].system.as_json(), "urn:iso:std:iso:3166")
        self.assertEqual(inst.meta.profile[0].value, FHIRCanonical("http://hl7.org/fhir/StructureDefinition/shareablevalueset").value)
        self.assertEqual(inst.meta.profile[0].as_json(), "http://hl7.org/fhir/StructureDefinition/shareablevalueset")
        self.assertEqual(inst.name.value, FHIRString("LOINC Codes for Cholesterol in Serum/Plasma").value)
        self.assertEqual(inst.name.as_json(), "LOINC Codes for Cholesterol in Serum/Plasma")
        self.assertEqual(inst.publisher.value, FHIRString("HL7 International").value)
        self.assertEqual(inst.publisher.as_json(), "HL7 International")
        self.assertEqual(inst.purpose.value, FHIRMarkdown("This value set was published by ACME Inc in order to make clear which codes are used for Cholesterol by AcmeClinicals (Adult Ambulatory care support in USA)").value)
        self.assertEqual(inst.purpose.as_json(), "This value set was published by ACME Inc in order to make clear which codes are used for Cholesterol by AcmeClinicals (Adult Ambulatory care support in USA)")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/ValueSet/example-extensional").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/ValueSet/example-extensional")
        self.assertEqual(inst.useContext[0].code.code.value, FHIRCode("age").value)
        self.assertEqual(inst.useContext[0].code.code.as_json(), "age")
        self.assertEqual(inst.useContext[0].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[0].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[0].valueQuantity.code.value, FHIRCode("a").value)
        self.assertEqual(inst.useContext[0].valueQuantity.code.as_json(), "a")
        self.assertEqual(inst.useContext[0].valueQuantity.comparator.value, FHIRCode(">").value)
        self.assertEqual(inst.useContext[0].valueQuantity.comparator.as_json(), ">")
        self.assertEqual(inst.useContext[0].valueQuantity.system.value, FHIRUri("http://unitsofmeasure.org").value)
        self.assertEqual(inst.useContext[0].valueQuantity.system.as_json(), "http://unitsofmeasure.org")
        self.assertEqual(inst.useContext[0].valueQuantity.unit.value, FHIRString("yrs").value)
        self.assertEqual(inst.useContext[0].valueQuantity.unit.as_json(), "yrs")
        self.assertEqual(inst.useContext[0].valueQuantity.value, 18)
        self.assertEqual(inst.version.value, FHIRString("20150622").value)
        self.assertEqual(inst.version.as_json(), "20150622")

    def testValueSet7(self):
        inst = self.instantiate_from('valueset-example-yesnodontknow.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ValueSet instance')
        self.implValueSet7(inst)

        js = inst.as_json()
        self.assertEqual("ValueSet", js["resourceType"])
        inst2 = valueset.ValueSet(js)
        self.implValueSet7(inst2)

    def implValueSet7(self, inst):
        self.assertEqual(inst.compose.include[0].valueSet[0].value, FHIRCanonical("http://terminology.hl7.org/ValueSet/v2-0136").value)
        self.assertEqual(inst.compose.include[0].valueSet[0].as_json(), "http://terminology.hl7.org/ValueSet/v2-0136")
        self.assertEqual(inst.compose.include[1].concept[0].code.value, FHIRCode("asked-unknown").value)
        self.assertEqual(inst.compose.include[1].concept[0].code.as_json(), "asked-unknown")
        self.assertEqual(inst.compose.include[1].concept[0].display.value, FHIRString("Don't know").value)
        self.assertEqual(inst.compose.include[1].concept[0].display.as_json(), "Don't know")
        self.assertEqual(inst.compose.include[1].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/data-absent-reason").value)
        self.assertEqual(inst.compose.include[1].system.as_json(), "http://terminology.hl7.org/CodeSystem/data-absent-reason")
        self.assertEqual(inst.description.value, FHIRMarkdown("For Capturing simple yes-no-don't know answers").value)
        self.assertEqual(inst.description.as_json(), "For Capturing simple yes-no-don't know answers")
        self.assertEqual(inst.expansion.contains[0].code.value, FHIRCode("Y").value)
        self.assertEqual(inst.expansion.contains[0].code.as_json(), "Y")
        self.assertEqual(inst.expansion.contains[0].display.value, FHIRString("Yes").value)
        self.assertEqual(inst.expansion.contains[0].display.as_json(), "Yes")
        self.assertEqual(inst.expansion.contains[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0136").value)
        self.assertEqual(inst.expansion.contains[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0136")
        self.assertEqual(inst.expansion.contains[1].code.value, FHIRCode("N").value)
        self.assertEqual(inst.expansion.contains[1].code.as_json(), "N")
        self.assertEqual(inst.expansion.contains[1].display.value, FHIRString("No").value)
        self.assertEqual(inst.expansion.contains[1].display.as_json(), "No")
        self.assertEqual(inst.expansion.contains[1].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v2-0136").value)
        self.assertEqual(inst.expansion.contains[1].system.as_json(), "http://terminology.hl7.org/CodeSystem/v2-0136")
        self.assertEqual(inst.expansion.contains[2].code.value, FHIRCode("asked-unknown").value)
        self.assertEqual(inst.expansion.contains[2].code.as_json(), "asked-unknown")
        self.assertEqual(inst.expansion.contains[2].display.value, FHIRString("Don't know").value)
        self.assertEqual(inst.expansion.contains[2].display.as_json(), "Don't know")
        self.assertEqual(inst.expansion.contains[2].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/data-absent-reason").value)
        self.assertEqual(inst.expansion.contains[2].system.as_json(), "http://terminology.hl7.org/CodeSystem/data-absent-reason")
        self.assertEqual(inst.expansion.identifier.value, FHIRUri("urn:uuid:bf99fe50-2c2b-41ad-bd63-bee6919810b4").value)
        self.assertEqual(inst.expansion.identifier.as_json(), "urn:uuid:bf99fe50-2c2b-41ad-bd63-bee6919810b4")
        self.assertEqual(inst.expansion.timestamp.value, FHIRDateTime("2015-07-14T10:00:00Z").value)
        self.assertEqual(inst.expansion.timestamp.as_json(), "2015-07-14T10:00:00Z")
        self.assertEqual(inst.id.value, FHIRString("yesnodontknow").value)
        self.assertEqual(inst.id.as_json(), "yesnodontknow")
        self.assertEqual(inst.name.value, FHIRString("Yes/No/Don't Know").value)
        self.assertEqual(inst.name.as_json(), "Yes/No/Don't Know")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/ValueSet/yesnodontknow").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/ValueSet/yesnodontknow")
        self.assertEqual(inst.version.value, FHIRString("4.0.1").value)
        self.assertEqual(inst.version.as_json(), "4.0.1")

    def testValueSet8(self):
        inst = self.instantiate_from('valueset-example-expansion.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ValueSet instance')
        self.implValueSet8(inst)

        js = inst.as_json()
        self.assertEqual("ValueSet", js["resourceType"])
        inst2 = valueset.ValueSet(js)
        self.implValueSet8(inst2)

    def implValueSet8(self, inst):
        self.assertEqual(inst.compose.include[0].filter[0].op.value, FHIRCode("=").value)
        self.assertEqual(inst.compose.include[0].filter[0].op.as_json(), "=")
        self.assertEqual(inst.compose.include[0].filter[0].property.value, FHIRCode("parent").value)
        self.assertEqual(inst.compose.include[0].filter[0].property.as_json(), "parent")
        self.assertEqual(inst.compose.include[0].filter[0].value.value, FHIRString("LP43571-6").value)
        self.assertEqual(inst.compose.include[0].filter[0].value.as_json(), "LP43571-6")
        self.assertEqual(inst.compose.include[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.compose.include[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("http://hl7.org/fhir").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "http://hl7.org/fhir")
        self.assertEqual(inst.copyright.value, FHIRMarkdown("This content from LOINC® is copyright © 1995 Regenstrief Institute, Inc. and the LOINC Committee, and available at no cost under the license at http://loinc.org/terms-of-use.").value)
        self.assertEqual(inst.copyright.as_json(), "This content from LOINC® is copyright © 1995 Regenstrief Institute, Inc. and the LOINC Committee, and available at no cost under the license at http://loinc.org/terms-of-use.")
        self.assertEqual(inst.date.value, FHIRDateTime("2015-06-22").value)
        self.assertEqual(inst.date.as_json(), "2015-06-22")
        self.assertEqual(inst.description.value, FHIRMarkdown("This is an example value set that includes all the LOINC codes for serum/plasma cholesterol from v2.36.").value)
        self.assertEqual(inst.description.as_json(), "This is an example value set that includes all the LOINC codes for serum/plasma cholesterol from v2.36.")
        self.assertEqual(inst.expansion.contains[0].code.value, FHIRCode("14647-2").value)
        self.assertEqual(inst.expansion.contains[0].code.as_json(), "14647-2")
        self.assertEqual(inst.expansion.contains[0].display.value, FHIRString("Cholesterol [Moles/volume] in Serum or Plasma").value)
        self.assertEqual(inst.expansion.contains[0].display.as_json(), "Cholesterol [Moles/volume] in Serum or Plasma")
        self.assertEqual(inst.expansion.contains[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.expansion.contains[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.expansion.contains[0].version.value, FHIRString("2.50").value)
        self.assertEqual(inst.expansion.contains[0].version.as_json(), "2.50")
        self.assertTrue(inst.expansion.contains[1].abstract)
        self.assertEqual(inst.expansion.contains[1].contains[0].code.value, FHIRCode("2093-3").value)
        self.assertEqual(inst.expansion.contains[1].contains[0].code.as_json(), "2093-3")
        self.assertEqual(inst.expansion.contains[1].contains[0].display.value, FHIRString("Cholesterol [Mass/volume] in Serum or Plasma").value)
        self.assertEqual(inst.expansion.contains[1].contains[0].display.as_json(), "Cholesterol [Mass/volume] in Serum or Plasma")
        self.assertEqual(inst.expansion.contains[1].contains[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.expansion.contains[1].contains[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.expansion.contains[1].contains[0].version.value, FHIRString("2.50").value)
        self.assertEqual(inst.expansion.contains[1].contains[0].version.as_json(), "2.50")
        self.assertEqual(inst.expansion.contains[1].contains[1].code.value, FHIRCode("48620-9").value)
        self.assertEqual(inst.expansion.contains[1].contains[1].code.as_json(), "48620-9")
        self.assertEqual(inst.expansion.contains[1].contains[1].display.value, FHIRString("Cholesterol [Mass/volume] in Serum or Plasma ultracentrifugate").value)
        self.assertEqual(inst.expansion.contains[1].contains[1].display.as_json(), "Cholesterol [Mass/volume] in Serum or Plasma ultracentrifugate")
        self.assertEqual(inst.expansion.contains[1].contains[1].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.expansion.contains[1].contains[1].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.expansion.contains[1].contains[1].version.value, FHIRString("2.50").value)
        self.assertEqual(inst.expansion.contains[1].contains[1].version.as_json(), "2.50")
        self.assertEqual(inst.expansion.contains[1].contains[2].code.value, FHIRCode("9342-7").value)
        self.assertEqual(inst.expansion.contains[1].contains[2].code.as_json(), "9342-7")
        self.assertEqual(inst.expansion.contains[1].contains[2].display.value, FHIRString("Cholesterol [Percentile]").value)
        self.assertEqual(inst.expansion.contains[1].contains[2].display.as_json(), "Cholesterol [Percentile]")
        self.assertEqual(inst.expansion.contains[1].contains[2].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.expansion.contains[1].contains[2].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.expansion.contains[1].contains[2].version.value, FHIRString("2.50").value)
        self.assertEqual(inst.expansion.contains[1].contains[2].version.as_json(), "2.50")
        self.assertEqual(inst.expansion.contains[1].display.value, FHIRString("Cholesterol codes").value)
        self.assertEqual(inst.expansion.contains[1].display.as_json(), "Cholesterol codes")
        self.assertTrue(inst.expansion.contains[2].abstract)
        self.assertEqual(inst.expansion.contains[2].contains[0].code.value, FHIRCode("2096-6").value)
        self.assertEqual(inst.expansion.contains[2].contains[0].code.as_json(), "2096-6")
        self.assertEqual(inst.expansion.contains[2].contains[0].display.value, FHIRString("Cholesterol/Triglyceride [Mass Ratio] in Serum or Plasma").value)
        self.assertEqual(inst.expansion.contains[2].contains[0].display.as_json(), "Cholesterol/Triglyceride [Mass Ratio] in Serum or Plasma")
        self.assertEqual(inst.expansion.contains[2].contains[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.expansion.contains[2].contains[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.expansion.contains[2].contains[0].version.value, FHIRString("2.50").value)
        self.assertEqual(inst.expansion.contains[2].contains[0].version.as_json(), "2.50")
        self.assertEqual(inst.expansion.contains[2].contains[1].code.value, FHIRCode("35200-5").value)
        self.assertEqual(inst.expansion.contains[2].contains[1].code.as_json(), "35200-5")
        self.assertEqual(inst.expansion.contains[2].contains[1].display.value, FHIRString("Cholesterol/Triglyceride [Mass Ratio] in Serum or Plasma").value)
        self.assertEqual(inst.expansion.contains[2].contains[1].display.as_json(), "Cholesterol/Triglyceride [Mass Ratio] in Serum or Plasma")
        self.assertEqual(inst.expansion.contains[2].contains[1].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.expansion.contains[2].contains[1].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.expansion.contains[2].contains[1].version.value, FHIRString("2.50").value)
        self.assertEqual(inst.expansion.contains[2].contains[1].version.as_json(), "2.50")
        self.assertEqual(inst.expansion.contains[2].contains[2].code.value, FHIRCode("48089-7").value)
        self.assertEqual(inst.expansion.contains[2].contains[2].code.as_json(), "48089-7")
        self.assertEqual(inst.expansion.contains[2].contains[2].display.value, FHIRString("Cholesterol/Apolipoprotein B [Molar ratio] in Serum or Plasma").value)
        self.assertEqual(inst.expansion.contains[2].contains[2].display.as_json(), "Cholesterol/Apolipoprotein B [Molar ratio] in Serum or Plasma")
        self.assertEqual(inst.expansion.contains[2].contains[2].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.expansion.contains[2].contains[2].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.expansion.contains[2].contains[2].version.value, FHIRString("2.50").value)
        self.assertEqual(inst.expansion.contains[2].contains[2].version.as_json(), "2.50")
        self.assertEqual(inst.expansion.contains[2].contains[3].code.value, FHIRCode("55838-7").value)
        self.assertEqual(inst.expansion.contains[2].contains[3].code.as_json(), "55838-7")
        self.assertEqual(inst.expansion.contains[2].contains[3].display.value, FHIRString("Cholesterol/Phospholipid [Molar ratio] in Serum or Plasma").value)
        self.assertEqual(inst.expansion.contains[2].contains[3].display.as_json(), "Cholesterol/Phospholipid [Molar ratio] in Serum or Plasma")
        self.assertEqual(inst.expansion.contains[2].contains[3].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.expansion.contains[2].contains[3].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.expansion.contains[2].contains[3].version.value, FHIRString("2.50").value)
        self.assertEqual(inst.expansion.contains[2].contains[3].version.as_json(), "2.50")
        self.assertEqual(inst.expansion.contains[2].display.value, FHIRString("Cholesterol Ratios").value)
        self.assertEqual(inst.expansion.contains[2].display.as_json(), "Cholesterol Ratios")
        self.assertEqual(inst.expansion.extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/valueset-expansionSource").value)
        self.assertEqual(inst.expansion.extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/valueset-expansionSource")
        self.assertEqual(inst.expansion.extension[0].valueUri.value, FHIRUri("http://hl7.org/fhir/ValueSet/example-extensional").value)
        self.assertEqual(inst.expansion.extension[0].valueUri.as_json(), "http://hl7.org/fhir/ValueSet/example-extensional")
        self.assertEqual(inst.expansion.identifier.value, FHIRUri("urn:uuid:42316ff8-2714-4680-9980-f37a6d1a71bc").value)
        self.assertEqual(inst.expansion.identifier.as_json(), "urn:uuid:42316ff8-2714-4680-9980-f37a6d1a71bc")
        self.assertEqual(inst.expansion.offset, 0)
        self.assertEqual(inst.expansion.parameter[0].name.value, FHIRString("version").value)
        self.assertEqual(inst.expansion.parameter[0].name.as_json(), "version")
        self.assertEqual(inst.expansion.parameter[0].valueString.value, FHIRString("2.50").value)
        self.assertEqual(inst.expansion.parameter[0].valueString.as_json(), "2.50")
        self.assertEqual(inst.expansion.timestamp.value, FHIRDateTime("2015-06-22T13:56:07Z").value)
        self.assertEqual(inst.expansion.timestamp.as_json(), "2015-06-22T13:56:07Z")
        self.assertEqual(inst.expansion.total, 8)
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.id.value, FHIRString("example-expansion").value)
        self.assertEqual(inst.id.as_json(), "example-expansion")
        self.assertEqual(inst.meta.profile[0].value, FHIRCanonical("http://hl7.org/fhir/StructureDefinition/shareablevalueset").value)
        self.assertEqual(inst.meta.profile[0].as_json(), "http://hl7.org/fhir/StructureDefinition/shareablevalueset")
        self.assertEqual(inst.name.value, FHIRString("LOINC Codes for Cholesterol in Serum/Plasma").value)
        self.assertEqual(inst.name.as_json(), "LOINC Codes for Cholesterol in Serum/Plasma")
        self.assertEqual(inst.publisher.value, FHIRString("FHIR Project team").value)
        self.assertEqual(inst.publisher.as_json(), "FHIR Project team")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/ValueSet/example-expansion").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/ValueSet/example-expansion")
        self.assertEqual(inst.version.value, FHIRString("20150622").value)
        self.assertEqual(inst.version.as_json(), "20150622")

    def testValueSet9(self):
        inst = self.instantiate_from('valueset-examplescenario-actor-type.json')
        self.assertIsNotNone(inst, 'Must have instantiated a ValueSet instance')
        self.implValueSet9(inst)

        js = inst.as_json()
        self.assertEqual("ValueSet", js["resourceType"])
        inst2 = valueset.ValueSet(js)
        self.implValueSet9(inst2)

    def implValueSet9(self, inst):
        self.assertEqual(inst.compose.include[0].system.value, FHIRUri("http://hl7.org/fhir/examplescenario-actor-type").value)
        self.assertEqual(inst.compose.include[0].system.as_json(), "http://hl7.org/fhir/examplescenario-actor-type")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("http://hl7.org/fhir").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "http://hl7.org/fhir")
        self.assertEqual(inst.contact[0].telecom[1].system.value, FHIRCode("email").value)
        self.assertEqual(inst.contact[0].telecom[1].system.as_json(), "email")
        self.assertEqual(inst.contact[0].telecom[1].value.value, FHIRString("fhir@lists.hl7.org").value)
        self.assertEqual(inst.contact[0].telecom[1].value.as_json(), "fhir@lists.hl7.org")
        self.assertEqual(inst.date.value, FHIRDateTime("2019-11-01T09:29:23+11:00").value)
        self.assertEqual(inst.date.as_json(), "2019-11-01T09:29:23+11:00")
        self.assertEqual(inst.description.value, FHIRMarkdown("The type of actor - system or human.").value)
        self.assertEqual(inst.description.as_json(), "The type of actor - system or human.")
        self.assertFalse(inst.experimental)
        self.assertEqual(inst.extension[0].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/structuredefinition-wg").value)
        self.assertEqual(inst.extension[0].url.as_json(), "http://hl7.org/fhir/StructureDefinition/structuredefinition-wg")
        self.assertEqual(inst.extension[0].valueCode.value, FHIRCode("fhir").value)
        self.assertEqual(inst.extension[0].valueCode.as_json(), "fhir")
        self.assertEqual(inst.extension[1].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status").value)
        self.assertEqual(inst.extension[1].url.as_json(), "http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status")
        self.assertEqual(inst.extension[1].valueCode.value, FHIRCode("trial-use").value)
        self.assertEqual(inst.extension[1].valueCode.as_json(), "trial-use")
        self.assertEqual(inst.extension[2].url.value, FHIRUri("http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm").value)
        self.assertEqual(inst.extension[2].url.as_json(), "http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm")
        self.assertEqual(inst.extension[2].valueInteger, 0)
        self.assertEqual(inst.id.value, FHIRString("examplescenario-actor-type").value)
        self.assertEqual(inst.id.as_json(), "examplescenario-actor-type")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("urn:ietf:rfc:3986").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "urn:ietf:rfc:3986")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("urn:oid:2.16.840.1.113883.4.642.3.858").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "urn:oid:2.16.840.1.113883.4.642.3.858")
        self.assertTrue(inst.immutable)
        self.assertEqual(inst.meta.lastUpdated.value, FHIRInstant("2019-11-01T09:29:23.356+11:00").value)
        self.assertEqual(inst.meta.lastUpdated.as_json(), "2019-11-01T09:29:23.356+11:00")
        self.assertEqual(inst.meta.lastUpdated.date, FHIRInstant('2019-11-01T09:29:23.356+11:00').date)
        self.assertEqual(inst.meta.profile[0].value, FHIRCanonical("http://hl7.org/fhir/StructureDefinition/shareablevalueset").value)
        self.assertEqual(inst.meta.profile[0].as_json(), "http://hl7.org/fhir/StructureDefinition/shareablevalueset")
        self.assertEqual(inst.name.value, FHIRString("ExampleScenarioActorType").value)
        self.assertEqual(inst.name.as_json(), "ExampleScenarioActorType")
        self.assertEqual(inst.publisher.value, FHIRString("HL7 (FHIR Project)").value)
        self.assertEqual(inst.publisher.as_json(), "HL7 (FHIR Project)")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("ExampleScenarioActorType").value)
        self.assertEqual(inst.title.as_json(), "ExampleScenarioActorType")
        self.assertEqual(inst.url.value, FHIRUri("http://hl7.org/fhir/ValueSet/examplescenario-actor-type").value)
        self.assertEqual(inst.url.as_json(), "http://hl7.org/fhir/ValueSet/examplescenario-actor-type")
        self.assertEqual(inst.version.value, FHIRString("4.0.1").value)
        self.assertEqual(inst.version.as_json(), "4.0.1")


from fhirclient.models.fhirdatatypes import FHIRCode, FHIRUri, FHIRString, FHIRDateTime, FHIRMarkdown, FHIRCanonical, FHIRInstant, FHIRDate