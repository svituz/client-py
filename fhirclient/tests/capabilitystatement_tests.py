#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import capabilitystatement

class CapabilityStatementTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("CapabilityStatement", js["resourceType"])
        return capabilitystatement.CapabilityStatement(js)

    def testCapabilityStatement1(self):
        inst = self.instantiate_from('capabilitystatement-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CapabilityStatement instance')
        self.implCapabilityStatement1(inst)

        js = inst.as_json()
        self.assertEqual("CapabilityStatement", js["resourceType"])
        inst2 = capabilitystatement.CapabilityStatement(js)
        self.implCapabilityStatement1(inst2)

    def implCapabilityStatement1(self, inst):
        self.assertEqual(inst.contact[0].name.value, FHIRString("System Administrator").value)
        self.assertEqual(inst.contact[0].name.as_json(), "System Administrator")
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("email").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "email")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("wile@acme.org").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "wile@acme.org")
        self.assertEqual(inst.copyright.value, FHIRMarkdown("Copyright © Acme Healthcare and GoodCorp EHR Systems").value)
        self.assertEqual(inst.copyright.as_json(), "Copyright © Acme Healthcare and GoodCorp EHR Systems")
        self.assertEqual(inst.date.value, FHIRDateTime("2012-01-04").value)
        self.assertEqual(inst.date.as_json(), "2012-01-04")
        self.assertEqual(inst.description.value, FHIRMarkdown("This is the FHIR capability statement for the main EHR at ACME for the private interface - it does not describe the public interface").value)
        self.assertEqual(inst.description.as_json(), "This is the FHIR capability statement for the main EHR at ACME for the private interface - it does not describe the public interface")
        self.assertEqual(inst.document[0].documentation.value, FHIRMarkdown("Basic rules for all documents in the EHR system").value)
        self.assertEqual(inst.document[0].documentation.as_json(), "Basic rules for all documents in the EHR system")
        self.assertEqual(inst.document[0].mode.value, FHIRCode("consumer").value)
        self.assertEqual(inst.document[0].mode.as_json(), "consumer")
        self.assertEqual(inst.document[0].profile.value, FHIRCanonical("http://fhir.hl7.org/base/Profilebc054d23-75e1-4dc6-aca5-838b6b1ac81d/_history/b5fdd9fc-b021-4ea1-911a-721a60663796").value)
        self.assertEqual(inst.document[0].profile.as_json(), "http://fhir.hl7.org/base/Profilebc054d23-75e1-4dc6-aca5-838b6b1ac81d/_history/b5fdd9fc-b021-4ea1-911a-721a60663796")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.fhirVersion.value, FHIRCode("4.0.1").value)
        self.assertEqual(inst.fhirVersion.as_json(), "4.0.1")
        self.assertEqual(inst.format[0].value, FHIRCode("xml").value)
        self.assertEqual(inst.format[0].as_json(), "xml")
        self.assertEqual(inst.format[1].value, FHIRCode("json").value)
        self.assertEqual(inst.format[1].as_json(), "json")
        self.assertEqual(inst.id.value, FHIRString("example").value)
        self.assertEqual(inst.id.as_json(), "example")
        self.assertEqual(inst.implementation.description.value, FHIRString("main EHR at ACME").value)
        self.assertEqual(inst.implementation.description.as_json(), "main EHR at ACME")
        self.assertEqual(inst.implementation.url.value, FHIRUrl("http://10.2.3.4/fhir").value)
        self.assertEqual(inst.implementation.url.as_json(), "http://10.2.3.4/fhir")
        self.assertEqual(inst.implementationGuide[0].value, FHIRCanonical("http://hl7.org/fhir/us/lab").value)
        self.assertEqual(inst.implementationGuide[0].as_json(), "http://hl7.org/fhir/us/lab")
        self.assertEqual(inst.instantiates[0].value, FHIRCanonical("http://ihe.org/fhir/CapabilityStatement/pixm-client").value)
        self.assertEqual(inst.instantiates[0].as_json(), "http://ihe.org/fhir/CapabilityStatement/pixm-client")
        self.assertEqual(inst.jurisdiction[0].coding[0].code.value, FHIRCode("US").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].code.as_json(), "US")
        self.assertEqual(inst.jurisdiction[0].coding[0].display.value, FHIRString("United States of America (the)").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].display.as_json(), "United States of America (the)")
        self.assertEqual(inst.jurisdiction[0].coding[0].system.value, FHIRUri("urn:iso:std:iso:3166").value)
        self.assertEqual(inst.jurisdiction[0].coding[0].system.as_json(), "urn:iso:std:iso:3166")
        self.assertEqual(inst.kind.value, FHIRCode("instance").value)
        self.assertEqual(inst.kind.as_json(), "instance")
        self.assertEqual(inst.messaging[0].documentation.value, FHIRMarkdown("ADT A08 equivalent for external system notifications").value)
        self.assertEqual(inst.messaging[0].documentation.as_json(), "ADT A08 equivalent for external system notifications")
        self.assertEqual(inst.messaging[0].endpoint[0].address.value, FHIRUrl("mllp:10.1.1.10:9234").value)
        self.assertEqual(inst.messaging[0].endpoint[0].address.as_json(), "mllp:10.1.1.10:9234")
        self.assertEqual(inst.messaging[0].endpoint[0].protocol.code.value, FHIRCode("mllp").value)
        self.assertEqual(inst.messaging[0].endpoint[0].protocol.code.as_json(), "mllp")
        self.assertEqual(inst.messaging[0].endpoint[0].protocol.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/message-transport").value)
        self.assertEqual(inst.messaging[0].endpoint[0].protocol.system.as_json(), "http://terminology.hl7.org/CodeSystem/message-transport")
        self.assertEqual(inst.messaging[0].reliableCache.value, FHIRUnsignedInt('30').value)
        self.assertEqual(inst.messaging[0].reliableCache.as_json(), 30)
        self.assertEqual(inst.messaging[0].supportedMessage[0].definition.value, FHIRCanonical("MessageDefinition/example").value)
        self.assertEqual(inst.messaging[0].supportedMessage[0].definition.as_json(), "MessageDefinition/example")
        self.assertEqual(inst.messaging[0].supportedMessage[0].mode.value, FHIRCode("receiver").value)
        self.assertEqual(inst.messaging[0].supportedMessage[0].mode.as_json(), "receiver")
        self.assertEqual(inst.name.value, FHIRString("ACME-EHR").value)
        self.assertEqual(inst.name.as_json(), "ACME-EHR")
        self.assertEqual(inst.patchFormat[0].value, FHIRCode("application/xml-patch+xml").value)
        self.assertEqual(inst.patchFormat[0].as_json(), "application/xml-patch+xml")
        self.assertEqual(inst.patchFormat[1].value, FHIRCode("application/json-patch+json").value)
        self.assertEqual(inst.patchFormat[1].as_json(), "application/json-patch+json")
        self.assertEqual(inst.publisher.value, FHIRString("ACME Corporation").value)
        self.assertEqual(inst.publisher.as_json(), "ACME Corporation")
        self.assertEqual(inst.purpose.value, FHIRMarkdown("Main EHR capability statement, published for contracting and operational support").value)
        self.assertEqual(inst.purpose.as_json(), "Main EHR capability statement, published for contracting and operational support")
        self.assertEqual(inst.rest[0].compartment[0].value, FHIRCanonical("http://hl7.org/fhir/CompartmentDefinition/patient").value)
        self.assertEqual(inst.rest[0].compartment[0].as_json(), "http://hl7.org/fhir/CompartmentDefinition/patient")
        self.assertEqual(inst.rest[0].documentation.value, FHIRMarkdown("Main FHIR endpoint for acem health").value)
        self.assertEqual(inst.rest[0].documentation.as_json(), "Main FHIR endpoint for acem health")
        self.assertEqual(inst.rest[0].interaction[0].code.value, FHIRCode("transaction").value)
        self.assertEqual(inst.rest[0].interaction[0].code.as_json(), "transaction")
        self.assertEqual(inst.rest[0].interaction[1].code.value, FHIRCode("history-system").value)
        self.assertEqual(inst.rest[0].interaction[1].code.as_json(), "history-system")
        self.assertEqual(inst.rest[0].mode.value, FHIRCode("server").value)
        self.assertEqual(inst.rest[0].mode.as_json(), "server")
        self.assertTrue(inst.rest[0].resource[0].conditionalCreate)
        self.assertEqual(inst.rest[0].resource[0].conditionalDelete.value, FHIRCode("not-supported").value)
        self.assertEqual(inst.rest[0].resource[0].conditionalDelete.as_json(), "not-supported")
        self.assertEqual(inst.rest[0].resource[0].conditionalRead.value, FHIRCode("full-support").value)
        self.assertEqual(inst.rest[0].resource[0].conditionalRead.as_json(), "full-support")
        self.assertFalse(inst.rest[0].resource[0].conditionalUpdate)
        self.assertEqual(inst.rest[0].resource[0].documentation.value, FHIRMarkdown("This server does not let the clients create identities.").value)
        self.assertEqual(inst.rest[0].resource[0].documentation.as_json(), "This server does not let the clients create identities.")
        self.assertEqual(inst.rest[0].resource[0].interaction[0].code.value, FHIRCode("read").value)
        self.assertEqual(inst.rest[0].resource[0].interaction[0].code.as_json(), "read")
        self.assertEqual(inst.rest[0].resource[0].interaction[1].code.value, FHIRCode("vread").value)
        self.assertEqual(inst.rest[0].resource[0].interaction[1].code.as_json(), "vread")
        self.assertEqual(inst.rest[0].resource[0].interaction[1].documentation.value, FHIRMarkdown("Only supported for patient records since 12-Dec 2012").value)
        self.assertEqual(inst.rest[0].resource[0].interaction[1].documentation.as_json(), "Only supported for patient records since 12-Dec 2012")
        self.assertEqual(inst.rest[0].resource[0].interaction[2].code.value, FHIRCode("update").value)
        self.assertEqual(inst.rest[0].resource[0].interaction[2].code.as_json(), "update")
        self.assertEqual(inst.rest[0].resource[0].interaction[3].code.value, FHIRCode("history-instance").value)
        self.assertEqual(inst.rest[0].resource[0].interaction[3].code.as_json(), "history-instance")
        self.assertEqual(inst.rest[0].resource[0].interaction[4].code.value, FHIRCode("create").value)
        self.assertEqual(inst.rest[0].resource[0].interaction[4].code.as_json(), "create")
        self.assertEqual(inst.rest[0].resource[0].interaction[5].code.value, FHIRCode("history-type").value)
        self.assertEqual(inst.rest[0].resource[0].interaction[5].code.as_json(), "history-type")
        self.assertEqual(inst.rest[0].resource[0].profile.value, FHIRCanonical("http://registry.fhir.org/r4/StructureDefinition/7896271d-57f6-4231-89dc-dcc91eab2416").value)
        self.assertEqual(inst.rest[0].resource[0].profile.as_json(), "http://registry.fhir.org/r4/StructureDefinition/7896271d-57f6-4231-89dc-dcc91eab2416")
        self.assertTrue(inst.rest[0].resource[0].readHistory)
        self.assertEqual(inst.rest[0].resource[0].searchInclude[0].value, FHIRString("Organization").value)
        self.assertEqual(inst.rest[0].resource[0].searchInclude[0].as_json(), "Organization")
        self.assertEqual(inst.rest[0].resource[0].searchParam[0].definition.value, FHIRCanonical("http://hl7.org/fhir/SearchParameter/Patient-identifier").value)
        self.assertEqual(inst.rest[0].resource[0].searchParam[0].definition.as_json(), "http://hl7.org/fhir/SearchParameter/Patient-identifier")
        self.assertEqual(inst.rest[0].resource[0].searchParam[0].documentation.value, FHIRMarkdown("Only supports search by institution MRN").value)
        self.assertEqual(inst.rest[0].resource[0].searchParam[0].documentation.as_json(), "Only supports search by institution MRN")
        self.assertEqual(inst.rest[0].resource[0].searchParam[0].name.value, FHIRString("identifier").value)
        self.assertEqual(inst.rest[0].resource[0].searchParam[0].name.as_json(), "identifier")
        self.assertEqual(inst.rest[0].resource[0].searchParam[0].type.value, FHIRCode("token").value)
        self.assertEqual(inst.rest[0].resource[0].searchParam[0].type.as_json(), "token")
        self.assertEqual(inst.rest[0].resource[0].searchParam[1].definition.value, FHIRCanonical("http://hl7.org/fhir/SearchParameter/Patient-general-practitioner").value)
        self.assertEqual(inst.rest[0].resource[0].searchParam[1].definition.as_json(), "http://hl7.org/fhir/SearchParameter/Patient-general-practitioner")
        self.assertEqual(inst.rest[0].resource[0].searchParam[1].name.value, FHIRString("general-practitioner").value)
        self.assertEqual(inst.rest[0].resource[0].searchParam[1].name.as_json(), "general-practitioner")
        self.assertEqual(inst.rest[0].resource[0].searchParam[1].type.value, FHIRCode("reference").value)
        self.assertEqual(inst.rest[0].resource[0].searchParam[1].type.as_json(), "reference")
        self.assertEqual(inst.rest[0].resource[0].searchRevInclude[0].value, FHIRString("Person").value)
        self.assertEqual(inst.rest[0].resource[0].searchRevInclude[0].as_json(), "Person")
        self.assertEqual(inst.rest[0].resource[0].supportedProfile[0].value, FHIRCanonical("http://registry.fhir.org/r4/StructureDefinition/00ab9e7a-06c7-4f77-9234-4154ca1e3347").value)
        self.assertEqual(inst.rest[0].resource[0].supportedProfile[0].as_json(), "http://registry.fhir.org/r4/StructureDefinition/00ab9e7a-06c7-4f77-9234-4154ca1e3347")
        self.assertEqual(inst.rest[0].resource[0].type.value, FHIRCode("Patient").value)
        self.assertEqual(inst.rest[0].resource[0].type.as_json(), "Patient")
        self.assertFalse(inst.rest[0].resource[0].updateCreate)
        self.assertEqual(inst.rest[0].resource[0].versioning.value, FHIRCode("versioned-update").value)
        self.assertEqual(inst.rest[0].resource[0].versioning.as_json(), "versioned-update")
        self.assertTrue(inst.rest[0].security.cors)
        self.assertEqual(inst.rest[0].security.description.value, FHIRMarkdown("See Smart on FHIR documentation").value)
        self.assertEqual(inst.rest[0].security.description.as_json(), "See Smart on FHIR documentation")
        self.assertEqual(inst.rest[0].security.service[0].coding[0].code.value, FHIRCode("SMART-on-FHIR").value)
        self.assertEqual(inst.rest[0].security.service[0].coding[0].code.as_json(), "SMART-on-FHIR")
        self.assertEqual(inst.rest[0].security.service[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/restful-security-service").value)
        self.assertEqual(inst.rest[0].security.service[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/restful-security-service")
        self.assertEqual(inst.software.name.value, FHIRString("EHR").value)
        self.assertEqual(inst.software.name.as_json(), "EHR")
        self.assertEqual(inst.software.releaseDate.value, FHIRDateTime("2012-01-04").value)
        self.assertEqual(inst.software.releaseDate.as_json(), "2012-01-04")
        self.assertEqual(inst.software.version.value, FHIRString("0.00.020.2134").value)
        self.assertEqual(inst.software.version.as_json(), "0.00.020.2134")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("ACME EHR capability statement").value)
        self.assertEqual(inst.title.as_json(), "ACME EHR capability statement")
        self.assertEqual(inst.url.value, FHIRUri("urn:uuid:68D043B5-9ECF-4559-A57A-396E0D452311").value)
        self.assertEqual(inst.url.as_json(), "urn:uuid:68D043B5-9ECF-4559-A57A-396E0D452311")
        self.assertEqual(inst.useContext[0].code.code.value, FHIRCode("focus").value)
        self.assertEqual(inst.useContext[0].code.code.as_json(), "focus")
        self.assertEqual(inst.useContext[0].code.system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/usage-context-type").value)
        self.assertEqual(inst.useContext[0].code.system.as_json(), "http://terminology.hl7.org/CodeSystem/usage-context-type")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.value, FHIRCode("positive").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code.as_json(), "positive")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/variant-state").value)
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/variant-state")
        self.assertEqual(inst.version.value, FHIRString("20130510").value)
        self.assertEqual(inst.version.as_json(), "20130510")

    def testCapabilityStatement2(self):
        inst = self.instantiate_from('capabilitystatement-phr-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CapabilityStatement instance')
        self.implCapabilityStatement2(inst)

        js = inst.as_json()
        self.assertEqual("CapabilityStatement", js["resourceType"])
        inst2 = capabilitystatement.CapabilityStatement(js)
        self.implCapabilityStatement2(inst2)

    def implCapabilityStatement2(self, inst):
        self.assertEqual(inst.contact[0].telecom[0].system.value, FHIRCode("url").value)
        self.assertEqual(inst.contact[0].telecom[0].system.as_json(), "url")
        self.assertEqual(inst.contact[0].telecom[0].value.value, FHIRString("http://hl7.org/fhir").value)
        self.assertEqual(inst.contact[0].telecom[0].value.as_json(), "http://hl7.org/fhir")
        self.assertEqual(inst.date.value, FHIRDateTime("2013-06-18").value)
        self.assertEqual(inst.date.as_json(), "2013-06-18")
        self.assertEqual(inst.description.value, FHIRMarkdown("Prototype Capability Statement for September 2013 Connectathon").value)
        self.assertEqual(inst.description.as_json(), "Prototype Capability Statement for September 2013 Connectathon")
        self.assertEqual(inst.fhirVersion.value, FHIRCode("4.0.1").value)
        self.assertEqual(inst.fhirVersion.as_json(), "4.0.1")
        self.assertEqual(inst.format[0].value, FHIRCode("json").value)
        self.assertEqual(inst.format[0].as_json(), "json")
        self.assertEqual(inst.format[1].value, FHIRCode("xml").value)
        self.assertEqual(inst.format[1].as_json(), "xml")
        self.assertEqual(inst.id.value, FHIRString("phr").value)
        self.assertEqual(inst.id.as_json(), "phr")
        self.assertEqual(inst.kind.value, FHIRCode("capability").value)
        self.assertEqual(inst.kind.as_json(), "capability")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.name.value, FHIRString("PHR Template").value)
        self.assertEqual(inst.name.as_json(), "PHR Template")
        self.assertEqual(inst.publisher.value, FHIRString("FHIR Project").value)
        self.assertEqual(inst.publisher.as_json(), "FHIR Project")
        self.assertEqual(inst.rest[0].documentation.value, FHIRMarkdown("Protoype server Capability Statement for September 2013 Connectathon").value)
        self.assertEqual(inst.rest[0].documentation.as_json(), "Protoype server Capability Statement for September 2013 Connectathon")
        self.assertEqual(inst.rest[0].mode.value, FHIRCode("server").value)
        self.assertEqual(inst.rest[0].mode.as_json(), "server")
        self.assertEqual(inst.rest[0].resource[0].interaction[0].code.value, FHIRCode("read").value)
        self.assertEqual(inst.rest[0].resource[0].interaction[0].code.as_json(), "read")
        self.assertEqual(inst.rest[0].resource[0].interaction[1].code.value, FHIRCode("search-type").value)
        self.assertEqual(inst.rest[0].resource[0].interaction[1].code.as_json(), "search-type")
        self.assertEqual(inst.rest[0].resource[0].interaction[1].documentation.value, FHIRMarkdown("When a client searches patients with no search criteria, they get a list of all patients they have access too. Servers may elect to offer additional search parameters, but this is not required").value)
        self.assertEqual(inst.rest[0].resource[0].interaction[1].documentation.as_json(), "When a client searches patients with no search criteria, they get a list of all patients they have access too. Servers may elect to offer additional search parameters, but this is not required")
        self.assertEqual(inst.rest[0].resource[0].type.value, FHIRCode("Patient").value)
        self.assertEqual(inst.rest[0].resource[0].type.as_json(), "Patient")
        self.assertEqual(inst.rest[0].resource[1].interaction[0].code.value, FHIRCode("read").value)
        self.assertEqual(inst.rest[0].resource[1].interaction[0].code.as_json(), "read")
        self.assertEqual(inst.rest[0].resource[1].interaction[1].code.value, FHIRCode("search-type").value)
        self.assertEqual(inst.rest[0].resource[1].interaction[1].code.as_json(), "search-type")
        self.assertEqual(inst.rest[0].resource[1].searchParam[0].documentation.value, FHIRMarkdown("_id parameter always supported. For the connectathon, servers may elect which search parameters are supported").value)
        self.assertEqual(inst.rest[0].resource[1].searchParam[0].documentation.as_json(), "_id parameter always supported. For the connectathon, servers may elect which search parameters are supported")
        self.assertEqual(inst.rest[0].resource[1].searchParam[0].name.value, FHIRString("_id").value)
        self.assertEqual(inst.rest[0].resource[1].searchParam[0].name.as_json(), "_id")
        self.assertEqual(inst.rest[0].resource[1].searchParam[0].type.value, FHIRCode("token").value)
        self.assertEqual(inst.rest[0].resource[1].searchParam[0].type.as_json(), "token")
        self.assertEqual(inst.rest[0].resource[1].type.value, FHIRCode("DocumentReference").value)
        self.assertEqual(inst.rest[0].resource[1].type.as_json(), "DocumentReference")
        self.assertEqual(inst.rest[0].resource[2].interaction[0].code.value, FHIRCode("read").value)
        self.assertEqual(inst.rest[0].resource[2].interaction[0].code.as_json(), "read")
        self.assertEqual(inst.rest[0].resource[2].interaction[1].code.value, FHIRCode("search-type").value)
        self.assertEqual(inst.rest[0].resource[2].interaction[1].code.as_json(), "search-type")
        self.assertEqual(inst.rest[0].resource[2].searchParam[0].documentation.value, FHIRMarkdown("Standard _id parameter").value)
        self.assertEqual(inst.rest[0].resource[2].searchParam[0].documentation.as_json(), "Standard _id parameter")
        self.assertEqual(inst.rest[0].resource[2].searchParam[0].name.value, FHIRString("_id").value)
        self.assertEqual(inst.rest[0].resource[2].searchParam[0].name.as_json(), "_id")
        self.assertEqual(inst.rest[0].resource[2].searchParam[0].type.value, FHIRCode("token").value)
        self.assertEqual(inst.rest[0].resource[2].searchParam[0].type.as_json(), "token")
        self.assertEqual(inst.rest[0].resource[2].type.value, FHIRCode("Condition").value)
        self.assertEqual(inst.rest[0].resource[2].type.as_json(), "Condition")
        self.assertEqual(inst.rest[0].resource[3].interaction[0].code.value, FHIRCode("read").value)
        self.assertEqual(inst.rest[0].resource[3].interaction[0].code.as_json(), "read")
        self.assertEqual(inst.rest[0].resource[3].interaction[1].code.value, FHIRCode("search-type").value)
        self.assertEqual(inst.rest[0].resource[3].interaction[1].code.as_json(), "search-type")
        self.assertEqual(inst.rest[0].resource[3].searchParam[0].documentation.value, FHIRMarkdown("Standard _id parameter").value)
        self.assertEqual(inst.rest[0].resource[3].searchParam[0].documentation.as_json(), "Standard _id parameter")
        self.assertEqual(inst.rest[0].resource[3].searchParam[0].name.value, FHIRString("_id").value)
        self.assertEqual(inst.rest[0].resource[3].searchParam[0].name.as_json(), "_id")
        self.assertEqual(inst.rest[0].resource[3].searchParam[0].type.value, FHIRCode("token").value)
        self.assertEqual(inst.rest[0].resource[3].searchParam[0].type.as_json(), "token")
        self.assertEqual(inst.rest[0].resource[3].searchParam[1].documentation.value, FHIRMarkdown("which diagnostic discipline/department created the report").value)
        self.assertEqual(inst.rest[0].resource[3].searchParam[1].documentation.as_json(), "which diagnostic discipline/department created the report")
        self.assertEqual(inst.rest[0].resource[3].searchParam[1].name.value, FHIRString("service").value)
        self.assertEqual(inst.rest[0].resource[3].searchParam[1].name.as_json(), "service")
        self.assertEqual(inst.rest[0].resource[3].searchParam[1].type.value, FHIRCode("token").value)
        self.assertEqual(inst.rest[0].resource[3].searchParam[1].type.as_json(), "token")
        self.assertEqual(inst.rest[0].resource[3].type.value, FHIRCode("DiagnosticReport").value)
        self.assertEqual(inst.rest[0].resource[3].type.as_json(), "DiagnosticReport")
        self.assertEqual(inst.rest[0].security.service[0].text.value, FHIRString("OAuth").value)
        self.assertEqual(inst.rest[0].security.service[0].text.as_json(), "OAuth")
        self.assertEqual(inst.software.name.value, FHIRString("ACME PHR Server").value)
        self.assertEqual(inst.software.name.as_json(), "ACME PHR Server")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")


from fhirclient.models.fhirdatatypes import FHIRString, FHIRCode, FHIRMarkdown, FHIRDateTime, FHIRCanonical, FHIRUrl, FHIRUri, FHIRUnsignedInt