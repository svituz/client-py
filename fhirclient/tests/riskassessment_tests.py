#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-25.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import riskassessment

class RiskAssessmentTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("RiskAssessment", js["resourceType"])
        return riskassessment.RiskAssessment(js)

    def testRiskAssessment1(self):
        inst = self.instantiate_from('riskassessment-example-breastcancer.json')
        self.assertIsNotNone(inst, 'Must have instantiated a RiskAssessment instance')
        self.implRiskAssessment1(inst)

        js = inst.as_json()
        self.assertEqual("RiskAssessment", js["resourceType"])
        inst2 = riskassessment.RiskAssessment(js)
        self.implRiskAssessment1(inst2)

    def implRiskAssessment1(self, inst):
        self.assertEqual(inst.code.coding[0].code.value, FHIRCode('709510001').value)
        self.assertEqual(inst.code.coding[0].code.as_json(), '709510001')
        self.assertEqual(inst.code.coding[0].display.value, FHIRString('Assessment of risk for disease (procedure)').value)
        self.assertEqual(inst.code.coding[0].display.as_json(), 'Assessment of risk for disease (procedure)')
        self.assertEqual(inst.code.coding[0].system.value, FHIRUri('http://browser.ihtsdotools.org/').value)
        self.assertEqual(inst.code.coding[0].system.as_json(), 'http://browser.ihtsdotools.org/')
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://example.org').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://example.org')
        self.assertEqual(inst.identifier[0].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[0].use.as_json(), 'official')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('risk-assessment-breastcancer1').value)
        self.assertEqual(inst.identifier[0].value.as_json(), 'risk-assessment-breastcancer1')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.note[0].text.value, FHIRMarkdown('This risk assessment is based on BRCA1 and BRCA2 genetic mutation test').value)
        self.assertEqual(inst.note[0].text.as_json(), 'This risk assessment is based on BRCA1 and BRCA2 genetic mutation test')
        self.assertEqual(inst.prediction[0].outcome.text.value, FHIRString('Unknown risk of developing breast cancer').value)
        self.assertEqual(inst.prediction[0].outcome.text.as_json(), 'Unknown risk of developing breast cancer')
        self.assertEqual(inst.status.value, FHIRCode('final').value)
        self.assertEqual(inst.status.as_json(), 'final')
        self.assertEqual(inst.text.status.value, FHIRCode('additional').value)
        self.assertEqual(inst.text.status.as_json(), 'additional')

    def testRiskAssessment2(self):
        inst = self.instantiate_from('riskassessment-example-cardiac.json')
        self.assertIsNotNone(inst, 'Must have instantiated a RiskAssessment instance')
        self.implRiskAssessment2(inst)

        js = inst.as_json()
        self.assertEqual("RiskAssessment", js["resourceType"])
        inst2 = riskassessment.RiskAssessment(js)
        self.implRiskAssessment2(inst2)

    def implRiskAssessment2(self, inst):
        self.assertEqual(inst.identifier[0].system.value, FHIRUri('http://example.org').value)
        self.assertEqual(inst.identifier[0].system.as_json(), 'http://example.org')
        self.assertEqual(inst.identifier[0].use.value, FHIRCode('official').value)
        self.assertEqual(inst.identifier[0].use.as_json(), 'official')
        self.assertEqual(inst.identifier[0].value.value, FHIRString('risk-assessment-cardiac').value)
        self.assertEqual(inst.identifier[0].value.as_json(), 'risk-assessment-cardiac')
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.occurrenceDateTime.value, FHIRDateTime('2014-07-19T16:04:00Z').value)
        self.assertEqual(inst.occurrenceDateTime.as_json(), '2014-07-19T16:04:00Z')
        self.assertEqual(inst.prediction[0].outcome.text.value, FHIRString('Heart Attack').value)
        self.assertEqual(inst.prediction[0].outcome.text.as_json(), 'Heart Attack')
        self.assertEqual(inst.prediction[0].probabilityDecimal, 0.02)
        self.assertEqual(inst.prediction[0].whenRange.high.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[0].whenRange.high.code.as_json(), 'a')
        self.assertEqual(inst.prediction[0].whenRange.high.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[0].whenRange.high.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[0].whenRange.high.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[0].whenRange.high.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[0].whenRange.high.value, 49)
        self.assertEqual(inst.prediction[0].whenRange.low.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[0].whenRange.low.code.as_json(), 'a')
        self.assertEqual(inst.prediction[0].whenRange.low.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[0].whenRange.low.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[0].whenRange.low.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[0].whenRange.low.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[0].whenRange.low.value, 39)
        self.assertEqual(inst.status.value, FHIRCode('final').value)
        self.assertEqual(inst.status.as_json(), 'final')
        self.assertEqual(inst.text.status.value, FHIRCode('additional').value)
        self.assertEqual(inst.text.status.as_json(), 'additional')

    def testRiskAssessment3(self):
        inst = self.instantiate_from('riskassessment-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a RiskAssessment instance')
        self.implRiskAssessment3(inst)

        js = inst.as_json()
        self.assertEqual("RiskAssessment", js["resourceType"])
        inst2 = riskassessment.RiskAssessment(js)
        self.implRiskAssessment3(inst2)

    def implRiskAssessment3(self, inst):
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.method.coding[0].code.value, FHIRCode('BRCAPRO').value)
        self.assertEqual(inst.method.coding[0].code.as_json(), 'BRCAPRO')
        self.assertEqual(inst.note[0].text.value, FHIRMarkdown('High degree of certainty').value)
        self.assertEqual(inst.note[0].text.as_json(), 'High degree of certainty')
        self.assertEqual(inst.occurrenceDateTime.value, FHIRDateTime('2006-01-13T23:01:00Z').value)
        self.assertEqual(inst.occurrenceDateTime.as_json(), '2006-01-13T23:01:00Z')
        self.assertEqual(inst.prediction[0].outcome.text.value, FHIRString('Breast Cancer').value)
        self.assertEqual(inst.prediction[0].outcome.text.as_json(), 'Breast Cancer')
        self.assertEqual(inst.prediction[0].probabilityDecimal, 0.000168)
        self.assertEqual(inst.prediction[0].whenRange.high.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[0].whenRange.high.code.as_json(), 'a')
        self.assertEqual(inst.prediction[0].whenRange.high.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[0].whenRange.high.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[0].whenRange.high.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[0].whenRange.high.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[0].whenRange.high.value, 53)
        self.assertEqual(inst.prediction[1].outcome.text.value, FHIRString('Breast Cancer').value)
        self.assertEqual(inst.prediction[1].outcome.text.as_json(), 'Breast Cancer')
        self.assertEqual(inst.prediction[1].probabilityDecimal, 0.000368)
        self.assertEqual(inst.prediction[1].whenRange.high.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[1].whenRange.high.code.as_json(), 'a')
        self.assertEqual(inst.prediction[1].whenRange.high.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[1].whenRange.high.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[1].whenRange.high.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[1].whenRange.high.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[1].whenRange.high.value, 57)
        self.assertEqual(inst.prediction[1].whenRange.low.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[1].whenRange.low.code.as_json(), 'a')
        self.assertEqual(inst.prediction[1].whenRange.low.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[1].whenRange.low.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[1].whenRange.low.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[1].whenRange.low.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[1].whenRange.low.value, 54)
        self.assertEqual(inst.prediction[2].outcome.text.value, FHIRString('Breast Cancer').value)
        self.assertEqual(inst.prediction[2].outcome.text.as_json(), 'Breast Cancer')
        self.assertEqual(inst.prediction[2].probabilityDecimal, 0.000594)
        self.assertEqual(inst.prediction[2].whenRange.high.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[2].whenRange.high.code.as_json(), 'a')
        self.assertEqual(inst.prediction[2].whenRange.high.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[2].whenRange.high.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[2].whenRange.high.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[2].whenRange.high.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[2].whenRange.high.value, 62)
        self.assertEqual(inst.prediction[2].whenRange.low.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[2].whenRange.low.code.as_json(), 'a')
        self.assertEqual(inst.prediction[2].whenRange.low.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[2].whenRange.low.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[2].whenRange.low.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[2].whenRange.low.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[2].whenRange.low.value, 58)
        self.assertEqual(inst.prediction[3].outcome.text.value, FHIRString('Breast Cancer').value)
        self.assertEqual(inst.prediction[3].outcome.text.as_json(), 'Breast Cancer')
        self.assertEqual(inst.prediction[3].probabilityDecimal, 0.000838)
        self.assertEqual(inst.prediction[3].whenRange.high.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[3].whenRange.high.code.as_json(), 'a')
        self.assertEqual(inst.prediction[3].whenRange.high.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[3].whenRange.high.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[3].whenRange.high.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[3].whenRange.high.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[3].whenRange.high.value, 67)
        self.assertEqual(inst.prediction[3].whenRange.low.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[3].whenRange.low.code.as_json(), 'a')
        self.assertEqual(inst.prediction[3].whenRange.low.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[3].whenRange.low.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[3].whenRange.low.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[3].whenRange.low.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[3].whenRange.low.value, 63)
        self.assertEqual(inst.prediction[4].outcome.text.value, FHIRString('Breast Cancer').value)
        self.assertEqual(inst.prediction[4].outcome.text.as_json(), 'Breast Cancer')
        self.assertEqual(inst.prediction[4].probabilityDecimal, 0.001089)
        self.assertEqual(inst.prediction[4].whenRange.high.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[4].whenRange.high.code.as_json(), 'a')
        self.assertEqual(inst.prediction[4].whenRange.high.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[4].whenRange.high.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[4].whenRange.high.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[4].whenRange.high.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[4].whenRange.high.value, 72)
        self.assertEqual(inst.prediction[4].whenRange.low.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[4].whenRange.low.code.as_json(), 'a')
        self.assertEqual(inst.prediction[4].whenRange.low.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[4].whenRange.low.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[4].whenRange.low.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[4].whenRange.low.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[4].whenRange.low.value, 68)
        self.assertEqual(inst.prediction[5].outcome.text.value, FHIRString('Breast Cancer').value)
        self.assertEqual(inst.prediction[5].outcome.text.as_json(), 'Breast Cancer')
        self.assertEqual(inst.prediction[5].probabilityDecimal, 0.001327)
        self.assertEqual(inst.prediction[5].whenRange.high.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[5].whenRange.high.code.as_json(), 'a')
        self.assertEqual(inst.prediction[5].whenRange.high.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[5].whenRange.high.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[5].whenRange.high.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[5].whenRange.high.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[5].whenRange.high.value, 77)
        self.assertEqual(inst.prediction[5].whenRange.low.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[5].whenRange.low.code.as_json(), 'a')
        self.assertEqual(inst.prediction[5].whenRange.low.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[5].whenRange.low.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[5].whenRange.low.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[5].whenRange.low.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[5].whenRange.low.value, 73)
        self.assertEqual(inst.prediction[6].outcome.text.value, FHIRString('Breast Cancer').value)
        self.assertEqual(inst.prediction[6].outcome.text.as_json(), 'Breast Cancer')
        self.assertEqual(inst.prediction[6].probabilityDecimal, 0.00153)
        self.assertEqual(inst.prediction[6].whenRange.high.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[6].whenRange.high.code.as_json(), 'a')
        self.assertEqual(inst.prediction[6].whenRange.high.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[6].whenRange.high.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[6].whenRange.high.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[6].whenRange.high.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[6].whenRange.high.value, 82)
        self.assertEqual(inst.prediction[6].whenRange.low.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[6].whenRange.low.code.as_json(), 'a')
        self.assertEqual(inst.prediction[6].whenRange.low.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[6].whenRange.low.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[6].whenRange.low.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[6].whenRange.low.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[6].whenRange.low.value, 78)
        self.assertEqual(inst.prediction[7].outcome.text.value, FHIRString('Breast Cancer').value)
        self.assertEqual(inst.prediction[7].outcome.text.as_json(), 'Breast Cancer')
        self.assertEqual(inst.prediction[7].probabilityDecimal, 0.001663)
        self.assertEqual(inst.prediction[7].whenRange.high.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[7].whenRange.high.code.as_json(), 'a')
        self.assertEqual(inst.prediction[7].whenRange.high.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[7].whenRange.high.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[7].whenRange.high.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[7].whenRange.high.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[7].whenRange.high.value, 88)
        self.assertEqual(inst.prediction[7].whenRange.low.code.value, FHIRCode('a').value)
        self.assertEqual(inst.prediction[7].whenRange.low.code.as_json(), 'a')
        self.assertEqual(inst.prediction[7].whenRange.low.system.value, FHIRUri('http://unitsofmeasure.org').value)
        self.assertEqual(inst.prediction[7].whenRange.low.system.as_json(), 'http://unitsofmeasure.org')
        self.assertEqual(inst.prediction[7].whenRange.low.unit.value, FHIRString('years').value)
        self.assertEqual(inst.prediction[7].whenRange.low.unit.as_json(), 'years')
        self.assertEqual(inst.prediction[7].whenRange.low.value, 83)
        self.assertEqual(inst.status.value, FHIRCode('final').value)
        self.assertEqual(inst.status.as_json(), 'final')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')

    def testRiskAssessment4(self):
        inst = self.instantiate_from('riskassessment-example-prognosis.json')
        self.assertIsNotNone(inst, 'Must have instantiated a RiskAssessment instance')
        self.implRiskAssessment4(inst)

        js = inst.as_json()
        self.assertEqual("RiskAssessment", js["resourceType"])
        inst2 = riskassessment.RiskAssessment(js)
        self.implRiskAssessment4(inst2)

    def implRiskAssessment4(self, inst):
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.occurrenceDateTime.value, FHIRDateTime('2010-11-22').value)
        self.assertEqual(inst.occurrenceDateTime.as_json(), '2010-11-22')
        self.assertEqual(inst.prediction[0].outcome.coding[0].code.value, FHIRCode('249943000:363698007=72098002,260868000=6934004').value)
        self.assertEqual(inst.prediction[0].outcome.coding[0].code.as_json(), '249943000:363698007=72098002,260868000=6934004')
        self.assertEqual(inst.prediction[0].outcome.coding[0].system.value, FHIRUri('http://snomed.info/sct').value)
        self.assertEqual(inst.prediction[0].outcome.coding[0].system.as_json(), 'http://snomed.info/sct')
        self.assertEqual(inst.prediction[0].outcome.text.value, FHIRString('permanent weakness of the left arm').value)
        self.assertEqual(inst.prediction[0].outcome.text.as_json(), 'permanent weakness of the left arm')
        self.assertEqual(inst.prediction[0].qualitativeRisk.coding[0].code.value, FHIRCode('moderate').value)
        self.assertEqual(inst.prediction[0].qualitativeRisk.coding[0].code.as_json(), 'moderate')
        self.assertEqual(inst.prediction[0].qualitativeRisk.coding[0].display.value, FHIRString('moderate likelihood').value)
        self.assertEqual(inst.prediction[0].qualitativeRisk.coding[0].display.as_json(), 'moderate likelihood')
        self.assertEqual(inst.prediction[0].qualitativeRisk.coding[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/risk-probability').value)
        self.assertEqual(inst.prediction[0].qualitativeRisk.coding[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/risk-probability')
        self.assertEqual(inst.status.value, FHIRCode('final').value)
        self.assertEqual(inst.status.as_json(), 'final')
        self.assertEqual(inst.text.status.value, FHIRCode('additional').value)
        self.assertEqual(inst.text.status.as_json(), 'additional')

    def testRiskAssessment5(self):
        inst = self.instantiate_from('riskassessment-example-population.json')
        self.assertIsNotNone(inst, 'Must have instantiated a RiskAssessment instance')
        self.implRiskAssessment5(inst)

        js = inst.as_json()
        self.assertEqual("RiskAssessment", js["resourceType"])
        inst2 = riskassessment.RiskAssessment(js)
        self.implRiskAssessment5(inst2)

    def implRiskAssessment5(self, inst):
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode('HTEST').value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), 'HTEST')
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString('test health data').value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), 'test health data')
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri('http://terminology.hl7.org/CodeSystem/v3-ActReason').value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), 'http://terminology.hl7.org/CodeSystem/v3-ActReason')
        self.assertEqual(inst.status.value, FHIRCode('final').value)
        self.assertEqual(inst.status.as_json(), 'final')
        self.assertEqual(inst.text.status.value, FHIRCode('generated').value)
        self.assertEqual(inst.text.status.as_json(), 'generated')


from fhirclient.models.fhirdatatypes import FHIRCode, FHIRString, FHIRUri, FHIRMarkdown, FHIRDateTime