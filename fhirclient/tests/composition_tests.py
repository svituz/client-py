#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45 on 2020-03-26.
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import composition

class CompositionTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Composition", js["resourceType"])
        return composition.Composition(js)

    def testComposition1(self):
        inst = self.instantiate_from('composition-example-mixed.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Composition instance')
        self.implComposition1(inst)

        js = inst.as_json()
        self.assertEqual("Composition", js["resourceType"])
        inst2 = composition.Composition(js)
        self.implComposition1(inst2)

    def implComposition1(self, inst):
        self.assertEqual(inst.attester[0].mode.value, FHIRCode("legal").value)
        self.assertEqual(inst.attester[0].mode.as_json(), "legal")
        self.assertEqual(inst.attester[0].time.value, FHIRDateTime("2012-01-04T09:10:14Z").value)
        self.assertEqual(inst.attester[0].time.as_json(), "2012-01-04T09:10:14Z")
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("LP173421-1").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "LP173421-1")
        self.assertEqual(inst.category[0].coding[0].display.value, FHIRString("Report").value)
        self.assertEqual(inst.category[0].coding[0].display.as_json(), "Report")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.confidentiality.value, FHIRCode("N").value)
        self.assertEqual(inst.confidentiality.as_json(), "N")
        self.assertEqual(inst.date.value, FHIRDateTime("2018-10-30T16:56:04+11:00").value)
        self.assertEqual(inst.date.as_json(), "2018-10-30T16:56:04+11:00")
        self.assertEqual(inst.id.value, FHIRString("example-mixed").value)
        self.assertEqual(inst.id.as_json(), "example-mixed")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.section[0].code.coding[0].code.value, FHIRCode("newborn").value)
        self.assertEqual(inst.section[0].code.coding[0].code.as_json(), "newborn")
        self.assertEqual(inst.section[0].code.coding[0].display.value, FHIRString("New Born Details").value)
        self.assertEqual(inst.section[0].code.coding[0].display.as_json(), "New Born Details")
        self.assertEqual(inst.section[0].code.coding[0].system.value, FHIRUri("http://acme.org/codes/SectionType").value)
        self.assertEqual(inst.section[0].code.coding[0].system.as_json(), "http://acme.org/codes/SectionType")
        self.assertEqual(inst.section[0].text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.section[0].text.status.as_json(), "generated")
        self.assertEqual(inst.section[0].title.value, FHIRString("Child's Details").value)
        self.assertEqual(inst.section[0].title.as_json(), "Child's Details")
        self.assertEqual(inst.section[1].code.coding[0].code.value, FHIRCode("mother").value)
        self.assertEqual(inst.section[1].code.coding[0].code.as_json(), "mother")
        self.assertEqual(inst.section[1].code.coding[0].display.value, FHIRString("Mother's Details").value)
        self.assertEqual(inst.section[1].code.coding[0].display.as_json(), "Mother's Details")
        self.assertEqual(inst.section[1].code.coding[0].system.value, FHIRUri("http://acme.org/codes/SectionType").value)
        self.assertEqual(inst.section[1].code.coding[0].system.as_json(), "http://acme.org/codes/SectionType")
        self.assertEqual(inst.section[1].text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.section[1].text.status.as_json(), "generated")
        self.assertEqual(inst.section[1].title.value, FHIRString("Mpther's Details").value)
        self.assertEqual(inst.section[1].title.as_json(), "Mpther's Details")
        self.assertEqual(inst.status.value, FHIRCode("final").value)
        self.assertEqual(inst.status.as_json(), "final")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Discharge Summary (Neonatal Service)").value)
        self.assertEqual(inst.title.as_json(), "Discharge Summary (Neonatal Service)")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("78418-1").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "78418-1")
        self.assertEqual(inst.type.coding[0].display.value, FHIRString("Neonatal perinatal medicine Discharge summary").value)
        self.assertEqual(inst.type.coding[0].display.as_json(), "Neonatal perinatal medicine Discharge summary")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://loinc.org")

    def testComposition2(self):
        inst = self.instantiate_from('composition-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a Composition instance')
        self.implComposition2(inst)

        js = inst.as_json()
        self.assertEqual("Composition", js["resourceType"])
        inst2 = composition.Composition(js)
        self.implComposition2(inst2)

    def implComposition2(self, inst):
        self.assertEqual(inst.attester[0].mode.value, FHIRCode("legal").value)
        self.assertEqual(inst.attester[0].mode.as_json(), "legal")
        self.assertEqual(inst.attester[0].time.value, FHIRDateTime("2012-01-04T09:10:14Z").value)
        self.assertEqual(inst.attester[0].time.as_json(), "2012-01-04T09:10:14Z")
        self.assertEqual(inst.category[0].coding[0].code.value, FHIRCode("LP173421-1").value)
        self.assertEqual(inst.category[0].coding[0].code.as_json(), "LP173421-1")
        self.assertEqual(inst.category[0].coding[0].display.value, FHIRString("Report").value)
        self.assertEqual(inst.category[0].coding[0].display.as_json(), "Report")
        self.assertEqual(inst.category[0].coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.category[0].coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.confidentiality.value, FHIRCode("N").value)
        self.assertEqual(inst.confidentiality.as_json(), "N")
        self.assertEqual(inst.date.value, FHIRDateTime("2012-01-04T09:10:14Z").value)
        self.assertEqual(inst.date.as_json(), "2012-01-04T09:10:14Z")
        self.assertEqual(inst.event[0].code[0].coding[0].code.value, FHIRCode("HEALTHREC").value)
        self.assertEqual(inst.event[0].code[0].coding[0].code.as_json(), "HEALTHREC")
        self.assertEqual(inst.event[0].code[0].coding[0].display.value, FHIRString("health record").value)
        self.assertEqual(inst.event[0].code[0].coding[0].display.as_json(), "health record")
        self.assertEqual(inst.event[0].code[0].coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActCode").value)
        self.assertEqual(inst.event[0].code[0].coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActCode")
        self.assertEqual(inst.event[0].period.end.value, FHIRDateTime("2012-11-12").value)
        self.assertEqual(inst.event[0].period.end.as_json(), "2012-11-12")
        self.assertEqual(inst.event[0].period.start.value, FHIRDateTime("2010-07-18").value)
        self.assertEqual(inst.event[0].period.start.as_json(), "2010-07-18")
        self.assertEqual(inst.id.value, FHIRString("example").value)
        self.assertEqual(inst.id.as_json(), "example")
        self.assertEqual(inst.identifier.system.value, FHIRUri("http://healthintersections.com.au/test").value)
        self.assertEqual(inst.identifier.system.as_json(), "http://healthintersections.com.au/test")
        self.assertEqual(inst.identifier.value.value, FHIRString("1").value)
        self.assertEqual(inst.identifier.value.as_json(), "1")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.relatesTo[0].code.value, FHIRCode("replaces").value)
        self.assertEqual(inst.relatesTo[0].code.as_json(), "replaces")
        self.assertEqual(inst.relatesTo[1].code.value, FHIRCode("appends").value)
        self.assertEqual(inst.relatesTo[1].code.as_json(), "appends")
        self.assertEqual(inst.relatesTo[1].targetIdentifier.system.value, FHIRUri("http://example.org/fhir/NamingSystem/document-ids").value)
        self.assertEqual(inst.relatesTo[1].targetIdentifier.system.as_json(), "http://example.org/fhir/NamingSystem/document-ids")
        self.assertEqual(inst.relatesTo[1].targetIdentifier.value.value, FHIRString("ABC123").value)
        self.assertEqual(inst.relatesTo[1].targetIdentifier.value.as_json(), "ABC123")
        self.assertEqual(inst.section[0].code.coding[0].code.value, FHIRCode("11348-0").value)
        self.assertEqual(inst.section[0].code.coding[0].code.as_json(), "11348-0")
        self.assertEqual(inst.section[0].code.coding[0].display.value, FHIRString("History of past illness Narrative").value)
        self.assertEqual(inst.section[0].code.coding[0].display.as_json(), "History of past illness Narrative")
        self.assertEqual(inst.section[0].code.coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.section[0].code.coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.section[0].mode.value, FHIRCode("snapshot").value)
        self.assertEqual(inst.section[0].mode.as_json(), "snapshot")
        self.assertEqual(inst.section[0].orderedBy.coding[0].code.value, FHIRCode("event-date").value)
        self.assertEqual(inst.section[0].orderedBy.coding[0].code.as_json(), "event-date")
        self.assertEqual(inst.section[0].orderedBy.coding[0].display.value, FHIRString("Sorted by Event Date").value)
        self.assertEqual(inst.section[0].orderedBy.coding[0].display.as_json(), "Sorted by Event Date")
        self.assertEqual(inst.section[0].orderedBy.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/list-order").value)
        self.assertEqual(inst.section[0].orderedBy.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/list-order")
        self.assertEqual(inst.section[0].text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.section[0].text.status.as_json(), "generated")
        self.assertEqual(inst.section[0].title.value, FHIRString("History of present illness").value)
        self.assertEqual(inst.section[0].title.as_json(), "History of present illness")
        self.assertEqual(inst.section[1].code.coding[0].code.value, FHIRCode("10157-6").value)
        self.assertEqual(inst.section[1].code.coding[0].code.as_json(), "10157-6")
        self.assertEqual(inst.section[1].code.coding[0].display.value, FHIRString("History of family member diseases Narrative").value)
        self.assertEqual(inst.section[1].code.coding[0].display.as_json(), "History of family member diseases Narrative")
        self.assertEqual(inst.section[1].code.coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.section[1].code.coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.section[1].emptyReason.coding[0].code.value, FHIRCode("withheld").value)
        self.assertEqual(inst.section[1].emptyReason.coding[0].code.as_json(), "withheld")
        self.assertEqual(inst.section[1].emptyReason.coding[0].display.value, FHIRString("Information Withheld").value)
        self.assertEqual(inst.section[1].emptyReason.coding[0].display.as_json(), "Information Withheld")
        self.assertEqual(inst.section[1].emptyReason.coding[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/list-empty-reason").value)
        self.assertEqual(inst.section[1].emptyReason.coding[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/list-empty-reason")
        self.assertEqual(inst.section[1].mode.value, FHIRCode("snapshot").value)
        self.assertEqual(inst.section[1].mode.as_json(), "snapshot")
        self.assertEqual(inst.section[1].text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.section[1].text.status.as_json(), "generated")
        self.assertEqual(inst.section[1].title.value, FHIRString("History of family member diseases").value)
        self.assertEqual(inst.section[1].title.as_json(), "History of family member diseases")
        self.assertEqual(inst.status.value, FHIRCode("final").value)
        self.assertEqual(inst.status.as_json(), "final")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")
        self.assertEqual(inst.title.value, FHIRString("Consultation Note").value)
        self.assertEqual(inst.title.as_json(), "Consultation Note")
        self.assertEqual(inst.type.coding[0].code.value, FHIRCode("11488-4").value)
        self.assertEqual(inst.type.coding[0].code.as_json(), "11488-4")
        self.assertEqual(inst.type.coding[0].display.value, FHIRString("Consult note").value)
        self.assertEqual(inst.type.coding[0].display.as_json(), "Consult note")
        self.assertEqual(inst.type.coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.type.coding[0].system.as_json(), "http://loinc.org")


from fhirclient.models.fhirdatatypes import FHIRCode, FHIRDateTime, FHIRString, FHIRUri