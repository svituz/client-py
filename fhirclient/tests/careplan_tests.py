#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.0.1-9346c8cc45
#  2020, SMART Health IT.


import os
import io
import unittest
import json
from fhirclient.models import careplan

class CarePlanTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("CarePlan", js["resourceType"])
        return careplan.CarePlan(js)

    def testCarePlan1(self):
        inst = self.instantiate_from('careplan-example-integrated.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CarePlan instance')
        self.implCarePlan1(inst)

        js = inst.as_json()
        self.assertEqual("CarePlan", js["resourceType"])
        inst2 = careplan.CarePlan(js)
        self.implCarePlan1(inst2)

    def implCarePlan1(self, inst):
        self.assertEqual(inst.activity[0].detail.description.value, FHIRString("Eve will review photos of high and low density foods and share with her parents").value)
        self.assertEqual(inst.activity[0].detail.description.as_json(), "Eve will review photos of high and low density foods and share with her parents")
        self.assertFalse(inst.activity[0].detail.doNotPerform)
        self.assertEqual(inst.activity[0].detail.extension[0].url.value, FHIRUri("http://example.org/fhir/StructureDefinition/RevisionDate").value)
        self.assertEqual(inst.activity[0].detail.extension[0].url.as_json(), "http://example.org/fhir/StructureDefinition/RevisionDate")
        self.assertEqual(inst.activity[0].detail.extension[0].valueDate.value, FHIRDate("2012-09-10").value)
        self.assertEqual(inst.activity[0].detail.extension[0].valueDate.as_json(), "2012-09-10")
        self.assertEqual(inst.activity[0].detail.extension[0].valueDate.date, FHIRDate('2012-09-10').date)
        self.assertEqual(inst.activity[0].detail.scheduledPeriod.start.value, FHIRDateTime("2012-09-10").value)
        self.assertEqual(inst.activity[0].detail.scheduledPeriod.start.as_json(), "2012-09-10")
        self.assertEqual(inst.activity[0].detail.status.value, FHIRCode("not-started").value)
        self.assertEqual(inst.activity[0].detail.status.as_json(), "not-started")
        self.assertEqual(inst.activity[0].progress[0].text.value, FHIRMarkdown("Eve eats one meal a day with her parents").value)
        self.assertEqual(inst.activity[0].progress[0].text.as_json(), "Eve eats one meal a day with her parents")
        self.assertEqual(inst.activity[0].progress[0].time.value, FHIRDateTime("2012-09-10").value)
        self.assertEqual(inst.activity[0].progress[0].time.as_json(), "2012-09-10")
        self.assertEqual(inst.activity[1].detail.description.value, FHIRString("Eve will ask her dad to asist her to put the head of her bed on blocks").value)
        self.assertEqual(inst.activity[1].detail.description.as_json(), "Eve will ask her dad to asist her to put the head of her bed on blocks")
        self.assertFalse(inst.activity[1].detail.doNotPerform)
        self.assertEqual(inst.activity[1].detail.extension[0].url.value, FHIRUri("http://example.org/fhir/StructureDefinition/RevisionDate").value)
        self.assertEqual(inst.activity[1].detail.extension[0].url.as_json(), "http://example.org/fhir/StructureDefinition/RevisionDate")
        self.assertEqual(inst.activity[1].detail.extension[0].valueDate.value, FHIRDate("2012-09-10").value)
        self.assertEqual(inst.activity[1].detail.extension[0].valueDate.as_json(), "2012-09-10")
        self.assertEqual(inst.activity[1].detail.extension[0].valueDate.date, FHIRDate('2012-09-10').date)
        self.assertEqual(inst.activity[1].detail.kind.value, FHIRCode("CommunicationRequest").value)
        self.assertEqual(inst.activity[1].detail.kind.as_json(), "CommunicationRequest")
        self.assertEqual(inst.activity[1].detail.scheduledPeriod.start.value, FHIRDateTime("2012-09-10").value)
        self.assertEqual(inst.activity[1].detail.scheduledPeriod.start.as_json(), "2012-09-10")
        self.assertEqual(inst.activity[1].detail.status.value, FHIRCode("not-started").value)
        self.assertEqual(inst.activity[1].detail.status.as_json(), "not-started")
        self.assertEqual(inst.activity[1].progress[0].text.value, FHIRMarkdown("Eve will sleep in her bed more often than the couch").value)
        self.assertEqual(inst.activity[1].progress[0].text.as_json(), "Eve will sleep in her bed more often than the couch")
        self.assertEqual(inst.activity[1].progress[0].time.value, FHIRDateTime("2012-09-10").value)
        self.assertEqual(inst.activity[1].progress[0].time.as_json(), "2012-09-10")
        self.assertEqual(inst.activity[2].detail.description.value, FHIRString("Eve will reduce her intake of coffee and chocolate").value)
        self.assertEqual(inst.activity[2].detail.description.as_json(), "Eve will reduce her intake of coffee and chocolate")
        self.assertFalse(inst.activity[2].detail.doNotPerform)
        self.assertEqual(inst.activity[2].detail.extension[0].url.value, FHIRUri("http://example.org/fhir/StructureDefinition/RevisionDate").value)
        self.assertEqual(inst.activity[2].detail.extension[0].url.as_json(), "http://example.org/fhir/StructureDefinition/RevisionDate")
        self.assertEqual(inst.activity[2].detail.extension[0].valueDate.value, FHIRDate("2012-09-10").value)
        self.assertEqual(inst.activity[2].detail.extension[0].valueDate.as_json(), "2012-09-10")
        self.assertEqual(inst.activity[2].detail.extension[0].valueDate.date, FHIRDate('2012-09-10').date)
        self.assertEqual(inst.activity[2].detail.scheduledPeriod.start.value, FHIRDateTime("2012-09-10").value)
        self.assertEqual(inst.activity[2].detail.scheduledPeriod.start.as_json(), "2012-09-10")
        self.assertEqual(inst.activity[2].detail.status.value, FHIRCode("in-progress").value)
        self.assertEqual(inst.activity[2].detail.status.as_json(), "in-progress")
        self.assertEqual(inst.activity[3].detail.description.value, FHIRString("Eve will walk her friend's dog up and down a big hill 15-30 minutes 3 days a week").value)
        self.assertEqual(inst.activity[3].detail.description.as_json(), "Eve will walk her friend's dog up and down a big hill 15-30 minutes 3 days a week")
        self.assertFalse(inst.activity[3].detail.doNotPerform)
        self.assertEqual(inst.activity[3].detail.extension[0].url.value, FHIRUri("http://example.org/fhir/StructureDefinition/RevisionDate").value)
        self.assertEqual(inst.activity[3].detail.extension[0].url.as_json(), "http://example.org/fhir/StructureDefinition/RevisionDate")
        self.assertEqual(inst.activity[3].detail.extension[0].valueDate.value, FHIRDate("2012-09-10").value)
        self.assertEqual(inst.activity[3].detail.extension[0].valueDate.as_json(), "2012-09-10")
        self.assertEqual(inst.activity[3].detail.extension[0].valueDate.date, FHIRDate('2012-09-10').date)
        self.assertEqual(inst.activity[3].detail.scheduledPeriod.start.value, FHIRDateTime("2012-08-27").value)
        self.assertEqual(inst.activity[3].detail.scheduledPeriod.start.as_json(), "2012-08-27")
        self.assertEqual(inst.activity[3].detail.status.value, FHIRCode("in-progress").value)
        self.assertEqual(inst.activity[3].detail.status.as_json(), "in-progress")
        self.assertEqual(inst.activity[3].progress[0].text.value, FHIRMarkdown("Eve would like to try for 5 days a week.").value)
        self.assertEqual(inst.activity[3].progress[0].text.as_json(), "Eve would like to try for 5 days a week.")
        self.assertEqual(inst.activity[3].progress[0].time.value, FHIRDateTime("2012-08-27").value)
        self.assertEqual(inst.activity[3].progress[0].time.as_json(), "2012-08-27")
        self.assertEqual(inst.activity[3].progress[1].text.value, FHIRMarkdown("Eve is still walking the dogs.").value)
        self.assertEqual(inst.activity[3].progress[1].text.as_json(), "Eve is still walking the dogs.")
        self.assertEqual(inst.activity[3].progress[1].time.value, FHIRDateTime("2012-09-10").value)
        self.assertEqual(inst.activity[3].progress[1].time.as_json(), "2012-09-10")
        self.assertEqual(inst.activity[4].detail.description.value, FHIRString("Eve will walk 3 blocks to her parents house twice a week").value)
        self.assertEqual(inst.activity[4].detail.description.as_json(), "Eve will walk 3 blocks to her parents house twice a week")
        self.assertFalse(inst.activity[4].detail.doNotPerform)
        self.assertEqual(inst.activity[4].detail.extension[0].url.value, FHIRUri("http://example.org/fhir/StructureDefinition/RevisionDate").value)
        self.assertEqual(inst.activity[4].detail.extension[0].url.as_json(), "http://example.org/fhir/StructureDefinition/RevisionDate")
        self.assertEqual(inst.activity[4].detail.extension[0].valueDate.value, FHIRDate("2012-09-10").value)
        self.assertEqual(inst.activity[4].detail.extension[0].valueDate.as_json(), "2012-09-10")
        self.assertEqual(inst.activity[4].detail.extension[0].valueDate.date, FHIRDate('2012-09-10').date)
        self.assertEqual(inst.activity[4].detail.scheduledPeriod.start.value, FHIRDateTime("2012-07-23").value)
        self.assertEqual(inst.activity[4].detail.scheduledPeriod.start.as_json(), "2012-07-23")
        self.assertEqual(inst.activity[4].detail.status.value, FHIRCode("in-progress").value)
        self.assertEqual(inst.activity[4].detail.status.as_json(), "in-progress")
        self.assertEqual(inst.activity[4].progress[0].text.value, FHIRMarkdown("Eve walked 4 times the last week.").value)
        self.assertEqual(inst.activity[4].progress[0].text.as_json(), "Eve walked 4 times the last week.")
        self.assertEqual(inst.activity[4].progress[0].time.value, FHIRDateTime("2012-08-13").value)
        self.assertEqual(inst.activity[4].progress[0].time.as_json(), "2012-08-13")
        self.assertEqual(inst.activity[4].progress[1].text.value, FHIRMarkdown("Eve did not walk to her parents the last week, but has plans to start again").value)
        self.assertEqual(inst.activity[4].progress[1].text.as_json(), "Eve did not walk to her parents the last week, but has plans to start again")
        self.assertEqual(inst.activity[4].progress[1].time.value, FHIRDateTime("2012-09-10").value)
        self.assertEqual(inst.activity[4].progress[1].time.as_json(), "2012-09-10")
        self.assertEqual(inst.activity[5].detail.description.value, FHIRString("Eve will use a calendar to check off after medications are taken").value)
        self.assertEqual(inst.activity[5].detail.description.as_json(), "Eve will use a calendar to check off after medications are taken")
        self.assertFalse(inst.activity[5].detail.doNotPerform)
        self.assertEqual(inst.activity[5].detail.extension[0].url.value, FHIRUri("http://example.org/fhir/StructureDefinition/RevisionDate").value)
        self.assertEqual(inst.activity[5].detail.extension[0].url.as_json(), "http://example.org/fhir/StructureDefinition/RevisionDate")
        self.assertEqual(inst.activity[5].detail.extension[0].valueDate.value, FHIRDate("2012-08-13").value)
        self.assertEqual(inst.activity[5].detail.extension[0].valueDate.as_json(), "2012-08-13")
        self.assertEqual(inst.activity[5].detail.extension[0].valueDate.date, FHIRDate('2012-08-13').date)
        self.assertEqual(inst.activity[5].detail.scheduledPeriod.start.value, FHIRDateTime("2012-07-23").value)
        self.assertEqual(inst.activity[5].detail.scheduledPeriod.start.as_json(), "2012-07-23")
        self.assertEqual(inst.activity[5].detail.status.value, FHIRCode("in-progress").value)
        self.assertEqual(inst.activity[5].detail.status.as_json(), "in-progress")
        self.assertEqual(inst.activity[6].detail.description.value, FHIRString("Eve will use her lights MWF after her shower for 3 minutes").value)
        self.assertEqual(inst.activity[6].detail.description.as_json(), "Eve will use her lights MWF after her shower for 3 minutes")
        self.assertFalse(inst.activity[6].detail.doNotPerform)
        self.assertEqual(inst.activity[6].detail.extension[0].url.value, FHIRUri("http://example.org/fhir/StructureDefinition/RevisionDate").value)
        self.assertEqual(inst.activity[6].detail.extension[0].url.as_json(), "http://example.org/fhir/StructureDefinition/RevisionDate")
        self.assertEqual(inst.activity[6].detail.extension[0].valueDate.value, FHIRDate("2012-08-27").value)
        self.assertEqual(inst.activity[6].detail.extension[0].valueDate.as_json(), "2012-08-27")
        self.assertEqual(inst.activity[6].detail.extension[0].valueDate.date, FHIRDate('2012-08-27').date)
        self.assertEqual(inst.activity[6].detail.scheduledPeriod.start.value, FHIRDateTime("2012-07-23").value)
        self.assertEqual(inst.activity[6].detail.scheduledPeriod.start.as_json(), "2012-07-23")
        self.assertEqual(inst.activity[6].detail.status.value, FHIRCode("in-progress").value)
        self.assertEqual(inst.activity[6].detail.status.as_json(), "in-progress")
        self.assertEqual(inst.activity[6].progress[0].text.value, FHIRMarkdown("After restarting the vinegar soaks the psoriasis is improved and Eve plans to treat the remainder with light treatments.  She plans to start this week.").value)
        self.assertEqual(inst.activity[6].progress[0].text.as_json(), "After restarting the vinegar soaks the psoriasis is improved and Eve plans to treat the remainder with light treatments.  She plans to start this week.")
        self.assertEqual(inst.activity[6].progress[0].time.value, FHIRDateTime("2012-08-13").value)
        self.assertEqual(inst.activity[6].progress[0].time.as_json(), "2012-08-13")
        self.assertEqual(inst.activity[6].progress[1].text.value, FHIRMarkdown("Since her skin is improved Eve has not been using the light treatment as often, maybe once a week.  She would like to increase to 3 times a week again").value)
        self.assertEqual(inst.activity[6].progress[1].text.as_json(), "Since her skin is improved Eve has not been using the light treatment as often, maybe once a week.  She would like to increase to 3 times a week again")
        self.assertEqual(inst.activity[6].progress[1].time.value, FHIRDateTime("2012-08-27").value)
        self.assertEqual(inst.activity[6].progress[1].time.as_json(), "2012-08-27")
        self.assertEqual(inst.activity[7].detail.description.value, FHIRString("Eve will use a calendar of a chart to help her remember when to take her medications").value)
        self.assertEqual(inst.activity[7].detail.description.as_json(), "Eve will use a calendar of a chart to help her remember when to take her medications")
        self.assertFalse(inst.activity[7].detail.doNotPerform)
        self.assertEqual(inst.activity[7].detail.extension[0].url.value, FHIRUri("http://example.org/fhir/StructureDefinition/RevisionDate").value)
        self.assertEqual(inst.activity[7].detail.extension[0].url.as_json(), "http://example.org/fhir/StructureDefinition/RevisionDate")
        self.assertEqual(inst.activity[7].detail.extension[0].valueDate.value, FHIRDate("2012-09-10").value)
        self.assertEqual(inst.activity[7].detail.extension[0].valueDate.as_json(), "2012-09-10")
        self.assertEqual(inst.activity[7].detail.extension[0].valueDate.date, FHIRDate('2012-09-10').date)
        self.assertEqual(inst.activity[7].detail.scheduledPeriod.start.value, FHIRDateTime("2012-07-10").value)
        self.assertEqual(inst.activity[7].detail.scheduledPeriod.start.as_json(), "2012-07-10")
        self.assertEqual(inst.activity[7].detail.status.value, FHIRCode("in-progress").value)
        self.assertEqual(inst.activity[7].detail.status.as_json(), "in-progress")
        self.assertEqual(inst.activity[7].progress[0].text.value, FHIRMarkdown("Eve created a chart as a reminer to take the medications that do not fit in her pill box").value)
        self.assertEqual(inst.activity[7].progress[0].text.as_json(), "Eve created a chart as a reminer to take the medications that do not fit in her pill box")
        self.assertEqual(inst.activity[7].progress[0].time.value, FHIRDateTime("2012-07-23").value)
        self.assertEqual(inst.activity[7].progress[0].time.as_json(), "2012-07-23")
        self.assertEqual(inst.activity[8].detail.description.value, FHIRString("Eve will start using stretch bands and one step 2 days a week Mon/Wed 6-7am and maybe Friday afternoon").value)
        self.assertEqual(inst.activity[8].detail.description.as_json(), "Eve will start using stretch bands and one step 2 days a week Mon/Wed 6-7am and maybe Friday afternoon")
        self.assertFalse(inst.activity[8].detail.doNotPerform)
        self.assertEqual(inst.activity[8].detail.extension[0].url.value, FHIRUri("http://example.org/fhir/StructureDefinition/RevisionDate").value)
        self.assertEqual(inst.activity[8].detail.extension[0].url.as_json(), "http://example.org/fhir/StructureDefinition/RevisionDate")
        self.assertEqual(inst.activity[8].detail.extension[0].valueDate.value, FHIRDate("2012-08-23").value)
        self.assertEqual(inst.activity[8].detail.extension[0].valueDate.as_json(), "2012-08-23")
        self.assertEqual(inst.activity[8].detail.extension[0].valueDate.date, FHIRDate('2012-08-23').date)
        self.assertEqual(inst.activity[8].detail.scheduledPeriod.start.value, FHIRDateTime("2012-07-23").value)
        self.assertEqual(inst.activity[8].detail.scheduledPeriod.start.as_json(), "2012-07-23")
        self.assertEqual(inst.activity[8].detail.status.value, FHIRCode("on-hold").value)
        self.assertEqual(inst.activity[8].detail.status.as_json(), "on-hold")
        self.assertEqual(inst.activity[8].progress[0].text.value, FHIRMarkdown("Will be able to esume exercise.").value)
        self.assertEqual(inst.activity[8].progress[0].text.as_json(), "Will be able to esume exercise.")
        self.assertEqual(inst.activity[8].progress[0].time.value, FHIRDateTime("2012-07-30").value)
        self.assertEqual(inst.activity[8].progress[0].time.as_json(), "2012-07-30")
        self.assertEqual(inst.activity[8].progress[1].text.value, FHIRMarkdown("Eve prefers to focus on walking at this time").value)
        self.assertEqual(inst.activity[8].progress[1].text.as_json(), "Eve prefers to focus on walking at this time")
        self.assertEqual(inst.activity[8].progress[1].time.value, FHIRDateTime("2012-08-13").value)
        self.assertEqual(inst.activity[8].progress[1].time.as_json(), "2012-08-13")
        self.assertEqual(inst.activity[9].detail.description.value, FHIRString("Eve will match a printed medication worksheet with the medication bottles at home").value)
        self.assertEqual(inst.activity[9].detail.description.as_json(), "Eve will match a printed medication worksheet with the medication bottles at home")
        self.assertFalse(inst.activity[9].detail.doNotPerform)
        self.assertEqual(inst.activity[9].detail.extension[0].url.value, FHIRUri("http://example.org/fhir/StructureDefinition/RevisionDate").value)
        self.assertEqual(inst.activity[9].detail.extension[0].url.as_json(), "http://example.org/fhir/StructureDefinition/RevisionDate")
        self.assertEqual(inst.activity[9].detail.extension[0].valueDate.value, FHIRDate("2012-07-23").value)
        self.assertEqual(inst.activity[9].detail.extension[0].valueDate.as_json(), "2012-07-23")
        self.assertEqual(inst.activity[9].detail.extension[0].valueDate.date, FHIRDate('2012-07-23').date)
        self.assertEqual(inst.activity[9].detail.scheduledPeriod.start.value, FHIRDateTime("2012-07-10").value)
        self.assertEqual(inst.activity[9].detail.scheduledPeriod.start.as_json(), "2012-07-10")
        self.assertEqual(inst.activity[9].detail.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.activity[9].detail.status.as_json(), "completed")
        self.assertEqual(inst.contained[0].id.value, FHIRString("p1").value)
        self.assertEqual(inst.contained[0].id.as_json(), "p1")
        self.assertEqual(inst.contained[1].id.value, FHIRString("p2").value)
        self.assertEqual(inst.contained[1].id.as_json(), "p2")
        self.assertEqual(inst.contained[2].id.value, FHIRString("p3").value)
        self.assertEqual(inst.contained[2].id.as_json(), "p3")
        self.assertEqual(inst.contained[3].id.value, FHIRString("g1").value)
        self.assertEqual(inst.contained[3].id.as_json(), "g1")
        self.assertEqual(inst.contained[4].id.value, FHIRString("g2").value)
        self.assertEqual(inst.contained[4].id.as_json(), "g2")
        self.assertEqual(inst.contained[5].id.value, FHIRString("g3").value)
        self.assertEqual(inst.contained[5].id.as_json(), "g3")
        self.assertEqual(inst.contained[6].id.value, FHIRString("g4").value)
        self.assertEqual(inst.contained[6].id.as_json(), "g4")
        self.assertEqual(inst.contained[7].id.value, FHIRString("g5").value)
        self.assertEqual(inst.contained[7].id.as_json(), "g5")
        self.assertEqual(inst.id.value, FHIRString("integrate").value)
        self.assertEqual(inst.id.as_json(), "integrate")
        self.assertEqual(inst.intent.value, FHIRCode("plan").value)
        self.assertEqual(inst.intent.as_json(), "plan")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.note[0].text.value, FHIRMarkdown("Patient family is not ready to commit to goal setting at this time.  Goal setting will be addressed in the future").value)
        self.assertEqual(inst.note[0].text.as_json(), "Patient family is not ready to commit to goal setting at this time.  Goal setting will be addressed in the future")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testCarePlan2(self):
        inst = self.instantiate_from('careplan-example-pregnancy.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CarePlan instance')
        self.implCarePlan2(inst)

        js = inst.as_json()
        self.assertEqual("CarePlan", js["resourceType"])
        inst2 = careplan.CarePlan(js)
        self.implCarePlan2(inst2)

    def implCarePlan2(self, inst):
        self.assertEqual(inst.activity[1].detail.code.coding[0].code.value, FHIRCode("1an").value)
        self.assertEqual(inst.activity[1].detail.code.coding[0].code.as_json(), "1an")
        self.assertEqual(inst.activity[1].detail.code.coding[0].system.value, FHIRUri("http://example.org/mySystem").value)
        self.assertEqual(inst.activity[1].detail.code.coding[0].system.as_json(), "http://example.org/mySystem")
        self.assertEqual(inst.activity[1].detail.code.text.value, FHIRString("First Antenatal encounter").value)
        self.assertEqual(inst.activity[1].detail.code.text.as_json(), "First Antenatal encounter")
        self.assertEqual(inst.activity[1].detail.description.value, FHIRString("The first antenatal encounter. This is where a detailed physical examination is performed.             and the pregnanacy discussed with the mother-to-be.").value)
        self.assertEqual(inst.activity[1].detail.description.as_json(), "The first antenatal encounter. This is where a detailed physical examination is performed.             and the pregnanacy discussed with the mother-to-be.")
        self.assertFalse(inst.activity[1].detail.doNotPerform)
        self.assertEqual(inst.activity[1].detail.kind.value, FHIRCode("Appointment").value)
        self.assertEqual(inst.activity[1].detail.kind.as_json(), "Appointment")
        self.assertEqual(inst.activity[1].detail.scheduledTiming.repeat.boundsPeriod.end.value, FHIRDateTime("2013-02-28").value)
        self.assertEqual(inst.activity[1].detail.scheduledTiming.repeat.boundsPeriod.end.as_json(), "2013-02-28")
        self.assertEqual(inst.activity[1].detail.scheduledTiming.repeat.boundsPeriod.start.value, FHIRDateTime("2013-02-14").value)
        self.assertEqual(inst.activity[1].detail.scheduledTiming.repeat.boundsPeriod.start.as_json(), "2013-02-14")
        self.assertEqual(inst.activity[1].detail.status.value, FHIRCode("scheduled").value)
        self.assertEqual(inst.activity[1].detail.status.as_json(), "scheduled")
        self.assertEqual(inst.activity[1].extension[0].url.value, FHIRUri("http://example.org/fhir/StructureDefinition/careplan#andetails").value)
        self.assertEqual(inst.activity[1].extension[0].url.as_json(), "http://example.org/fhir/StructureDefinition/careplan#andetails")
        self.assertEqual(inst.activity[1].extension[0].valueUri.value, FHIRUri("http://orionhealth.com/fhir/careplan/1andetails").value)
        self.assertEqual(inst.activity[1].extension[0].valueUri.as_json(), "http://orionhealth.com/fhir/careplan/1andetails")
        self.assertEqual(inst.activity[2].detail.code.coding[0].code.value, FHIRCode("an").value)
        self.assertEqual(inst.activity[2].detail.code.coding[0].code.as_json(), "an")
        self.assertEqual(inst.activity[2].detail.code.coding[0].system.value, FHIRUri("http://example.org/mySystem").value)
        self.assertEqual(inst.activity[2].detail.code.coding[0].system.as_json(), "http://example.org/mySystem")
        self.assertEqual(inst.activity[2].detail.code.text.value, FHIRString("Follow-up Antenatal encounter").value)
        self.assertEqual(inst.activity[2].detail.code.text.as_json(), "Follow-up Antenatal encounter")
        self.assertEqual(inst.activity[2].detail.description.value, FHIRString("The second antenatal encounter. Discuss any issues that arose from the first antenatal encounter").value)
        self.assertEqual(inst.activity[2].detail.description.as_json(), "The second antenatal encounter. Discuss any issues that arose from the first antenatal encounter")
        self.assertFalse(inst.activity[2].detail.doNotPerform)
        self.assertEqual(inst.activity[2].detail.kind.value, FHIRCode("Appointment").value)
        self.assertEqual(inst.activity[2].detail.kind.as_json(), "Appointment")
        self.assertEqual(inst.activity[2].detail.scheduledTiming.repeat.boundsPeriod.end.value, FHIRDateTime("2013-03-14").value)
        self.assertEqual(inst.activity[2].detail.scheduledTiming.repeat.boundsPeriod.end.as_json(), "2013-03-14")
        self.assertEqual(inst.activity[2].detail.scheduledTiming.repeat.boundsPeriod.start.value, FHIRDateTime("2013-03-01").value)
        self.assertEqual(inst.activity[2].detail.scheduledTiming.repeat.boundsPeriod.start.as_json(), "2013-03-01")
        self.assertEqual(inst.activity[2].detail.status.value, FHIRCode("not-started").value)
        self.assertEqual(inst.activity[2].detail.status.as_json(), "not-started")
        self.assertEqual(inst.activity[3].detail.code.coding[0].code.value, FHIRCode("del").value)
        self.assertEqual(inst.activity[3].detail.code.coding[0].code.as_json(), "del")
        self.assertEqual(inst.activity[3].detail.code.coding[0].system.value, FHIRUri("http://example.org/mySystem").value)
        self.assertEqual(inst.activity[3].detail.code.coding[0].system.as_json(), "http://example.org/mySystem")
        self.assertEqual(inst.activity[3].detail.code.text.value, FHIRString("Delivery").value)
        self.assertEqual(inst.activity[3].detail.code.text.as_json(), "Delivery")
        self.assertEqual(inst.activity[3].detail.description.value, FHIRString("The delivery.").value)
        self.assertEqual(inst.activity[3].detail.description.as_json(), "The delivery.")
        self.assertFalse(inst.activity[3].detail.doNotPerform)
        self.assertEqual(inst.activity[3].detail.kind.value, FHIRCode("Appointment").value)
        self.assertEqual(inst.activity[3].detail.kind.as_json(), "Appointment")
        self.assertEqual(inst.activity[3].detail.scheduledTiming.repeat.boundsPeriod.end.value, FHIRDateTime("2013-09-14").value)
        self.assertEqual(inst.activity[3].detail.scheduledTiming.repeat.boundsPeriod.end.as_json(), "2013-09-14")
        self.assertEqual(inst.activity[3].detail.scheduledTiming.repeat.boundsPeriod.start.value, FHIRDateTime("2013-09-01").value)
        self.assertEqual(inst.activity[3].detail.scheduledTiming.repeat.boundsPeriod.start.as_json(), "2013-09-01")
        self.assertEqual(inst.activity[3].detail.status.value, FHIRCode("not-started").value)
        self.assertEqual(inst.activity[3].detail.status.as_json(), "not-started")
        self.assertEqual(inst.contained[0].id.value, FHIRString("p1").value)
        self.assertEqual(inst.contained[0].id.as_json(), "p1")
        self.assertEqual(inst.contained[1].id.value, FHIRString("pr1").value)
        self.assertEqual(inst.contained[1].id.as_json(), "pr1")
        self.assertEqual(inst.contained[2].id.value, FHIRString("pr2").value)
        self.assertEqual(inst.contained[2].id.as_json(), "pr2")
        self.assertEqual(inst.contained[3].id.value, FHIRString("careteam").value)
        self.assertEqual(inst.contained[3].id.as_json(), "careteam")
        self.assertEqual(inst.contained[4].id.value, FHIRString("goal").value)
        self.assertEqual(inst.contained[4].id.as_json(), "goal")
        self.assertEqual(inst.extension[0].url.value, FHIRUri("http://example.org/fhir/StructureDefinition/careplan#lmp").value)
        self.assertEqual(inst.extension[0].url.as_json(), "http://example.org/fhir/StructureDefinition/careplan#lmp")
        self.assertEqual(inst.extension[0].valueDateTime.value, FHIRDateTime("2013-01-01").value)
        self.assertEqual(inst.extension[0].valueDateTime.as_json(), "2013-01-01")
        self.assertEqual(inst.id.value, FHIRString("preg").value)
        self.assertEqual(inst.id.as_json(), "preg")
        self.assertEqual(inst.intent.value, FHIRCode("plan").value)
        self.assertEqual(inst.intent.as_json(), "plan")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.period.end.value, FHIRDateTime("2013-10-01").value)
        self.assertEqual(inst.period.end.as_json(), "2013-10-01")
        self.assertEqual(inst.period.start.value, FHIRDateTime("2013-01-01").value)
        self.assertEqual(inst.period.start.as_json(), "2013-01-01")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("additional").value)
        self.assertEqual(inst.text.status.as_json(), "additional")

    def testCarePlan3(self):
        inst = self.instantiate_from('careplan-example-f201-renal.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CarePlan instance')
        self.implCarePlan3(inst)

        js = inst.as_json()
        self.assertEqual("CarePlan", js["resourceType"])
        inst2 = careplan.CarePlan(js)
        self.implCarePlan3(inst2)

    def implCarePlan3(self, inst):
        self.assertEqual(inst.activity[0].detail.code.coding[0].code.value, FHIRCode("284093001").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].code.as_json(), "284093001")
        self.assertEqual(inst.activity[0].detail.code.coding[0].display.value, FHIRString("Potassium supplementation").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].display.as_json(), "Potassium supplementation")
        self.assertEqual(inst.activity[0].detail.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.activity[0].detail.dailyAmount.code.value, FHIRCode("258718000").value)
        self.assertEqual(inst.activity[0].detail.dailyAmount.code.as_json(), "258718000")
        self.assertEqual(inst.activity[0].detail.dailyAmount.system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.activity[0].detail.dailyAmount.system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.activity[0].detail.dailyAmount.unit.value, FHIRString("mmol").value)
        self.assertEqual(inst.activity[0].detail.dailyAmount.unit.as_json(), "mmol")
        self.assertEqual(inst.activity[0].detail.dailyAmount.value, 80)
        self.assertFalse(inst.activity[0].detail.doNotPerform)
        self.assertEqual(inst.activity[0].detail.kind.value, FHIRCode("NutritionOrder").value)
        self.assertEqual(inst.activity[0].detail.kind.as_json(), "NutritionOrder")
        self.assertEqual(inst.activity[0].detail.scheduledString.value, FHIRString("daily").value)
        self.assertEqual(inst.activity[0].detail.scheduledString.as_json(), "daily")
        self.assertEqual(inst.activity[0].detail.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.activity[0].detail.status.as_json(), "completed")
        self.assertEqual(inst.activity[1].detail.code.coding[0].code.value, FHIRCode("306005").value)
        self.assertEqual(inst.activity[1].detail.code.coding[0].code.as_json(), "306005")
        self.assertEqual(inst.activity[1].detail.code.coding[0].display.value, FHIRString("Echography of kidney").value)
        self.assertEqual(inst.activity[1].detail.code.coding[0].display.as_json(), "Echography of kidney")
        self.assertEqual(inst.activity[1].detail.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.activity[1].detail.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertFalse(inst.activity[1].detail.doNotPerform)
        self.assertEqual(inst.activity[1].detail.kind.value, FHIRCode("ServiceRequest").value)
        self.assertEqual(inst.activity[1].detail.kind.as_json(), "ServiceRequest")
        self.assertEqual(inst.activity[1].detail.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.activity[1].detail.status.as_json(), "completed")
        self.assertEqual(inst.contained[0].id.value, FHIRString("careteam").value)
        self.assertEqual(inst.contained[0].id.as_json(), "careteam")
        self.assertEqual(inst.contained[1].id.value, FHIRString("goal").value)
        self.assertEqual(inst.contained[1].id.as_json(), "goal")
        self.assertEqual(inst.id.value, FHIRString("f201").value)
        self.assertEqual(inst.id.as_json(), "f201")
        self.assertEqual(inst.intent.value, FHIRCode("proposal").value)
        self.assertEqual(inst.intent.as_json(), "proposal")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.period.end.value, FHIRDateTime("2013-03-13").value)
        self.assertEqual(inst.period.end.as_json(), "2013-03-13")
        self.assertEqual(inst.period.start.value, FHIRDateTime("2013-03-11").value)
        self.assertEqual(inst.period.start.as_json(), "2013-03-11")
        self.assertEqual(inst.status.value, FHIRCode("draft").value)
        self.assertEqual(inst.status.as_json(), "draft")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testCarePlan4(self):
        inst = self.instantiate_from('careplan-example-f002-lung.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CarePlan instance')
        self.implCarePlan4(inst)

        js = inst.as_json()
        self.assertEqual("CarePlan", js["resourceType"])
        inst2 = careplan.CarePlan(js)
        self.implCarePlan4(inst2)

    def implCarePlan4(self, inst):
        self.assertEqual(inst.activity[0].detail.code.coding[0].code.value, FHIRCode("359615001").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].code.as_json(), "359615001")
        self.assertEqual(inst.activity[0].detail.code.coding[0].display.value, FHIRString("Partial lobectomy of lung").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].display.as_json(), "Partial lobectomy of lung")
        self.assertEqual(inst.activity[0].detail.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertTrue(inst.activity[0].detail.doNotPerform)
        self.assertEqual(inst.activity[0].detail.kind.value, FHIRCode("ServiceRequest").value)
        self.assertEqual(inst.activity[0].detail.kind.as_json(), "ServiceRequest")
        self.assertEqual(inst.activity[0].detail.scheduledString.value, FHIRString("2011-07-07T09:30:10+01:00").value)
        self.assertEqual(inst.activity[0].detail.scheduledString.as_json(), "2011-07-07T09:30:10+01:00")
        self.assertEqual(inst.activity[0].detail.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.activity[0].detail.status.as_json(), "completed")
        self.assertEqual(inst.contained[0].id.value, FHIRString("careteam").value)
        self.assertEqual(inst.contained[0].id.as_json(), "careteam")
        self.assertEqual(inst.contained[1].id.value, FHIRString("goal").value)
        self.assertEqual(inst.contained[1].id.as_json(), "goal")
        self.assertEqual(inst.id.value, FHIRString("f002").value)
        self.assertEqual(inst.id.as_json(), "f002")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.bmc.nl/zorgportal/identifiers/careplans").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.bmc.nl/zorgportal/identifiers/careplans")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("CP2934").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "CP2934")
        self.assertEqual(inst.intent.value, FHIRCode("plan").value)
        self.assertEqual(inst.intent.as_json(), "plan")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.period.end.value, FHIRDateTime("2013-07-07").value)
        self.assertEqual(inst.period.end.as_json(), "2013-07-07")
        self.assertEqual(inst.period.start.value, FHIRDateTime("2011-07-06").value)
        self.assertEqual(inst.period.start.as_json(), "2011-07-06")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testCarePlan5(self):
        inst = self.instantiate_from('careplan-example-GPVisit.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CarePlan instance')
        self.implCarePlan5(inst)

        js = inst.as_json()
        self.assertEqual("CarePlan", js["resourceType"])
        inst2 = careplan.CarePlan(js)
        self.implCarePlan5(inst2)

    def implCarePlan5(self, inst):
        self.assertEqual(inst.activity[0].detail.code.coding[0].code.value, FHIRCode("nursecon").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].code.as_json(), "nursecon")
        self.assertEqual(inst.activity[0].detail.code.coding[0].system.value, FHIRUri("http://example.org/local").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].system.as_json(), "http://example.org/local")
        self.assertEqual(inst.activity[0].detail.code.text.value, FHIRString("Nurse Consultation").value)
        self.assertEqual(inst.activity[0].detail.code.text.as_json(), "Nurse Consultation")
        self.assertFalse(inst.activity[0].detail.doNotPerform)
        self.assertEqual(inst.activity[0].detail.kind.value, FHIRCode("Appointment").value)
        self.assertEqual(inst.activity[0].detail.kind.as_json(), "Appointment")
        self.assertEqual(inst.activity[0].detail.scheduledPeriod.end.value, FHIRDateTime("2013-01-01T10:50:00+00:00").value)
        self.assertEqual(inst.activity[0].detail.scheduledPeriod.end.as_json(), "2013-01-01T10:50:00+00:00")
        self.assertEqual(inst.activity[0].detail.scheduledPeriod.start.value, FHIRDateTime("2013-01-01T10:38:00+00:00").value)
        self.assertEqual(inst.activity[0].detail.scheduledPeriod.start.as_json(), "2013-01-01T10:38:00+00:00")
        self.assertEqual(inst.activity[0].detail.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.activity[0].detail.status.as_json(), "completed")
        self.assertEqual(inst.activity[1].detail.code.coding[0].code.value, FHIRCode("doccon").value)
        self.assertEqual(inst.activity[1].detail.code.coding[0].code.as_json(), "doccon")
        self.assertEqual(inst.activity[1].detail.code.coding[0].system.value, FHIRUri("http://example.org/local").value)
        self.assertEqual(inst.activity[1].detail.code.coding[0].system.as_json(), "http://example.org/local")
        self.assertEqual(inst.activity[1].detail.code.text.value, FHIRString("Doctor Consultation").value)
        self.assertEqual(inst.activity[1].detail.code.text.as_json(), "Doctor Consultation")
        self.assertFalse(inst.activity[1].detail.doNotPerform)
        self.assertEqual(inst.activity[1].detail.kind.value, FHIRCode("Appointment").value)
        self.assertEqual(inst.activity[1].detail.kind.as_json(), "Appointment")
        self.assertEqual(inst.activity[1].detail.status.value, FHIRCode("scheduled").value)
        self.assertEqual(inst.activity[1].detail.status.as_json(), "scheduled")
        self.assertEqual(inst.contained[0].id.value, FHIRString("p1").value)
        self.assertEqual(inst.contained[0].id.as_json(), "p1")
        self.assertEqual(inst.contained[1].id.value, FHIRString("careteam").value)
        self.assertEqual(inst.contained[1].id.as_json(), "careteam")
        self.assertEqual(inst.contained[2].id.value, FHIRString("goal").value)
        self.assertEqual(inst.contained[2].id.as_json(), "goal")
        self.assertEqual(inst.id.value, FHIRString("gpvisit").value)
        self.assertEqual(inst.id.as_json(), "gpvisit")
        self.assertEqual(inst.intent.value, FHIRCode("plan").value)
        self.assertEqual(inst.intent.as_json(), "plan")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.period.start.value, FHIRDateTime("2013-01-01T10:30:00+00:00").value)
        self.assertEqual(inst.period.start.as_json(), "2013-01-01T10:30:00+00:00")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("additional").value)
        self.assertEqual(inst.text.status.as_json(), "additional")

    def testCarePlan6(self):
        inst = self.instantiate_from('careplan-example-f203-sepsis.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CarePlan instance')
        self.implCarePlan6(inst)

        js = inst.as_json()
        self.assertEqual("CarePlan", js["resourceType"])
        inst2 = careplan.CarePlan(js)
        self.implCarePlan6(inst2)

    def implCarePlan6(self, inst):
        self.assertEqual(inst.activity[0].detail.code.coding[0].code.value, FHIRCode("241541005").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].code.as_json(), "241541005")
        self.assertEqual(inst.activity[0].detail.code.coding[0].display.value, FHIRString("High resolution computed tomography of lungs").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].display.as_json(), "High resolution computed tomography of lungs")
        self.assertEqual(inst.activity[0].detail.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertFalse(inst.activity[0].detail.doNotPerform)
        self.assertEqual(inst.activity[0].detail.kind.value, FHIRCode("ServiceRequest").value)
        self.assertEqual(inst.activity[0].detail.kind.as_json(), "ServiceRequest")
        self.assertEqual(inst.activity[0].detail.status.value, FHIRCode("not-started").value)
        self.assertEqual(inst.activity[0].detail.status.as_json(), "not-started")
        self.assertEqual(inst.contained[0].id.value, FHIRString("careteam").value)
        self.assertEqual(inst.contained[0].id.as_json(), "careteam")
        self.assertEqual(inst.contained[1].id.value, FHIRString("goal").value)
        self.assertEqual(inst.contained[1].id.as_json(), "goal")
        self.assertEqual(inst.id.value, FHIRString("f203").value)
        self.assertEqual(inst.id.as_json(), "f203")
        self.assertEqual(inst.intent.value, FHIRCode("plan").value)
        self.assertEqual(inst.intent.as_json(), "plan")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.period.end.value, FHIRDateTime("2013-04-21").value)
        self.assertEqual(inst.period.end.as_json(), "2013-04-21")
        self.assertEqual(inst.period.start.value, FHIRDateTime("2013-04-14").value)
        self.assertEqual(inst.period.start.as_json(), "2013-04-14")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testCarePlan7(self):
        inst = self.instantiate_from('careplan-example-f003-pharynx.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CarePlan instance')
        self.implCarePlan7(inst)

        js = inst.as_json()
        self.assertEqual("CarePlan", js["resourceType"])
        inst2 = careplan.CarePlan(js)
        self.implCarePlan7(inst2)

    def implCarePlan7(self, inst):
        self.assertEqual(inst.activity[0].detail.code.coding[0].code.value, FHIRCode("172960003").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].code.as_json(), "172960003")
        self.assertEqual(inst.activity[0].detail.code.coding[0].display.value, FHIRString("Incision of retropharyngeal abscess").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].display.as_json(), "Incision of retropharyngeal abscess")
        self.assertEqual(inst.activity[0].detail.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertTrue(inst.activity[0].detail.doNotPerform)
        self.assertEqual(inst.activity[0].detail.kind.value, FHIRCode("ServiceRequest").value)
        self.assertEqual(inst.activity[0].detail.kind.as_json(), "ServiceRequest")
        self.assertEqual(inst.activity[0].detail.scheduledString.value, FHIRString("2011-06-27T09:30:10+01:00").value)
        self.assertEqual(inst.activity[0].detail.scheduledString.as_json(), "2011-06-27T09:30:10+01:00")
        self.assertEqual(inst.activity[0].detail.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.activity[0].detail.status.as_json(), "completed")
        self.assertEqual(inst.contained[0].id.value, FHIRString("careteam").value)
        self.assertEqual(inst.contained[0].id.as_json(), "careteam")
        self.assertEqual(inst.contained[1].id.value, FHIRString("goal").value)
        self.assertEqual(inst.contained[1].id.as_json(), "goal")
        self.assertEqual(inst.id.value, FHIRString("f003").value)
        self.assertEqual(inst.id.as_json(), "f003")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.bmc.nl/zorgportal/identifiers/careplans").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.bmc.nl/zorgportal/identifiers/careplans")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("CP3953").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "CP3953")
        self.assertEqual(inst.intent.value, FHIRCode("plan").value)
        self.assertEqual(inst.intent.as_json(), "plan")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.period.end.value, FHIRDateTime("2013-03-08T09:30:10+01:00").value)
        self.assertEqual(inst.period.end.as_json(), "2013-03-08T09:30:10+01:00")
        self.assertEqual(inst.period.start.value, FHIRDateTime("2013-03-08T09:00:10+01:00").value)
        self.assertEqual(inst.period.start.as_json(), "2013-03-08T09:00:10+01:00")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testCarePlan8(self):
        inst = self.instantiate_from('careplan-example-f001-heart.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CarePlan instance')
        self.implCarePlan8(inst)

        js = inst.as_json()
        self.assertEqual("CarePlan", js["resourceType"])
        inst2 = careplan.CarePlan(js)
        self.implCarePlan8(inst2)

    def implCarePlan8(self, inst):
        self.assertEqual(inst.activity[0].detail.code.coding[0].code.value, FHIRCode("64915003").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].code.as_json(), "64915003")
        self.assertEqual(inst.activity[0].detail.code.coding[0].display.value, FHIRString("Operation on heart").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].display.as_json(), "Operation on heart")
        self.assertEqual(inst.activity[0].detail.code.coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertTrue(inst.activity[0].detail.doNotPerform)
        self.assertEqual(inst.activity[0].detail.kind.value, FHIRCode("ServiceRequest").value)
        self.assertEqual(inst.activity[0].detail.kind.as_json(), "ServiceRequest")
        self.assertEqual(inst.activity[0].detail.scheduledString.value, FHIRString("2011-06-27T09:30:10+01:00").value)
        self.assertEqual(inst.activity[0].detail.scheduledString.as_json(), "2011-06-27T09:30:10+01:00")
        self.assertEqual(inst.activity[0].detail.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.activity[0].detail.status.as_json(), "completed")
        self.assertEqual(inst.contained[0].id.value, FHIRString("careteam").value)
        self.assertEqual(inst.contained[0].id.as_json(), "careteam")
        self.assertEqual(inst.contained[1].id.value, FHIRString("goal").value)
        self.assertEqual(inst.contained[1].id.as_json(), "goal")
        self.assertEqual(inst.id.value, FHIRString("f001").value)
        self.assertEqual(inst.id.as_json(), "f001")
        self.assertEqual(inst.identifier[0].system.value, FHIRUri("http://www.bmc.nl/zorgportal/identifiers/careplans").value)
        self.assertEqual(inst.identifier[0].system.as_json(), "http://www.bmc.nl/zorgportal/identifiers/careplans")
        self.assertEqual(inst.identifier[0].use.value, FHIRCode("official").value)
        self.assertEqual(inst.identifier[0].use.as_json(), "official")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("CP2903").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "CP2903")
        self.assertEqual(inst.intent.value, FHIRCode("plan").value)
        self.assertEqual(inst.intent.as_json(), "plan")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.period.end.value, FHIRDateTime("2011-06-27").value)
        self.assertEqual(inst.period.end.as_json(), "2011-06-27")
        self.assertEqual(inst.period.start.value, FHIRDateTime("2011-06-26").value)
        self.assertEqual(inst.period.start.as_json(), "2011-06-26")
        self.assertEqual(inst.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.status.as_json(), "completed")
        self.assertEqual(inst.text.status.value, FHIRCode("generated").value)
        self.assertEqual(inst.text.status.as_json(), "generated")

    def testCarePlan9(self):
        inst = self.instantiate_from('careplan-example-obesity-narrative.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CarePlan instance')
        self.implCarePlan9(inst)

        js = inst.as_json()
        self.assertEqual("CarePlan", js["resourceType"])
        inst2 = careplan.CarePlan(js)
        self.implCarePlan9(inst2)

    def implCarePlan9(self, inst):
        self.assertEqual(inst.id.value, FHIRString("obesity-narrative").value)
        self.assertEqual(inst.id.as_json(), "obesity-narrative")
        self.assertEqual(inst.intent.value, FHIRCode("plan").value)
        self.assertEqual(inst.intent.as_json(), "plan")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("additional").value)
        self.assertEqual(inst.text.status.as_json(), "additional")

    def testCarePlan10(self):
        inst = self.instantiate_from('careplan-example.json')
        self.assertIsNotNone(inst, 'Must have instantiated a CarePlan instance')
        self.implCarePlan10(inst)

        js = inst.as_json()
        self.assertEqual("CarePlan", js["resourceType"])
        inst2 = careplan.CarePlan(js)
        self.implCarePlan10(inst2)

    def implCarePlan10(self, inst):
        self.assertEqual(inst.activity[0].detail.code.coding[0].code.value, FHIRCode("3141-9").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].code.as_json(), "3141-9")
        self.assertEqual(inst.activity[0].detail.code.coding[0].display.value, FHIRString("Weight Measured").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].display.as_json(), "Weight Measured")
        self.assertEqual(inst.activity[0].detail.code.coding[0].system.value, FHIRUri("http://loinc.org").value)
        self.assertEqual(inst.activity[0].detail.code.coding[0].system.as_json(), "http://loinc.org")
        self.assertEqual(inst.activity[0].detail.code.coding[1].code.value, FHIRCode("27113001").value)
        self.assertEqual(inst.activity[0].detail.code.coding[1].code.as_json(), "27113001")
        self.assertEqual(inst.activity[0].detail.code.coding[1].display.value, FHIRString("Body weight").value)
        self.assertEqual(inst.activity[0].detail.code.coding[1].display.as_json(), "Body weight")
        self.assertEqual(inst.activity[0].detail.code.coding[1].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.activity[0].detail.code.coding[1].system.as_json(), "http://snomed.info/sct")
        self.assertFalse(inst.activity[0].detail.doNotPerform)
        self.assertEqual(inst.activity[0].detail.scheduledTiming.repeat.frequency.value, FHIRPositiveInt('1').value)
        self.assertEqual(inst.activity[0].detail.scheduledTiming.repeat.frequency.as_json(), 1)
        self.assertEqual(inst.activity[0].detail.scheduledTiming.repeat.period, 1)
        self.assertEqual(inst.activity[0].detail.scheduledTiming.repeat.periodUnit.value, FHIRCode("d").value)
        self.assertEqual(inst.activity[0].detail.scheduledTiming.repeat.periodUnit.as_json(), "d")
        self.assertEqual(inst.activity[0].detail.status.value, FHIRCode("completed").value)
        self.assertEqual(inst.activity[0].detail.status.as_json(), "completed")
        self.assertEqual(inst.activity[0].detail.statusReason.text.value, FHIRString("Achieved weight loss to mitigate diabetes risk.").value)
        self.assertEqual(inst.activity[0].detail.statusReason.text.as_json(), "Achieved weight loss to mitigate diabetes risk.")
        self.assertEqual(inst.activity[0].outcomeCodeableConcept[0].coding[0].code.value, FHIRCode("161832001").value)
        self.assertEqual(inst.activity[0].outcomeCodeableConcept[0].coding[0].code.as_json(), "161832001")
        self.assertEqual(inst.activity[0].outcomeCodeableConcept[0].coding[0].display.value, FHIRString("Progressive weight loss").value)
        self.assertEqual(inst.activity[0].outcomeCodeableConcept[0].coding[0].display.as_json(), "Progressive weight loss")
        self.assertEqual(inst.activity[0].outcomeCodeableConcept[0].coding[0].system.value, FHIRUri("http://snomed.info/sct").value)
        self.assertEqual(inst.activity[0].outcomeCodeableConcept[0].coding[0].system.as_json(), "http://snomed.info/sct")
        self.assertEqual(inst.category[0].text.value, FHIRString("Weight management plan").value)
        self.assertEqual(inst.category[0].text.as_json(), "Weight management plan")
        self.assertEqual(inst.contained[0].id.value, FHIRString("p1").value)
        self.assertEqual(inst.contained[0].id.as_json(), "p1")
        self.assertEqual(inst.created.value, FHIRDateTime("2016-01-01").value)
        self.assertEqual(inst.created.as_json(), "2016-01-01")
        self.assertEqual(inst.description.value, FHIRString("Manage obesity and weight loss").value)
        self.assertEqual(inst.description.as_json(), "Manage obesity and weight loss")
        self.assertEqual(inst.id.value, FHIRString("example").value)
        self.assertEqual(inst.id.as_json(), "example")
        self.assertEqual(inst.identifier[0].value.value, FHIRString("12345").value)
        self.assertEqual(inst.identifier[0].value.as_json(), "12345")
        self.assertEqual(inst.instantiatesUri[0].value, FHIRUri("http://example.org/protocol-for-obesity").value)
        self.assertEqual(inst.instantiatesUri[0].as_json(), "http://example.org/protocol-for-obesity")
        self.assertEqual(inst.intent.value, FHIRCode("plan").value)
        self.assertEqual(inst.intent.as_json(), "plan")
        self.assertEqual(inst.meta.tag[0].code.value, FHIRCode("HTEST").value)
        self.assertEqual(inst.meta.tag[0].code.as_json(), "HTEST")
        self.assertEqual(inst.meta.tag[0].display.value, FHIRString("test health data").value)
        self.assertEqual(inst.meta.tag[0].display.as_json(), "test health data")
        self.assertEqual(inst.meta.tag[0].system.value, FHIRUri("http://terminology.hl7.org/CodeSystem/v3-ActReason").value)
        self.assertEqual(inst.meta.tag[0].system.as_json(), "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.period.end.value, FHIRDateTime("2017-06-01").value)
        self.assertEqual(inst.period.end.as_json(), "2017-06-01")
        self.assertEqual(inst.status.value, FHIRCode("active").value)
        self.assertEqual(inst.status.as_json(), "active")
        self.assertEqual(inst.text.status.value, FHIRCode("additional").value)
        self.assertEqual(inst.text.status.as_json(), "additional")


from fhirclient.models.fhirdatatypes import FHIRString, FHIRUri, FHIRDate, FHIRDateTime, FHIRCode, FHIRMarkdown, FHIRPositiveInt